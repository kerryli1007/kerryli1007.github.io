<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一颗西蓝花🥦</title>
  
  
  <link href="https://kerryli1007.github.io/atom.xml" rel="self"/>
  
  <link href="https://kerryli1007.github.io/"/>
  <updated>2023-03-24T10:41:37.521Z</updated>
  <id>https://kerryli1007.github.io/</id>
  
  <author>
    <name>一颗西蓝花🥦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人生决策效率算法</title>
    <link href="https://kerryli1007.github.io/2023/03/23/20230324-%E4%BA%BA%E7%94%9F%E6%95%88%E7%8E%87%E7%AE%97%E6%B3%95/"/>
    <id>https://kerryli1007.github.io/2023/03/23/20230324-%E4%BA%BA%E7%94%9F%E6%95%88%E7%8E%87%E7%AE%97%E6%B3%95/</id>
    <published>2023-03-23T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是人生决策效率算法？"><a href="#什么是人生决策效率算法？" class="headerlink" title="什么是人生决策效率算法？"></a>什么是人生决策效率算法？</h1><p>我们的人生，由无数个决策组成。如果我们做了正确的决策，那我们会获得不错的回报。但是，如果我们做了错误的决策，那我们不但拿不到回报，还会付出代价。</p><p>人生决策效率，指在我的范围内，做出对未来的自己，最有裨益的决策。</p><p>诸多因素均会影响我们的决策效率，根据我认为的重要性优先级，将这些因素进行排序：<br>1、认知的高低。认知高低是最重要最关键的影响因素。举个例子，2017年的我，对未来毫无规划，也不知道职场的规则，所以做出了在咨询公司呆了2个月，然后又去互联网公司的错误决策。这个时期的我，对社会的认知能力为1（从1 - 10 打分）。特别说明一点，认知高低永远是相对的，我现在评估17年的我认知能力为1，当下认知能力为6，但是很有可能，再过3年，我会评价目前的自己，认知能力也只有1。<br>2、金钱的富裕程度。在对决策的影响中，似乎很少有人谈及金钱，因为传统文化的影响，中国人羞于谈论金钱。但是金钱时时刻刻影响我们的决策，小到洗衣液的选购，大到生病上学。金钱充足的人，更容易目光远大；金钱匮乏的人，更容易鼠目寸光。<br>3、未知的信息。外界的突发的事件，比如俄乌战争。</p><p>这里面1和2是我们已知的，3是未知的。</p><p>想要做出最好的决策，我们需要提升自己在因素1和因素2上的能力。</p><h1 id="认知高低"><a href="#认知高低" class="headerlink" title="认知高低"></a>认知高低</h1><p>认知直接影响一个人的状态。</p><p>我健身4年了，但是我知道，最近半年，是我进步最快的半年。我之所以说，最近半年的进步最快，直接证明是我的3大项数据，卧推23kg、硬拉63kg、深蹲40kg。以前躺在罗马椅上，我连卧推用的15kg小杆都推不起来。</p><p>为什么有这个进步？<br>因为，我对饮食、训练都有了更深一层的认识。</p><p>在训练上，我开始思考肌肉本来的功能走向、肌肥大的原理、休息日对我训练的重要性。<br>在饮食上，我开始从人体所需的3大宏量元素思考我到底更需要什么。</p><p>而以前，我从不思考这些。</p><p>以前的我训练，基本上每天都去健身房、但是没有系统的训练计划，也不去考虑，我的肌肉量到底涨还是没有涨。这种不带脑子的锻炼，实际上是在麻痹自己。<br>以前的我饮食，每一顿碳水过量、脂肪过量，蛋白质少的要死，吃的随心所欲。</p><p>所以，过去健身的3年6个月，我的投入为10，产出只有3，最近6个月，我的投入为3，产出有2。<br>两者一比，谁的效率更好，一目了然，也自然就是我今天想聊的，人生决策效率。</p><p>如果4年前的我，就能用今天的认知去做判断，那现在的我，身材应该也和我的偶像一样好了。</p><h1 id="金钱的富裕程度"><a href="#金钱的富裕程度" class="headerlink" title="金钱的富裕程度"></a>金钱的富裕程度</h1><p>这个我还不能有切身体会，毕竟我一直都在贫困线上挣扎。等以后，如果有机会有钱了再来写感受吧。</p><h1 id="提个问题，怎么样才能提高认知水平？"><a href="#提个问题，怎么样才能提高认知水平？" class="headerlink" title="提个问题，怎么样才能提高认知水平？"></a>提个问题，怎么样才能提高认知水平？</h1><p>以前的我会说：看书，看大佬怎么做的。</p><p>现在的我会说：去尝试、去验证、去失败。有的事，你没有亲身经历过，你永远不知道到底是怎么一回事。</p><p>不要停下来，人生在于发疯，你发疯的次数越多，你成长越快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是人生决策效率算法？&quot;&gt;&lt;a href=&quot;#什么是人生决策效率算法？&quot; class=&quot;headerlink&quot; title=&quot;什么是人生决策效率算法？&quot;&gt;&lt;/a&gt;什么是人生决策效率算法？&lt;/h1&gt;&lt;p&gt;我们的人生，由无数个决策组成。如果我们做了正确的决策，那我们</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>从HOW到WHY</title>
    <link href="https://kerryli1007.github.io/2023/03/22/20230323-%E4%BB%8EHOW%E5%88%B0WHY/"/>
    <id>https://kerryli1007.github.io/2023/03/22/20230323-%E4%BB%8EHOW%E5%88%B0WHY/</id>
    <published>2023-03-22T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚又一次阅读了自己过往的博客，发现以前自己做的事，都是关于「如何把一件事做好，比如把产品卖出去、把项目交付好」，而自己最近做的事，则是判断「我应该做什么去获得最大收益」。想来这也是我确实成长到了一个新阶段，祝贺一下自己。</p><h1 id="为什么说自己成长到了一个新阶段？"><a href="#为什么说自己成长到了一个新阶段？" class="headerlink" title="为什么说自己成长到了一个新阶段？"></a>为什么说自己成长到了一个新阶段？</h1><p>因为选择应该做什么，比把一件事做好，更重要，更困难。</p><p>解释一下「选择应该做什么」与「把一件事做好」的区别。</p><ul><li>选择应该做什么：实际上是在判断ROI，要做的事根据预期收益和投入排优先级。</li><li>把一件事做好：是在优先级排列出来后，去执行。</li></ul><p>为什么说前者比后者更重要？<br>优先级的判断，直接影响后续执行时的资源投入，如果资源投入错了，那就白干。</p><p>为什么说前者比后者更困难？<br>因为提前预判项目的收益，需要很多认知的支持，包括：对用户心理的清晰认知、对产品形态的精准把握。</p><h1 id="什么帮助我形成了「应该怎么做去获得最大收益」这种思维？"><a href="#什么帮助我形成了「应该怎么做去获得最大收益」这种思维？" class="headerlink" title="什么帮助我形成了「应该怎么做去获得最大收益」这种思维？"></a>什么帮助我形成了「应该怎么做去获得最大收益」这种思维？</h1><p>自媒体创业。</p><p>自己的内容创作能力有上限，因此每天能发的内容数量是有限的，大概在3-4条，而我需要通过这3-4条的内容获得流量、获得粉丝。所以，我需要不断地去思考，做什么品类的内容能获得更好的数据、更有助于人设的打造。</p><p>更好的数据具体指？</p><p>数据分为终极指标与优化指标。</p><p>终极指标：曝光数、转粉数、转化数。<br>优化指标：2s跳出、5s完播率、平均播放时长等等</p><p>前者是我想追逐的目标，后者是指导我去优化视频内容的参考指标。</p><p>人设的打造是指？</p><p>人设打造的目标是我要让用户记住我，路径是把我和一些用户目前已经非常熟悉的概念联系起来（涉及到战略方向，不做展开），具体的执行就是在不同品类的视频类型中，一直强调这些概念。</p><p>所以我做的一切都是奔着数据和人设去的，目前看起来，效果还不错。validate我说效果还不错的证据是：<br>1、最新5条内容的vv都在一个不错的量级<br>2、互动数据中有很多我人设相关概念的评论出现</p><h1 id="未来怎么才能成长地更快？"><a href="#未来怎么才能成长地更快？" class="headerlink" title="未来怎么才能成长地更快？"></a>未来怎么才能成长地更快？</h1><p>不要停下来，生命在于发疯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨晚又一次阅读了自己过往的博客，发现以前自己做的事，都是关于「如何把一件事做好，比如把产品卖出去、把项目交付好」，而自己最近做的事，则是判断「我应该做什么去获得最大收益」。想来这也是我确实成长到了一个新阶段，祝贺一下自己。&lt;/p&gt;
&lt;h1 id=&quot;为什么说自己成长到了一个新</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>再次更博，认识你自己</title>
    <link href="https://kerryli1007.github.io/2023/03/21/20220322-%E5%86%8D%E6%AC%A1%E6%9B%B4%E5%8D%9A%EF%BC%8C%E8%AE%A4%E8%AF%86%E8%87%AA%E5%B7%B1/"/>
    <id>https://kerryli1007.github.io/2023/03/21/20220322-%E5%86%8D%E6%AC%A1%E6%9B%B4%E5%8D%9A%EF%BC%8C%E8%AE%A4%E8%AF%86%E8%87%AA%E5%B7%B1/</id>
    <published>2023-03-21T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>know thyself。 - 苏格拉底</p></blockquote><p>博客停更了一年半，似乎也能隐射出，这一年半我的状态并不是很好。</p><p>家人患疾、工作不顺，相互叠加，让我这个「不那么成熟的成年人」一下子成长为了「成熟的成年人」。</p><p>以问答的方式，来重新认识一下我自己。</p><h1 id="问题1：什么对你最重要？"><a href="#问题1：什么对你最重要？" class="headerlink" title="问题1：什么对你最重要？"></a>问题1：什么对你最重要？</h1><p>答：<br>站在这这个时间节点。</p><p>家人、金钱。</p><p>注意，这两者同等重要，不分先后。于我而言，家人永远是最重要的。金钱能为我与我的家人提供更好的生活，所以也是最重要的。</p><h1 id="问题2：钱对你这么重要，你怎么赚钱？"><a href="#问题2：钱对你这么重要，你怎么赚钱？" class="headerlink" title="问题2：钱对你这么重要，你怎么赚钱？"></a>问题2：钱对你这么重要，你怎么赚钱？</h1><p>工资，我想绝大多数人（99.9%）都和我一样。</p><p>去年，家人患疾，让我意识到，我的这一份工资与重大疾病所需的治疗费相比，是多么的杯水车薪、多么的无可奈何。</p><p>所以，我开始谋划睡后收入以及周末收入。</p><p>开过网店，验证了做服装生意的全流程，同时也在我的心理埋下了梦想的种子，未来自己也能创建自己的健身服品牌。</p><p>并且在去年离职后all in在抖音自媒体创业，做废了两个账号，目前第三个账号顺利运营中，预计下个月可以开始带货盈利。</p><h1 id="问题3：你说你从「不那么成熟的成年人」成长成了「成熟的成年人」，能具体说说吗？"><a href="#问题3：你说你从「不那么成熟的成年人」成长成了「成熟的成年人」，能具体说说吗？" class="headerlink" title="问题3：你说你从「不那么成熟的成年人」成长成了「成熟的成年人」，能具体说说吗？"></a>问题3：你说你从「不那么成熟的成年人」成长成了「成熟的成年人」，能具体说说吗？</h1><p>3个最key的变化。（下文中，将「不那么成熟的成年人」称为前者，「成熟的成年人」称为后者）<br>变化1：前者会恋爱脑，后者不会。<br>变化2：前者不敢大大方方谈赚钱，后者敢。<br>变化3：前者会在意别人怎么看自己（量化一下，应该是100%），后者不在意别人怎么看自己（量化一下，能做到85%，还做不到100%，说明还没有足够强大）</p><h1 id="问题4：你对目前的你自己满意吗？以及你希望成为什么样的人？"><a href="#问题4：你对目前的你自己满意吗？以及你希望成为什么样的人？" class="headerlink" title="问题4：你对目前的你自己满意吗？以及你希望成为什么样的人？"></a>问题4：你对目前的你自己满意吗？以及你希望成为什么样的人？</h1><p>对自己的满意度，打65分吧，属于刚及格。</p><p>为什么打65分，是因为做自媒体创业这段时间，我意识到自己身上存在的人性的弱点，列举<br>弱点1：在意别人的看法<br>弱点2：害怕数据差<br>弱点3：容易被焦虑情绪裹挟，导致没有办法好好执行规划</p><p>我希望成为什么样的人？<br>生命力顽强的人。不管我身处什么环境，都不会停止往上攀爬。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>大胆往前走，不要害怕困难，不要害怕失败，不要害怕委屈，不要害怕挫折。大胆往前走~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;know thyself。 - 苏格拉底&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博客停更了一年半，似乎也能隐射出，这一年半我的状态并不是很好。&lt;/p&gt;
&lt;p&gt;家人患疾、工作不顺，相互叠加，让我这个「不那么成熟的成年人」一下子成长为了「成熟的成年</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>LearningToRank</title>
    <link href="https://kerryli1007.github.io/2021/07/31/LearningToRank/"/>
    <id>https://kerryli1007.github.io/2021/07/31/LearningToRank/</id>
    <published>2021-07-31T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.525Z</updated>
    
    <content type="html"><![CDATA[<p>排序学习的模型通常分为单点法（Pointwise Approach）、配对法（Pairwise Approach）和列表法（Listwise Approach）三大类，三种方法并不是特定的算法，而是排序学习模型的设计思路，主要区别体现在损失函数（Loss Function）、以及相应的标签标注方式和优化方法的不同。</p><p>总结一下Pointwise、Pairwise和Listwise，三者主要的区别是在训练模型，考察损失函数时候，单次考虑多少篇文章。</p><h1 id="一、从搜索引擎说起"><a href="#一、从搜索引擎说起" class="headerlink" title="一、从搜索引擎说起"></a>一、从搜索引擎说起</h1><p>一般来说搜索引擎包含六大部分: crawler, parser,indexer, link analyzer, query processor, and ranker.</p><p><img src="https://kerryli1007.github.io/images/LearningToRank/1.png"></p><ul><li>crawler从web上抓取网页和文档；parser分析文档和超链接图；indexer对索引和数据进行建库；link analyzer跟据超链接图来分析网页的权重；query processor对query进行处理（类似NLP的工作，切词、改写、term重要性之类的）；ranker是central component，它将处理后的query和检索出的网页进行排序处理。</li><li>ranking在信息检索应用中是一个很核心的问题。像是协同过过滤，问答系统，多媒体检索，文本摘要以及在线广告等均有涉及ranking。利用machine learning的方式处理ranking问题即为learning to rank，即LTR.</li></ul><h2 id="Ranking-in-Information-Retrieval"><a href="#Ranking-in-Information-Retrieval" class="headerlink" title="Ranking in Information Retrieval"></a>Ranking in Information Retrieval</h2><ul><li>传统的ranking模型可以分为relevance ranking models和importance ranking models.</li><li>relevance ranking就是从相关性角度计算出每一个doc和query之间的分值。早期的ranking model就是基于query-terms在doc中的出现次数来计算的。例如Boolean model就是预测doc相关与否，但它不能给出具体的度量值。</li></ul><h1 id="二、LTR框架"><a href="#二、LTR框架" class="headerlink" title="二、LTR框架"></a>二、LTR框架</h1><p><img src="https://kerryli1007.github.io/images/LearningToRank/2.png"></p><p>LTR是有监督学习，因此需要有标注的training set。</p><p>在学习系统中，先通过训练集对模型进行训练。</p><h1 id="三、Pointwise-Approach（单文档方法）"><a href="#三、Pointwise-Approach（单文档方法）" class="headerlink" title="三、Pointwise Approach（单文档方法）"></a>三、Pointwise Approach（单文档方法）</h1><h2 id="1-1-Pointwise是啥"><a href="#1-1-Pointwise是啥" class="headerlink" title="1.1 Pointwise是啥"></a>1.1 Pointwise是啥</h2><p>在损失函数中，pointwise单次只考虑一篇文章。</p><p>在pointwise方法中，每篇文章的得分，独立于这篇文章在整个文档合集中的顺序。</p><p>所有的分类、回归场景都可以使用pointwise。</p><p>Pointwise的处理对象是单一文档。将单一查询文档对转化为特征向量，相关度作为Label，构成训练样本，然后采用分类或者回归方法进行训练。得到训练模型后，再通过模型对新的查询和文档进行预测，得到相关度得分，最终将该得分作为文档排序的依据。</p><h2 id="1-2-Pointwise的缺点"><a href="#1-2-Pointwise的缺点" class="headerlink" title="1.2 Pointwise的缺点"></a>1.2 Pointwise的缺点</h2><p>Pointwise存在一定的局限性，它仅仅考虑单个文档的绝对相关度，没有考虑给定查询下的文档集合的排序关系。</p><h1 id="四、Pairwise-Approach（文档对方法）"><a href="#四、Pairwise-Approach（文档对方法）" class="headerlink" title="四、Pairwise Approach（文档对方法）"></a>四、Pairwise Approach（文档对方法）</h1><h2 id="2-1-Pairwise是啥"><a href="#2-1-Pairwise是啥" class="headerlink" title="2.1 Pairwise是啥"></a>2.1 Pairwise是啥</h2><p>Pointwise只考虑单个文档与查询的绝对相关度，没有考虑给定查询下的文档集合的排序关系。</p><p>Pairwise在损失函数中看的是两篇文章的损失函数。Pairwise将重点转向了文档之间的排序关系，它将排序问题转化为文档对&lt;di,dj&gt;排序关系的分类和回归问题。</p><p>对于给定查询下的文档集合，其中任何两个相关度不同的文档都可以组成一个训练实例&lt;di, dj&gt;。若di比dj更相关，则该实例的label为1，否则为01，这样就得到一个二分类的训练集。</p><h2 id="2-2-Pairwise的特点"><a href="#2-2-Pairwise的特点" class="headerlink" title="2.2 Pairwise的特点"></a>2.2 Pairwise的特点</h2><ul><li>Pairwise approaches work better in practice than pointwise approaches because predicting relative order is closer to the nature of ranking than predicting class label or relevance score. Some of the most popular Learning to Rank algorithms like RankNet</li></ul><p>翻译总结一下：</p><p>1、Pairwise比pointwise表现更好，因为pairwise预测的是文章的顺序，而并不像pointwise，只预测一个得分。</p><p>Pairwise方法虽然考虑了文档之间的相对排序关系，但仍然没有考虑文档出现在结果列表中的位置。排在前面的文档更重要。</p><h1 id="五、Listwise-Approach（文档列表方法）"><a href="#五、Listwise-Approach（文档列表方法）" class="headerlink" title="五、Listwise Approach（文档列表方法）"></a>五、Listwise Approach（文档列表方法）</h1><h2 id="3-1-Listwise是啥"><a href="#3-1-Listwise是啥" class="headerlink" title="3.1 Listwise是啥"></a>3.1 Listwise是啥</h2><p>Listwise观察整个文档合集的顺序，并且为该文档合集找到其顺序。</p><p>参考：</p><p>1、深入理解XGBoost：高效机器学习算法与进阶</p><p>2、这就是搜索引擎：核心技术详解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;排序学习的模型通常分为单点法（Pointwise Approach）、配对法（Pairwise Approach）和列表法（Listwise Approach）三大类，三种方法并不是特定的算法，而是排序学习模型的设计思路，主要区别体现在损失函数（Loss Function）</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>聊一聊推荐系统的多样性</title>
    <link href="https://kerryli1007.github.io/2021/07/31/%E8%81%8A%E4%B8%80%E8%81%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/"/>
    <id>https://kerryli1007.github.io/2021/07/31/%E8%81%8A%E4%B8%80%E8%81%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/</id>
    <published>2021-07-31T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、从业务说起"><a href="#一、从业务说起" class="headerlink" title="一、从业务说起"></a>一、从业务说起</h1><p>讲一个bad case，前段时间客户投诉了我们的服务，因为视频流场景中，我们的推荐服务连续推荐同一个创作者的视频。</p><p>我们的解决方案：portprocess处理，规则是同一发布者的内容不超过1条。</p><p>思考用业务语言来描述这个规则应该是怎么样的？</p><p>对于用一个用户，userid，给他推荐的内容，在N刷之内，不能出现同一个创作者的内容多次（≥2）。</p><p>这里面重点有：</p><p>1、同一个userid</p><p>2、N刷之内</p><p>3、不能将同一个创作者的内容多次推荐</p><p>放在整个推荐链路中，如何实现？首先思考一下，整个推荐链路一共有几步：recall、rank、rerank、业务规则。</p><p>总结：这类实现一般放在业务规则层实现。</p><p>多样性一个维度是创作者的多样性，还有一个维度是内容的多样性。看一个bad case</p><p><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E6%8E%A8%E8%8D%90%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/1.png"></p><p>背景是：我前段时间研究卧室布置，然后第二天打开我的小红书，好家伙，第一屏，4个都给我推卧室布置。</p><p>这是我看到的一个bad case。想一下，为什么这是一个bad case，这为什么不是一个好的case。用户的审美是会疲劳的，如果一直都是同样的内容，用户会审美疲劳。</p><p>因此如何在生产生保障推荐结果的多样性呢？</p><p>再总结一下推荐结果同质带来的影响。</p><ul><li>从用户体验来看，容易造成审美疲劳和新鲜感下降，进而造成消费下降和流失</li><li>从数据收集来看，用户的兴趣被局限，进而无法获得用户对于更多内容的样本，得不到用户级别更广泛兴趣的训练数据</li><li>从模型拟合来看，整个大盘的数据分布bias会更加严重，导致模型泛化性变差</li><li>从作者角度来看，多样性不足+bias严重导致A品类的作者天生就比B品类更容易分发消费，打击部分作者积极性</li><li>从内容生态来看，内容同质化+作者流失最终导致内容品类匮乏</li></ul><h1 id="二、多样性是什么？"><a href="#二、多样性是什么？" class="headerlink" title="二、多样性是什么？"></a>二、多样性是什么？</h1><p>多样性到底是什么呢？</p><p>比如对于我来说，我既喜欢漫威的电影，又喜欢甄嬛传，还喜欢惊悚片。那么为了满足我广泛的兴趣，推荐系统推荐给我的列表，是需要覆盖用户的不同兴趣领域，即推荐结果要有多样性。</p><p>多样性是手段，不是目标！</p><p>多样性是手段，不是目标！</p><p>多样性是手段，不是目标！</p><p>重要的事说三遍。为什么多样性不是目标呢？</p><ul><li>1. 多样性很难量化。3个体育新闻+7个小姐姐和7个小姐姐+3个体育新闻，哪个更加多样呢？</li><li>2. 多样性不是越多越好，一次推荐 list 10 篇文章，各是不同的话题的，显然比较多样，但是你确定是更好的推荐结果吗？你肯定会说，多样性要“合适”就好，问题就在这里，合适的点在哪里呢？那一定是通过其他真正的结果指标来告诉你的。</li><li>3. 多样性对于每个人，每个场景来说，是不一样的，好坏的点不同。比如说我最近刚有了宝宝，那么我恨不得淘宝给我推荐的商品全都是母婴用品，多样性并不是一个特别重要的事情。</li></ul><p>那么哪些指标是合理的呢？</p><p>用户的点击率、阅读时长、留存、分享、互动数据。这是推荐系统的 ground truth，如果可以建立这些 ground truth 和多样性之间的关系，那显然可以去做一些工作</p><p>除了上述指标之外，关于多样性，还有哪些可以参考的标准呢？</p><p>以产品信息流为例：</p><p>个人侧强调的是用户体感，包括但不限于：</p><ul><li>单个用户一刷内多样性（比如小红书的例子，就是一刷内，均是同质内容）</li><li>单个用户跨刷多样性</li><li>两个用户彼此的差异性</li><li>单个用户N天内消费的密集型&#x2F;覆盖度</li><li>用户兴趣的迁移程度</li></ul><p>系统强调生态，包括但不限于</p><ul><li>人均消费的品类数（用户消费了的物料有多少类别）</li><li>品类渗透情况</li><li>小众作者的发文情况</li></ul><h1 id="三、如何保证推荐结果的多样性"><a href="#三、如何保证推荐结果的多样性" class="headerlink" title="三、如何保证推荐结果的多样性"></a>三、如何保证推荐结果的多样性</h1><p>那么问题来了，工业界我们要如何保证多样性？</p><h3 id="重排。"><a href="#重排。" class="headerlink" title="重排。"></a>重排。</h3><p>资讯推荐场景，所有物料都是存储在es中。召回阶段从es中，多路召回大概3000篇文章，然后在rank阶段对这些文章进行点击率打分。但是可能会出现一个问题，单纯靠ctr打分，可能会导致得分高，排在前面的，都是娱乐类的新闻。导致用户没有办法看到时政类新闻。那么解法是什么呢？</p><p>将这些文章按照其category类别进行分类，然后通过合适的配比，返回推荐业务需要的内容，合计20篇，比如美食类 * 2，彩妆类 * 1，健身类 * 2，等。广告和运营位可以插在20篇的任意位置。</p><p>重排是在recall、rank之后进行的操作，如果我们想优化整个链路，如何实现呢？</p><h3 id="召回层"><a href="#召回层" class="headerlink" title="召回层"></a>召回层</h3><ul><li>多路召回。不同的召回策略在多样性等指标上差异较大。</li><li>热度降权。常见的基于协同过滤的召回算法(ItemCF、DSSM等)容易导致”热门”推荐”热门”，使得长尾的”利基”Item被淹没。</li><li>用户兴趣多样性探索</li></ul><h3 id="Rank层"><a href="#Rank层" class="headerlink" title="Rank层"></a>Rank层</h3><ul><li>point-wise过渡到list-wise</li><li>多目标融合。如果只考虑ctr那么天然适合标题封面党，只考虑finish会利于短且内容密集的视频，staytime利于中长影视，以上还只是用户层面的；如果在融合公式加上作者侧、内容测、长期的指标，也会利于生态建设</li></ul><p>总结一下</p><p><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E6%8E%A8%E8%8D%90%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/2.png"></p><p>参考：</p><p>1、推荐系统应该如何保障推荐的多样性？</p><p>2、推荐系统-多样性</p><p>3、打散算法的三种解决方案及其选型场景</p><p>4、推荐中的多样性与生态建设</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、从业务说起&quot;&gt;&lt;a href=&quot;#一、从业务说起&quot; class=&quot;headerlink&quot; title=&quot;一、从业务说起&quot;&gt;&lt;/a&gt;一、从业务说起&lt;/h1&gt;&lt;p&gt;讲一个bad case，前段时间客户投诉了我们的服务，因为视频流场景中，我们的推荐服务连续推荐同一个</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>只需3步，快速梳理新的推荐业务场景</title>
    <link href="https://kerryli1007.github.io/2021/07/26/20210727-%E5%8F%AA%E9%9C%803%E6%AD%A5%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%E6%96%B0%E7%9A%84%E6%8E%A8%E8%8D%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    <id>https://kerryli1007.github.io/2021/07/26/20210727-%E5%8F%AA%E9%9C%803%E6%AD%A5%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%E6%96%B0%E7%9A%84%E6%8E%A8%E8%8D%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/</id>
    <published>2021-07-26T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要写这篇文章？</p><p>最近工作中，遇到了一些场景，比如：<br>1、发现部门同学评估推荐场景时候，输出内容不够结构化，导致接手项目的人，不知道当前项目情况；<br>2、部门项目比较多，需要involve一些交付的同学支持，但是交付的同学，缺乏推荐的背景，亟须被赋能。</p><p>所以想总结一些简单明了的方法论，沉淀下来，供团队使用，以及赋能交付。</p><p>声明，本章节内容简洁，目标是让大家对推荐场景评估这个事，有一个大的认知。因为力求简洁，故没有办法详尽各个模块。</p><p>直接切入正题，只需三步，掌握推荐项目评估秘诀。</p><p><img src="https://kerryli1007.github.io/images/%E6%A2%B3%E7%90%86%E6%8E%A8%E8%8D%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/1.jpg"></p><p>总结：<br>1、上述是一个非常简单的梳理推荐场景的框架，鉴于其简单，所以容易上手，因为只有开始入门了，才能深入；<br>2、每个模块展开涉及的内容都会非常广，后续会一一详尽介绍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为什么要写这篇文章？&lt;/p&gt;
&lt;p&gt;最近工作中，遇到了一些场景，比如：&lt;br&gt;1、发现部门同学评估推荐场景时候，输出内容不够结构化，导致接手项目的人，不知道当前项目情况；&lt;br&gt;2、部门项目比较多，需要involve一些交付的同学支持，但是交付的同学，缺乏推荐的背景，亟须被</summary>
      
    
    
    
    <category term="推荐策略产品必备技能" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>聊一聊新品物料相关</title>
    <link href="https://kerryli1007.github.io/2021/07/12/20210713-%E8%81%8A%E4%B8%80%E8%81%8A%E6%96%B0%E5%93%81%E7%89%A9%E6%96%99%E7%9B%B8%E5%85%B3/"/>
    <id>https://kerryli1007.github.io/2021/07/12/20210713-%E8%81%8A%E4%B8%80%E8%81%8A%E6%96%B0%E5%93%81%E7%89%A9%E6%96%99%E7%9B%B8%E5%85%B3/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>新品物料，就说不开一个问题，冷启动。</p><p>在推荐领域，关于冷启动，一共有三个大的话题：</p><ul><li>用户冷启动</li><li>物料冷启动</li><li>系统冷启动</li></ul><p>物料冷启动的策略包括基于物料meta信息、以及ee探索性质的。</p><p>但之前一直没有就物料冷启动与推荐系统、还有生态（UGC、PGC）进行详细阐述。</p><p>界定本文要讨论的topic：</p><ol><li>冷启动的目标</li><li>兼顾冷启动的系统设计</li></ol><h1 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h1><p>物料冷启动的目标是什么？</p><p>对系统来说，流量价值最大化。流量价值最大化是什么意思？比如我们一共就100个upv。现在进来了一批新物料，我们需要给这些物料曝光。因此我们需要将物料推送给特定的用户。</p><p>最简单的解法，直接将新品物料随机分发给用户。这样的直接影响是，由于这样的随机分发，和用户兴趣无关，也同用户当前浏览的资讯内容无关，导致，用户体验差，虽然给这些物料了曝光，但是伤害了用户体验，也造成了流量的浪费。</p><p>更好的解法是什么？<br>1）构造物料的静态画像，基于内容，即上文说到的基于物料meta信息<br>2）基于物料本身的信息评估物料的质量，比如小红书场景，图片是否高清、文本语言是否通顺，是评估笔记质量的重要标准。<br>3）召回时候不要完全随机召回，也需要by一定语意召回。什么意思呢？就是说，比如最简单的做法，当用户西蓝花发了一篇健身类的笔记，完全随机的召回，就是将这篇文章随机推荐给500个用户，给500个pv，但是很可能这500个人都没有健身的兴趣，所以对于这篇物料来说，show 500，click 0。这样的流量分发就是效率低下的，浪费了500个pv，一来没有给物料积累正确的反馈数据数据，二来带给了用户不好的体验。所以更好的做法是在召回时候，by一定语义召回。基于内容做一定语义召回。</p><p>总结一下：在新物料曝光这个过程中，将物料分发给可能对该物料感兴趣的用户；对内容侧的画像丰富是按照其内容质量进行等级划分，决定给这个物料多少pv。（比如我在抖音的一些视频，自然流量，差不多是500；另一些like、comment多的，自然流量会有5w）</p><p>上述讲的所有，最终评估的指标包括：</p><ul><li>by 用户维度的 ctr（click&#x2F;show）、人均停留时长（内容消费深度）等</li></ul><p>更好解法的好处：</p><ol><li>带给用户更好的体验</li><li>为物料积累准确的数据</li></ol><p>思考，因为我经常用小红书、抖音，根据我自己也做推荐系统的经验，这两个平台是怎么做物料冷启动的？</p><p>基础流量：基础流量的意思就是，给定一条新物料，一定次数的曝光（PV数），这个流量的pv数，抖音给的大概在500，小红书给的大概在100.<br>什么意思呢？如果一条抖音视频数据如下，show 500，like 20，comment 1-2，基本上这个数据表现，平台不会再给流量了，即抖音不会继续将这条视频分发给更多的人了。<br>所以，基本上show 500就是判断这个视频是否需要继续被分发的关键，那么如何精准地分发这给这500个pv就非常重要。</p><p>如果在500pv数据的基础上，这个视频的表现非常好，like高、comment多，且comment中有很多艾特，说明这条视频质量高、传播性强，那么这个时候，平台会不断给这个视频流量。</p><p>多说一点，我两个月前发过一条视频，抖音给了6w show，比较神奇的是，当时这条动态没有任何关键词描述，就随便配了几个与视频内容也不符合的字，说明抖音在构造物料画像时候，是可以基于视频内容做理解的啊。</p><h1 id="二、系统设计"><a href="#二、系统设计" class="headerlink" title="二、系统设计"></a>二、系统设计</h1><p>如果是我，我要怎么设计？</p><p>从物料的视角，先了解推荐系统的数据流。</p><p>大家好，我是创作者西蓝花创作出来发布在小红书的笔记，系统给我的编号是A00001。</p><p>系统将我推荐给了100个用户，这100个用户在推荐主站看到了我，但是没有人点击过我。接着，我就再也没有出现再过推荐首页了。</p><p>大家好，我是创作者西蓝花创作出来的物料，系统给我的编号是A00002.<br>系统将我推荐给了100个用户，这100个用户在推荐主站看到了我，50个人点击了我，30个人收藏了我，20个人like了我。10个人comment了我。接着，我在推荐首页被推荐给了更多的人，我第一次被这么多人看到。很多人看到了我，然后关注了西蓝花，她可开心了。暗自下定决心，要创作更多的更好的内容发布在小红书平台。</p><p>对于小红书这个推荐系统而言，从物料质量划分维度，A00001的质量低，A00002的质量高。A00002质量高的表现有哪些？如何量化A00002的质量高？</p><ul><li>点击率高，点击率 &#x3D; 50 &#x2F;100 &#x3D; 50%</li><li>收藏率高</li><li>like率高</li><li>comment高</li></ul><p>所有这些指标带给平台最直接的收益是：用户在平台的停留时长更长，因为用户在单篇物料上停留时间长。</p><p>我们再来看一个推荐系统不太准的系统</p><p>我是一个健身物料，但是系统将我推荐给了100个，不爱健身的人。他们对我也没有什么兴趣，因此我只获得了500个show。<br>我是一个制作很精美的化妆视频，系统将我推荐给了100个对化妆没有兴趣的人，他们对我也没有什么兴趣，因此我只获得了500个show。</p><p>这样的结果是什么，西蓝花作为创作者的创作兴致直接被打压 &#x3D; &#x3D; </p><p>话说回来，从我一开始玩短视频，本来是快手和抖音一起玩，发生1件事，让我直接放弃掉了快手。</p><p>2021.5.15在快手和抖音分别发了同一条内容，抖音给了6w pv，快手给了500pv。抖音涨粉了1000，但是快手涨粉0。这件事直接让作为创作者的我不再使用快手的直接原因。</p><p>说回来那条动态，都是一条视频，配图都是“随便拍一下”，但是抖音似乎直接将这条动态推送给了感兴趣的人，快手就弱一点，没有做好冷启动。所以，冷启动阶段的精准匹配实在是太重要了。（个人陋见，也有可能我发的内容，快手不喜欢，而不是快手的精准化匹配不好。</p><p>不过，新物料的精准分发确实是非常重要。</p><p>那么系统要如何更好地支持物料冷启动？</p><p>目标是什么？指标是什么？（If you can not measure it, you can’t improve it)</p><ul><li>被分发出去新物料的用户的点击率、人均浏览时长。</li><li>点击率（ctr），衡量的是，比如我分发了100个item，其中有多少个被点击了，但是考虑到标题党可能存在，所以不能只看ctr</li><li>还需要看人均物料浏览时长。</li><li>3、7日留存。</li></ul><p>要让ctr好、人均物料浏览时，就需要做到推荐得准。在文本领域，和朋友沟通，了解到知乎的新品召回也是by语意topic。</p><p>最后总结一下：</p><ol><li>通过提升新item分发精准度提高新物品分发的效率。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新品物料，就说不开一个问题，冷启动。&lt;/p&gt;
&lt;p&gt;在推荐领域，关于冷启动，一共有三个大的话题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户冷启动&lt;/li&gt;
&lt;li&gt;物料冷启动&lt;/li&gt;
&lt;li&gt;系统冷启动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物料冷启动的策略包括基于物料meta信息、以及ee</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>聊一聊相关推荐</title>
    <link href="https://kerryli1007.github.io/2021/07/10/20210711-%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/"/>
    <id>https://kerryli1007.github.io/2021/07/10/20210711-%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>界定一下本文讨论的topic：</p><ol><li>什么是相关推荐</li><li>市面上产品的相关推荐</li><li>为什么需要相关推荐</li><li>从产品设计视角看相关</li><li>如何衡量相关推荐效果好坏</li><li>相关推荐的数据流</li><li>从物料视角看相关推荐</li></ol><blockquote><p>过去埋藏在地下，挖出来时是煤炭，是你今天的炉火。</p></blockquote><h1 id="一、什么是相关推荐"><a href="#一、什么是相关推荐" class="headerlink" title="一、什么是相关推荐"></a>一、什么是相关推荐</h1><p>如果两个item的相似度高，可将其理解为相关推荐。<br>具体一点：</p><ul><li>资讯场景：两篇讲离婚类的合同。</li><li>电商场景：intoyou的唇泥和维姿的唇泥。<br>上述场景的相似度判断标准均从item本身的特质进行判断，技术上为content based相关计算。</li></ul><p>但是如果上述item本身的特征少，那我们可使用cf的技术实现手段。</p><p>备注：了解content based算法以及cf算法的适用场景，以及优缺点是必备的。</p><h1 id="二、市面上产品的相关推荐"><a href="#二、市面上产品的相关推荐" class="headerlink" title="二、市面上产品的相关推荐"></a>二、市面上产品的相关推荐</h1><h2 id="2-1-资讯"><a href="#2-1-资讯" class="headerlink" title="2.1 资讯"></a>2.1 资讯</h2><p>调研今日头条和腾讯新闻的相关推荐模块<br><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/1.jpg"></p><ul><li><p>相似之处</p><ul><li>ner<br>  命名实体识别（Named Entity Recognition，简称 NER），又称作“专名识别”，是指识别文本中具有特定意义的实体，主要包括人名、地名、机构名、专有名词等。在推荐场景下，NER是深度查询理解（Deep Query Understanding，简称 DQU）的底层基础信号，主要应用于item召回、用户意图识别</li></ul></li><li><p>差异之处</p><ul><li>今日头条的相关推荐栏位包括i2i、u2i，并且会实时更新用户基于搜索框呈现出的短期兴趣（相隔1-2刷）</li><li>腾讯视频的相关推荐栏位暂且只覆盖i2i，且不会实时更新用户基于搜索框呈现的短期兴趣（相隔1-2刷）</li></ul></li></ul><p>总结一下：相关推荐出来的内容不一定必须是有相似度的，主要看产品如何定义，相关推荐场景也可以被叫做持续消费场景。</p><p>（善于总结，让读者或者听众快速get到自己表达的点，对别人友好，对自己也友好）</p><h2 id="2-2-视频（B站）"><a href="#2-2-视频（B站）" class="headerlink" title="2.2 视频（B站）"></a>2.2 视频（B站）</h2><p>视频内容详情页的推荐栏位<br><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/2.jpg"><br>总结：视频推荐场景有做很明显的基于视频内容的推荐。</p><h1 id="三、为什么需要相关推荐"><a href="#三、为什么需要相关推荐" class="headerlink" title="三、为什么需要相关推荐"></a>三、为什么需要相关推荐</h1><p>我们思考一下，如果没有相关推荐，用户的使用操作链路。</p><p>资讯场景<br>用户小西进入主站，通过推荐或者搜索发现自己喜欢的文章，点击进入浏览。浏览完毕，退出。继续通过主站推荐或者搜索的方式发现自己喜欢的文章。</p><p>这样操作的影响：</p><ol><li>用户操作成本高，难以找到感兴趣的文章</li><li>体验不流程。<br>综上，都不利于用户在平台停留时间长。</li></ol><p>短视频场景：短视频场景的用户链路同上。</p><p>总结，相关推荐场景的用途是延长用户在平台的停留时长。所以这个场景也可以叫做持续消费场景。</p><h1 id="四、从产品设计视角看相关"><a href="#四、从产品设计视角看相关" class="headerlink" title="四、从产品设计视角看相关"></a>四、从产品设计视角看相关</h1><p>所有产品设计都是围绕业务目标开展，我们的业务目标是延长用户在平台的停留时长。所以我们希望在用户消费完一个物料时候，立马给对方推她可能感兴趣的第二个、第三个item。所以有了如下的设计版式：</p><ul><li><p>底部推荐栏位<br><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/3.jpg"></p></li><li><p>侧边推荐栏位</p></li></ul><p><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/4.jpg"></p><p>我是抖音、小红书的深度用户，最近刷视频有一个很火的概念，叫做沉浸式护肤&#x2F;化妆，同理在推荐场景中，借用这个概念，这样的推荐产品形态设计，带给用户的体验式沉浸式阅读，不要被打扰。</p><h1 id="五、如何衡量相关推荐效果的好坏"><a href="#五、如何衡量相关推荐效果的好坏" class="headerlink" title="五、如何衡量相关推荐效果的好坏"></a>五、如何衡量相关推荐效果的好坏</h1><p>当相关推荐的效果很差时，比如用户明明在浏览健身类文章，但是给用户推荐了离婚类文章，用户还是单身狗呢。这样的场景，可以直观通过肉眼分析bad case来判断推荐效果的好坏。当然，也要关注线上指标，包括ctr、uctr（有多少占比的用户有点击行为），人均文章停留时长。</p><p>注意哦，在做优化的时候，千万不能只关注ctr，因为ctr高和推荐结果质量没有不是正相关，很极端的场景，都推标题党，点击率就上去了，但是用户体验其实很差。分析一下，如果用户点击了标题党文章，下一个直接动作是什么，肯定是回退出当前文章，所以用户在当前文章的浏览时间是很短的，因此可以有辅助指标，用户浏览单篇文章的时长，浏览时长也是衡量浏览深度的一个指标。</p><p>当效果已经很好，要做的是fine tune的时候，肉眼不太能再辨别效果是否更好，就需要进行线上分流实验，关注线上指标，包括ctr、uctr、人均文章停留时长。</p><h1 id="六、推荐策略的数据流"><a href="#六、推荐策略的数据流" class="headerlink" title="六、推荐策略的数据流"></a>六、推荐策略的数据流</h1><p>召回、排序、业务规则。</p><p>排序一般怎么做？<br>模型是一个比较抽象的词，是指对一种映射的抽象描述，即 f（context，user，item）—&gt; score。衡量一个模型的好坏，就是假设出来的这个映射关系和真实内在关系的距离。</p><p>但是上述方式的表达能力弱，参考下述排序模型发展史<br><img src="https://kerryli1007.github.io/images/%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/5.jpg"><br>总结一下：特征工程以及特征工程的自动化，一直是推动实用化推荐系统演技的主要方向。</p><p>这个topic，新开文章单独写。</p><h1 id="七、从物料视角看相关推荐"><a href="#七、从物料视角看相关推荐" class="headerlink" title="七、从物料视角看相关推荐"></a>七、从物料视角看相关推荐</h1><p>这个topic，参考我的另一篇文章，聊一聊新品物料相关。</p><p>参考链接：</p><ol><li><a href="https://segmentfault.com/a/1190000039404377">https://segmentfault.com/a/1190000039404377</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;界定一下本文讨论的topic：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是相关推荐&lt;/li&gt;
&lt;li&gt;市面上产品的相关推荐&lt;/li&gt;
&lt;li&gt;为什么需要相关推荐&lt;/li&gt;
&lt;li&gt;从产品设计视角看相关&lt;/li&gt;
&lt;li&gt;如何衡量相关推荐效果好坏&lt;/li&gt;
&lt;li&gt;相关推荐的数据流&lt;/</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>于黑暗中作光明</title>
    <link href="https://kerryli1007.github.io/2021/07/07/20210708-%E4%BA%8E%E9%BB%91%E6%9A%97%E4%B8%AD%E4%BD%9C%E5%85%89%E6%98%8E/"/>
    <id>https://kerryli1007.github.io/2021/07/07/20210708-%E4%BA%8E%E9%BB%91%E6%9A%97%E4%B8%AD%E4%BD%9C%E5%85%89%E6%98%8E/</id>
    <published>2021-07-07T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>如果你觉得四周黑暗，那么说明你自己不是一盏明灯。</p><h1 id="一、两则对话"><a href="#一、两则对话" class="headerlink" title="一、两则对话"></a>一、两则对话</h1><p>分享和老板的对话。</p><p>【第一则】<br>    - 老板：你的目标就是变得更牛逼。<br>    - 我反问：怎么才能算是牛逼一些，如何才能牛逼一些？<br>    - 老板答：你靠自己就能把项目run下来，其他人都是你的工具人。</p><p>【第二则】<br>    - 我：项目总是不一帆风顺。<br>    - 老板：怕啥，总有路的。</p><p>这两则对话，非常简练。但于我，非常inspring。<br>一是让我继续保持乐观的态度，车到山前必有路；二是让我开始意识到我的目标可以非常简单，就是实现一个又一个的目标，实现目标的过程中，其他人都是我的工具人，都是我的资源。</p><h1 id="二、于暗夜中为作光明"><a href="#二、于暗夜中为作光明" class="headerlink" title="二、于暗夜中为作光明"></a>二、于暗夜中为作光明</h1><p>最近为团队做了一些贡献，帮助团队在当前较混沌的时刻，找到了一些确定的事，以及接下来的前进方向。</p><p>能为团队做这样的贡献，分外荣幸，希望能多为团队做贡献。于暗夜中为作光明。</p><p>备注：我自己的笔记是记录了这件事的详细过程，发布在Blog上，因此做了隐藏。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果你觉得四周黑暗，那么说明你自己不是一盏明灯。&lt;/p&gt;
&lt;h1 id=&quot;一、两则对话&quot;&gt;&lt;a href=&quot;#一、两则对话&quot; class=&quot;headerlink&quot; title=&quot;一、两则对话&quot;&gt;&lt;/a&gt;一、两则对话&lt;/h1&gt;&lt;p&gt;分享和老板的对话。&lt;/p&gt;
&lt;p&gt;【第一则】</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>推荐策略产品必备技能之推荐算法原理（上）</title>
    <link href="https://kerryli1007.github.io/2021/05/29/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://kerryli1007.github.io/2021/05/29/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.529Z</updated>
    
    <content type="html"><![CDATA[<p>工业界的推荐算法链路，通常是召回、粗排、精排。</p><h1 id="一、召回"><a href="#一、召回" class="headerlink" title="一、召回"></a>一、召回</h1><p>在召回章节，我的构思书写思路为</p><ol><li>多路召回</li><li>每路召回的具体实现</li><li>召回与过滤</li></ol><p>推荐系统的召回阶段是根据用户的数据（静态数据，历史行为数据），为用户在海量的候选集中粗选一批待推荐的内容。<br>在实际应用中，召回模块一般都是多路召回的架构。这样设计主要出于如下几点的考虑</p><ol><li>考虑用户层面。</li><li>考虑系统层面。增强系统的鲁棒性，部分召回实效，其余召回队列正常工作，不会导致整个召回层失效。</li><li>考虑多样性内容分发。图文、视频、小视频，精准、试探、时效各占一定比例。召回目标的多元化。</li><li>可解释性，某一部分是有明确的推荐理由的。</li></ol><p>比如京东电商推荐的召回</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/1.png"></p><p>这些召回规则对于特定的场景都是通用的，但是问题来了，有的用户是有一些反馈记录的，比如截图一个抖音主页推荐，我对一些推荐的视频是有明确的负反馈的，如果这类视频再推荐给我，是非常伤害用户体验的，所以这个阶段，会进行一个过滤。</p><p>过滤之后，会对召回出来的物料进行模型排序。</p><p>在上篇，主要讲一下召回。每一路召回的目标是不一样的。</p><p>比如在电商场景，常见的召回有</p><ul><li>基于内容的召回</li><li>协同过滤召回</li><li>基于模型的召回</li><li>DSSM召回</li></ul><h2 id="1-1-基于内容的召回"><a href="#1-1-基于内容的召回" class="headerlink" title="1.1 基于内容的召回"></a>1.1 基于内容的召回</h2><p>基于内容推荐的基本思想是为用户推荐与他感兴趣的项目内容相似的项目，即发掘用户曾经喜欢过项目的特征，并推荐类似的项目。</p><p>基于内容的推荐系统主要包括：项目建模、用户建模、产生推荐。</p><p>一般来说，物品都有一些关于内容的分类，电影有战争、科幻、爱情等。基于内容的推荐，就是根据这些物品的内容属性和用户历史评分或操作记录，计算出用户对不同内容的爱好程度，再根据这些爱好推荐其他相同属性的物品。</p><p>内容推荐的基本方法有如下4个步骤：<br>1）内容表征（item representation）：为每个item都抽取出一些特征来表示此item；<br>2）用户偏好计算：利用过去一个用户的显式评分或隐式操作，计算用户不同特征上的偏好分数。<br>3）内容召回：将待推荐物品的特征与用户偏好得分相匹配，取出用户最有可能喜欢的物品池<br>4）物品排序：按用户偏好召回物品池</p><p><strong>步骤一：内容表征</strong><br>从文章内容中抽取出一些代表他们的属性，最常用的方法就是利用出现在一篇文章中的词来代表这篇文章。item会有一些属性对它进行描述，这些属性通常分为两种：结构化与非结构化信息。</p><p>比如电影类别特征，例如可选的电影类别有：爱情、剧情、科幻、战争、中国、日本、韩国、美国，合计8个类别。《银河护卫队》同时具有科幻和美国2个内容特征，那么它的结构话特征可用一个8位的二进制数表示如下：</p><p>对于一些非结构化的内容，需要进行处理，提取出相对应的特征。</p><p>比如对电影，具有如下字段：电影ID（id）、标题（title）、上映时间（year）、电影类型&#x2F;标签（genre，基因）、指示（indicators）、indicators数组的数量（numFields）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;id&quot;</span>: <span class="string">&quot;65006&quot;</span>,</span><br><span class="line"> <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Impulse&quot;</span>,</span><br><span class="line"> <span class="string">&quot;year&quot;</span>: <span class="string">&quot;2008&quot;</span>,</span><br><span class="line"> <span class="string">&quot;genre&quot;</span>: [<span class="string">&quot;Mystery&quot;</span>,<span class="string">&quot;Thriller&quot;</span>],</span><br><span class="line"> <span class="string">&quot;indicators&quot;</span>: [<span class="string">&quot;154&quot;</span>,<span class="string">&quot;272&quot;</span>,”<span class="number">154</span><span class="string">&quot;,&quot;</span><span class="number">308</span><span class="string">&quot;, &quot;</span><span class="number">535</span><span class="string">&quot;, &quot;</span><span class="number">583</span><span class="string">&quot;, &quot;</span><span class="number">593</span><span class="string">&quot;, &quot;</span><span class="number">668</span><span class="string">&quot;, &quot;</span><span class="number">670</span><span class="string">&quot;, &quot;</span><span class="number">680</span><span class="string">&quot;, &quot;</span><span class="number">702</span><span class="string">&quot;, &quot;</span><span class="number">745</span><span class="string">&quot;],</span></span><br><span class="line"><span class="string"> &quot;</span>numFields<span class="string">&quot;: 12</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>一般这些数据都是放在es中，便于索引。关于这些数据在es中，如何做索引的，暂时还没有进一步做研究，后续补充。</p><p><strong>步骤二：用户偏好计算</strong>，比如在电影场景，我们可以分析用户西蓝花在过去一周的行为。来计算user_behavior_profile。<br><strong>步骤三：内容召回</strong>，根据用户偏好召回对应内容。<br><strong>步骤四：物品排序</strong>，最后进行排序，</p><p>基于内容的推荐方法，优点</p><ol><li>物品没有冷启动问题，因为物品的内容特征不依赖用户数据</li><li>原理简单，易于定位问题.</li></ol><p>缺点：</p><ol><li>依赖于物品的meta信息，如果物品的信息较少，则无法做出推荐</li></ol><h2 id="3-2-协同过滤"><a href="#3-2-协同过滤" class="headerlink" title="3.2 协同过滤"></a>3.2 协同过滤</h2><p>协同过滤做的是一件什么事？协同过滤根据用户的历史数据，计算用户之间的相似度，计算item之间的相似度，然后基于这些相似度给用户做推荐。协同过滤强依赖用户行为！协同过滤强依赖用户行为！协同过滤强依赖用户行为！</p><p>协同过滤分为基于用户的协同过滤和基于物品的协同过滤。</p><p>协同过滤的思想：<br>1）抽象一点，物以类聚，人以群分。<br>2）具体一点，西蓝花和短短都很喜欢健身，也都很喜欢好看的legging和运动背心，短短买了一件新款legging，西蓝花也有很大可能喜欢。</p><h3 id="3-2-1-用户协同过滤（user-to-user-collaborative-filtering）"><a href="#3-2-1-用户协同过滤（user-to-user-collaborative-filtering）" class="headerlink" title="3.2.1 用户协同过滤（user-to-user collaborative filtering）"></a>3.2.1 用户协同过滤（user-to-user collaborative filtering）</h3><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/2.png"><br>上述截图页面，就是一个典型的用户协同过滤页面，购买过《深度学习推荐系统》的人还购买过什么。<br>一点题外话，仔细分析一下这个推荐页面，可以发现这个推荐是没有经过业务逻辑处理的。</p><p>原因有2:<br>1）《深度学习推荐系统》是我目前已经加购到购物车的商品；<br>2）《智能搜索和推荐系统：原理、算法与应用》《推荐系统与深度学习：新时代技术新未来》是我过去两周才购买了的商品。</p><p>不过，或许京东推荐团队有其他考虑～</p><p>用户协同过滤更详细流程：<br>1）找到和目标推荐用户相似的用户群A；<br>2）找到用户群A购买的商品集合B；<br>3）从商品集合B中减目标用户已经购买过的商品，得到C；<br>4）计算商品合计C中商品，目标用户的点击率；<br>5）最后添加一些业务逻辑规则</p><p>比如豆瓣电影的“喜欢这部电影的人也喜欢”</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/3.png"></p><h3 id="3-2-2-物品协同过滤（item-to-item-collaborative-filtering）"><a href="#3-2-2-物品协同过滤（item-to-item-collaborative-filtering）" class="headerlink" title="3.2.2 物品协同过滤（item-to-item collaborative filtering）"></a>3.2.2 物品协同过滤（item-to-item collaborative filtering）</h3><p>物品协同过滤的核心是给用户推荐那些和他们喜欢的物品相似的物品。</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/4.png"></p><p>比如当当网的经常一起购买的商品。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工业界的推荐算法链路，通常是召回、粗排、精排。&lt;/p&gt;
&lt;h1 id=&quot;一、召回&quot;&gt;&lt;a href=&quot;#一、召回&quot; class=&quot;headerlink&quot; title=&quot;一、召回&quot;&gt;&lt;/a&gt;一、召回&lt;/h1&gt;&lt;p&gt;在召回章节，我的构思书写思路为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多路</summary>
      
    
    
    
    <category term="推荐策略产品必备技能" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>推荐策略产品必备技能之推荐系统框架（下）</title>
    <link href="https://kerryli1007.github.io/2021/05/25/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://kerryli1007.github.io/2021/05/25/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.529Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇，我们聊了推荐系统框架是怎么样一回事，在本篇，我们来学习一下数据流。</p><h2 id="一、概括"><a href="#一、概括" class="headerlink" title="一、概括"></a>一、概括</h2><p>为什么要了解数据流？</p><p>对于一款非常复杂的产品，比如像推荐系统这块由多个模块组成的产品，只有了解了其数据流，才能知道这个系统是如何运作的。</p><p>对于产品经理自身而言，只有了解了整体数据流，才能增强自己对复杂产品设计的把控能力。</p><h2 id="二、推荐系统数据流"><a href="#二、推荐系统数据流" class="headerlink" title="二、推荐系统数据流"></a>二、推荐系统数据流</h2><h3 id="1-背景Brief"><a href="#1-背景Brief" class="headerlink" title="1. 背景Brief"></a>1. 背景Brief</h3><p>要了解推荐系统的数据流，首先需要知道，对于一个推荐系统，主要的数据模块。可以将其抽象成3个模块：用户数据、物料数据、用户行为。</p><h3 id="2-推荐系统目标"><a href="#2-推荐系统目标" class="headerlink" title="2. 推荐系统目标"></a>2. 推荐系统目标</h3><p>对于一个推荐系统，它的目标是什么？通过两个case来了解。</p><p><strong>1）Case 1：资讯场景</strong></p><p>比如资讯场景业务目标是点击率。点击率的计算逻辑 &#x3D; click &#x2F; show。</p><p>那为了提升点击率，我们需要哪些数据实现目标？</p><ul><li>静态数据：用户表、物料表。</li><li>用户行为数据：用户行为数据。</li></ul><p>聚焦到用户行为数据，如何定义哪些是正样本、哪些是负样本。</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8B%EF%BC%89/1.jpg"></p><p>需要注意的是，在行为数据定义时候（样本定义时候），经常出现的几个show虚报的问题：</p><ol><li>推荐结果即show。推荐结果即show的意思是，比如一个相关推荐场景，后台服务器一次给出的预测结果是10条数据，客户端只展现了4条。为了图方便，客户的上报show的逻辑是将所有的返回推荐结果都上报为show。</li><li>加载即show。在信息流场景，往往需要预加载。但是很多预加载的item，实际上尚未被展示。客户的埋点逻辑是加载即上报show，因此会导致show虚高。</li><li>信息流上下滑动。在信息流场景，还经常出现的一个问题是，用户经常上下刷动，所以同一物料会有多次曝光，建议上报时候做去重设置。</li></ol><p><strong>2）Case 2：小视频场景</strong></p><p>比如小视频场景，建模目标是完播率，即视频的播放时长&#x2F;视频的总时长。</p><h3 id="3-推荐系统如何实现业务目标"><a href="#3-推荐系统如何实现业务目标" class="headerlink" title="3. 推荐系统如何实现业务目标"></a>3. 推荐系统如何实现业务目标</h3><p>将推荐系统实现业务目标拆分成两条数据流来理解，在线数据流和离线数据流。</p><p><strong>1）在线数据流</strong></p><p>在线数据流是指一个请求进入到推荐系统到给出预估结果的流程，参考下述示例图。</p><p>接着进一步了解在线数据流。</p><p>用户来到APP，打开APP，这个时候前端会像服务器后端发送请求，接着服务器后端会像推荐系统（SaaS服务）发送请求。</p><p>推荐服务接受到这个请求，会先进行load balance，接着后端处理，在后端处理分为算法和规则，算法即召回和排序，规则即rerank。</p><p>根据2.2的描述，我们知道，对于一个推荐系统来说，都有其特定的目标，当我们完成目标确认后，比如提升点击率或者完播率。</p><p>接着就可以开始建模了。假设模型已经ready。来看一下推荐系统的在线流程～</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8B%EF%BC%89/2.jpg"></p><ul><li>召回（Recall）：召回的作用是从整个物料库中，通过某一种&#x2F;多种策略，快速召回一小批物料，供后续模型打分使用。</li><li>排序（Rank）：排序是将前一个阶段召回的物料进行模型排序。</li><li>重排（Rerank）</li></ul><p>重排是什么？</p><p>重排是基于排序环节的打分结果，对上述结果再次进行排序。</p><p>为什么需要重排？</p><p>在上一个环节，排序做的事本质上是预测用户对物品该兴趣的概率，考虑的只是物品与用户之间的关系，但是忽略掉了物品之间的相关性。</p><p>如何理解呢？分享一个极端的case，小红最近酷爱刷电影剪辑类小视频，模型学习的话，很可能学出来最后给用户推荐的都是同一个publisher的10条item。</p><p>这样肯定是不行的，试想，如果你正在刷抖音，连续10条都给你推荐同一个博主的内容，这个体验能好吗？所以需要rerank。</p><p>重排环节一般会做什么？</p><p>重排阶段是个策略出没之地，就是集中了各种业务和技术策略。比如为了更好的推荐体验，这里会加入去除重复、结果打散增加推荐结果的多样性、强插某种类型的推荐结果等等不同类型的策略。</p><p><strong>2）离线</strong></p><p>什么是离线数据流呢？模型训练以及模型的更新都是离线数据流完成的事。</p><p>离线模型的训练以及模型的更新，涉及到多个数据模块的配合，包括用户画像、物料画像、行为日志，离线数据流，我们下章节见～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上一篇，我们聊了推荐系统框架是怎么样一回事，在本篇，我们来学习一下数据流。&lt;/p&gt;
&lt;h2 id=&quot;一、概括&quot;&gt;&lt;a href=&quot;#一、概括&quot; class=&quot;headerlink&quot; title=&quot;一、概括&quot;&gt;&lt;/a&gt;一、概括&lt;/h2&gt;&lt;p&gt;为什么要了解数据流？&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="推荐策略产品必备技能" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>推荐策略产品必备技能之推荐系统框架（上）</title>
    <link href="https://kerryli1007.github.io/2021/05/22/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://kerryli1007.github.io/2021/05/22/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.529Z</updated>
    
    <content type="html"><![CDATA[<p>本模块的目标：</p><ol><li>梳理推荐系统框架</li><li>梳理推荐系统框架中的各个模块的实现</li><li>理解推荐系统的数据流</li></ol><p>一个推荐系统，大致分为4层，分别是离线层、存储层、近线层和在线层。<br>离线、近线和在线的区分在于响应用户行为的速度差异。</p><p>一个经典的Web推荐系统的架构，主要包括如下四部分：</p><ol><li>推荐服务：该服务从Web服务器获取推荐请求，然后返回推荐结果。</li><li>存储系统：这些系统存储用户特征、物品特征和模型参数，为了方便检索，也存储了物品索引。</li><li>离线学习：<ol><li>该组建从用户行为数据中学习模型参数，然后按照一定的周期将参数推送到在线存储系统中。</li><li>物品特征学习</li><li>用户特征学习</li></ol></li><li>在线学习：</li></ol><p><strong>推荐服务模块</strong>的功能是对来自业务的request进行预测。比如，我这会打开抖音，抖音后台会发送一个request给服务器，服务器接收到这个request之后，会根据过去我在抖音上的行为偏好，为我推荐向我可能感兴趣的短视频。</p><p><strong>存储系统</strong>的功能是存储用户特征、物品特征、以及物品索引。</p><p><strong>离线学习</strong>的功能包括：模型训练、物品特征、用户特征计算。</p><ul><li>模型训练是指给定用户和物品，以及用户对该物品的响应数据，来训练模型参数，这个过程一般需要耗费好几个小时的时间。</li><li>物品特征是比如对于非结构化数据，经常需要对这些数据进行TF_IDF计算，这个也是在离线层进行。</li><li>用户特征也是。</li></ul><p><strong>在线学习</strong> 的功能是利用用户的即时数据进行预估。<br>来看一个经典的推荐系统架构的设计</p><p><img src="https://kerryli1007.github.io/images/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8A%EF%BC%89/1.jpg"></p><p>这是Netflix的推荐系统架构，这个架构的设计目标是：<br>1）支持好的用户体验，且能支持快速的迭代；<br>2）针对用户的行为，作出快速的响应。</p><p>在这个设计中，计算被分为了离线、近线和在线。</p><p>计算可以离线进行、近线进行、也可以在线进行。对于用户产生的最新行为，在线计算能更好地进行反馈，但是在线必须实时进行反馈。这样的话，就对算法的计算复杂性有很大的限制，同时，也会限制能处理的数据量。</p><p>离线训练能处理较大的数据量，且不要求必须是实时的。模型的更新一般是离线进行的，在模型的前后两次更新这个时间窗口中，由于没有进入新的数据，所以这个模型一直使用的是旧的数据。对于推荐系统架构最关键的因素是如何将在线和离线计算无缝结合。</p><p>近线计算是在上述两者之间，在近线计算，我们可以执行类似在线的计算，但不要求实时响应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本模块的目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;梳理推荐系统框架&lt;/li&gt;
&lt;li&gt;梳理推荐系统框架中的各个模块的实现&lt;/li&gt;
&lt;li&gt;理解推荐系统的数据流&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个推荐系统，大致分为4层，分别是离线层、存储层、近线层和在线层。&lt;br&gt;离线、近线和在线的</summary>
      
    
    
    
    <category term="推荐策略产品必备技能" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>我理解的推荐策略产品之必备技能</title>
    <link href="https://kerryli1007.github.io/2021/05/21/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    <id>https://kerryli1007.github.io/2021/05/21/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/</id>
    <published>2021-05-21T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.529Z</updated>
    
    <content type="html"><![CDATA[<p>梳理我对推荐策略产品的理解。</p><p>一个60分的推荐策略产品经理，我认为，至少需要具备如下能力模型：</p><ol><li>推荐系统框架</li><li>推荐算法原理</li><li>业务产品设计</li><li>数据分析能力</li><li>项目管理能力</li></ol><p>对推荐系统框架的理解，至少需要掌握：a 推荐系统架构； b 整个推荐系统的数据流。<br>对推荐算法原理的理解，至少需要：a 了解CTR常见算法，以及其演化历史；b 对各种算法策略的适用场景，优缺点有自己的思考<br>业务产品设计，这一层比较抽象，我的理解是说，产品需要了解自己产品上用户的特性，根据用户的特性，设置对应的推荐场景，并根据数据表现，调整该场景的策略，这就是能力模型4的数据分析能力。<br>最后一个能力是项目管理能力，项目管理能力是很多产品经理都忽略了的能力。在项目管理这一层能力上，我主要想强调的是：a 资源协调能力；b 风险管理能力</p><p>对每个能力的阐述，我都会按照从理论到实践的套路来阐述。废话不多说，让我们开始吧～Enjoy。想写推荐策略产品经理的话题</p><p>PS：有一段时间了，一直都没有好的思路，最近深入经营我的抖音账号，粉丝超过了1000，开通了创作者服务平台，在数据中心，有一个账号诊断模块，从5个纬度分析了我的账号，分别是播放量、完播率、粉丝净增、投稿活跃度，和互动指数，如下图。这也是我将策略产品经理的必备技能拆分为上述5个维度的灵感来源。</p><p><img src="https://kerryli1007.github.io/images/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/1.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;梳理我对推荐策略产品的理解。&lt;/p&gt;
&lt;p&gt;一个60分的推荐策略产品经理，我认为，至少需要具备如下能力模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;推荐系统框架&lt;/li&gt;
&lt;li&gt;推荐算法原理&lt;/li&gt;
&lt;li&gt;业务产品设计&lt;/li&gt;
&lt;li&gt;数据分析能力&lt;/li&gt;
&lt;li&gt;项目管理能</summary>
      
    
    
    
    <category term="推荐策略产品" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81/"/>
    
    
  </entry>
  
  <entry>
    <title>价值就是去解决问题</title>
    <link href="https://kerryli1007.github.io/2021/05/08/20210509-%E5%B7%A5%E4%BD%9C%E5%B0%B1%E6%98%AF%E5%8E%BB%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://kerryli1007.github.io/2021/05/08/20210509-%E5%B7%A5%E4%BD%9C%E5%B0%B1%E6%98%AF%E5%8E%BB%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、为什么想到写这个话题"><a href="#一、为什么想到写这个话题" class="headerlink" title="一、为什么想到写这个话题"></a>一、为什么想到写这个话题</h1><p>最近看玉伯的文章《价值就是去解决问题》，摘录了其中和我价值观高度一致的两段话。</p><blockquote><p><strong>一个岗位的价值，就看能帮助公司解决多少问题</strong>。蚂蚁的产品体验，特别是商家侧的用户体验，很痛，设计师是否能推动各方去解决这些痛点？很难，但本就没有容易的事。一年推动不起来，就推动两年，两年不行就再花五年去推动，不断找人去聊，去一点一点解决，<strong>帮助公司解决的问题越大，价值就越大</strong>。价值做出来，加薪晋升等等就是自然而然的事。不用去抱怨什么，去比较什么，多想想怎么解决更多问题，去为公司为客户产生更大价值。</p></blockquote><blockquote><p><strong>解决问题能获得巨大的满足感和成就感</strong>，比其他事情有意思多了。这种满足感，会让人着迷，会活着活着发现解决问题就是人生的意义所在。获得满足感不一定能获得幸福感，幸福感是一个更高级的词汇，<strong>成就感是由己及他的满足，幸福感是由他及己的福报</strong>。去帮助到的人越多，流动的情感就会越多。</p></blockquote><p>因为觉得这两段话非常符合我的价值观，所以也想展开并结合我自己的工作聊一聊。</p><h1 id="二、“挺好的呀，你就是来帮他解决问题的，这就是你的价值。”"><a href="#二、“挺好的呀，你就是来帮他解决问题的，这就是你的价值。”" class="headerlink" title="二、“挺好的呀，你就是来帮他解决问题的，这就是你的价值。”"></a>二、“挺好的呀，你就是来帮他解决问题的，这就是你的价值。”</h1><p>我于4月1日加入了公司另一个部门。</p><p>4月中旬，我在电梯口遇到了公司交付负责人。她笑着和我说：“我看你在新部门表现挺好的，在某某项目上，很不错”。我笑着摇摇头说：“不算好，这个项目还是有很多问题。”她接着说：“你的价值就是来帮某某（部门老大）解决问题的呀。等你能把所有项目上的问题都解决了，不事事都去麻烦某某（部门老大），你就成长了，你也能创造更大的价值。“</p><p>是。我的价值完全取决于我能解决多大的问题。</p><p>恍惚间，觉得这一两年的成长太大了。以前总是害怕遇到问题，问题还没有发生，我自己都把自己吓死了。现在面对问题，已经完全没了恐惧。</p><p>我有一名好友，推荐领域的算法工程师，前不久被B站以高薪挖走，需要离开北京去上海。在他临走前，一起吃了顿饭。</p><p>饭桌上，我问他，你对什么负责？<br>他说，业务指标啊，比如人均浏览时长啥的。<br>我手，你觉得有什么样的能力，让你能对这些指标负责。（其实我本来想问一些干货<br>他的回答说，要是不能对这些负责，我要不直接和老板说我不干了。（哈哈哈</p><p>言归正传。有问题，才有机会。能解决多大的问题，就能创造多大的价值。</p><h1 id="三、如何才能解决问题"><a href="#三、如何才能解决问题" class="headerlink" title="三、如何才能解决问题"></a>三、如何才能解决问题</h1><p>这是一个很大的话题，我只能凭借自己的经验，尝试寻找其中的规律，做一些总结。</p><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><p>我觉得能做到解决问题的第一步，一定是心态上的调整。从害怕遇到问题，到遇到问题，沉稳淡定。</p><p>周五晚上，坐在研发leader旁边（最近我都把工位搬去了研发身边，哈哈哈），他问我，我看你朋友圈发了最近都很开心，你为啥都那么开心？我想了想说，每天解决问题，也是快乐的来源呀。他说，那不错，你的底层操作系统很好。</p><p>其实就是心态，每天工作中有很多问题，遇到问题的时候，我是将其视为，解决了这个问题，我职场技能又提升了，还是将其视为我不顺职场路的来源，这两种心态，有本质的区别。我觉得这是最关键的影响。</p><h2 id="硬技能"><a href="#硬技能" class="headerlink" title="硬技能"></a>硬技能</h2><p>在这里的硬技能，我着重想分享的是，思路。</p><p>解决问题的过程中，会发现，问题和问题之间，相互关联。所以，在解决问题的过程中，需要<br>1）明确我要解决的问题是什么，或者说我的假设是什么<br>2）和这个问题相关的，我收集到的信息有哪些<br>3）为了验证我的假设，我需要做什么，每一步的假设是什么，每一步的产出是什么？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、为什么想到写这个话题&quot;&gt;&lt;a href=&quot;#一、为什么想到写这个话题&quot; class=&quot;headerlink&quot; title=&quot;一、为什么想到写这个话题&quot;&gt;&lt;/a&gt;一、为什么想到写这个话题&lt;/h1&gt;&lt;p&gt;最近看玉伯的文章《价值就是去解决问题》，摘录了其中和我价值观</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>2021_Q2_Week5_工作总结</title>
    <link href="https://kerryli1007.github.io/2021/05/08/2021-Q2-Week5-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://kerryli1007.github.io/2021/05/08/2021-Q2-Week5-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>本周工作关键词：工作效率、团队赋能</p><p>在上周的工作总结，我有强调到，对于未来我每周写的工作总结，会对模版有调整。具体来说，是都要包括如下2部分：</p><ol><li>方法论</li><li>干货篇<br>同样在方法论和干货篇中，会特别突出强调WHY。</li></ol><h1 id="一-方法论"><a href="#一-方法论" class="headerlink" title="一 方法论"></a>一 方法论</h1><h2 id="1-1-提升工作效率"><a href="#1-1-提升工作效率" class="headerlink" title="1.1 提升工作效率"></a>1.1 提升工作效率</h2><p>为什么要提升工作效率？</p><p>答案是不言而喻的。</p><p>如何才能提升工作效率呢？从自己的工作中，我总结了一些经验。这些经验，可以<br>1）目标量化<br>2）规划具体到天粒度<br>3）提前将任务的操作步骤制定</p><p>因为上述经验的应用case，涉及到工作细节，就不在周报中详细描述。</p><h2 id="1-2-为团队赋能"><a href="#1-2-为团队赋能" class="headerlink" title="1.2 为团队赋能"></a>1.2 为团队赋能</h2><p>研发leader最近和我沟通了一下我的工作。</p><p><img src="https://kerryli1007.github.io/images/2021_Q2_Week5_%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/1.png"></p><p>总结一下就是<br>1）不能事事都我自己干，最后我很牛逼了，但是别人没有成长<br>2）当我事事都自己干，这样项目和产品的blocker就在于我</p><p>具体怎么做呢<br><img src="https://kerryli1007.github.io/images/2021_Q2_Week5_%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/2.png"></p><p>可预期的结果是什么呢？</p><p><img src="https://kerryli1007.github.io/images/2021_Q2_Week5_%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/3.png"></p><h1 id="二-干货篇"><a href="#二-干货篇" class="headerlink" title="二 干货篇"></a>二 干货篇</h1><h2 id="1-1-报错code与问题定位"><a href="#1-1-报错code与问题定位" class="headerlink" title="1.1 报错code与问题定位"></a>1.1 报错code与问题定位</h2><p>HTTP Status Code是用以表示网页服务器超文本传输协议响应状态的3位数字代码。</p><p>更多细节参考 <a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP状态码 - 维基百科，自由的百科全书</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周工作关键词：工作效率、团队赋能&lt;/p&gt;
&lt;p&gt;在上周的工作总结，我有强调到，对于未来我每周写的工作总结，会对模版有调整。具体来说，是都要包括如下2部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法论&lt;/li&gt;
&lt;li&gt;干货篇&lt;br&gt;同样在方法论和干货篇中，会特别突出强调WHY。&lt;/</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>2021_Q2_Week4_工作总结</title>
    <link href="https://kerryli1007.github.io/2021/05/04/2021-Q2-Week4-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://kerryli1007.github.io/2021/05/04/2021-Q2-Week4-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</id>
    <published>2021-05-04T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写工作总结了，得拾起来。</p><p>本周关键词：数据流、解决问题、埋点</p><h1 id="一、数据流"><a href="#一、数据流" class="headerlink" title="一、数据流"></a>一、数据流</h1><p>年初时候，和商汤的一位PM沟通。彼时的我，还在负责云OCR的GTM。</p><p>当时我们的沟通内容如下。</p><p>商汤PM：你知道你负责的OCR返回的结果是什么吗？</p><p>我：我知道，是对文本的所见即所得的识别内容。</p><p>商汤PM：他们是什么样的形式存在？这个你了解吗？</p><p>我：你指的形式具体是指的什么？</p><p>商汤PM：你的ocr识别结果是什么？</p><p>我：是一个json文件。</p><p>商汤PM：这个json文件中，包含哪些部分。客户请求的时候，这个json中有哪些部分，你返回给客户的json中有哪些部分。</p><p>我瞬间明白，商汤PM在这里问我的是，我的云ocr服务是如何与客户产生交互。</p><p>在回答上述问题之前，我想recap两个知识点，分别是软件集成和HTTP。</p><h2 id="1-1-软件集成"><a href="#1-1-软件集成" class="headerlink" title="1.1 软件集成"></a>1.1 软件集成</h2><p>去年冬天，和NLP Leader沟通我们为客户提供服务时候，他和我讲到，当客户想将我们的AI能力，集成到他们的系统，有两种方式：一是直接将我们的代码写进他们的系统，二是调用我们的API。前者成本高昂，所以在实际业务中，我们接触更多的是后者。那么后者就需要，双方对彼此接口的内容，做一致的约定。</p><p>这里涉及到一个知识点，叫做软件架构。划重点，软件架构。</p><p>应用程序架构的关注点是应用程序，通常包括将应用程序解构为类和组件，确保设计模式的正确应用。本质上应用程序架构谈论的是软件设计的低级别切面。</p><p>系统架构是更大规模的应用程序架构。大多数软件系统实际上是由横跨不同层次和技术的多个应用程序组成。举个例子，你可能有这样一个软件系统，Java EE中间层消费Oracle数据库提供的数据，同时向.NET Silverlight客户端提供Web服务。每个部分都有自己的应用程序架构。</p><p>要让整个软件系统工作起来，就要思考如何组合这些单独的应用程序。换句话说，要有端到端的软件系统在较高层次上的整体结构。大多数软件系统都不是孤立的，因此系统架构还关注互操作系统和与环境中其他系统的集成。</p><p>《程序员必读之软件架构》</p><h2 id="1-2-HTTP"><a href="#1-2-HTTP" class="headerlink" title="1.2 HTTP"></a>1.2 HTTP</h2><p>接口调用。接口调用在我工作中，太常见了。常见到我都以为，我完全了解接口调用是怎么一回事，其实并没有。对于接口调用，我是说不出来123的。讲一个题外话，如何在简单的工作交流中，让别人知道，你有没有点东西。我的理解就是，在和别人沟通一个问题的时候，要讲出一个123。上周就接口调用的问题和我司一位非常厉害的架构师沟通。在我阐述了我的困惑之后，他逻辑非常清晰地讲出了，要解决这个问题，我要做的步骤123，以及每个步骤的背后逻辑。（</p><p>言归正传，回到接口调用。首先，理解一下接口调用是一件什么事？API是一件属于网络基础的事。</p><p>Web浏览器、服务器和相关的Web应用都是通过HTTP相互通信。HTTP是现代全球因特网中使用的公共语言。</p><h3 id="1-2-1-HTTP-——因特网的多媒体信使"><a href="#1-2-1-HTTP-——因特网的多媒体信使" class="headerlink" title="1.2.1 HTTP ——因特网的多媒体信使"></a>1.2.1 HTTP ——因特网的多媒体信使</h3><h3 id="1-2-2-Web客户端和服务器"><a href="#1-2-2-Web客户端和服务器" class="headerlink" title="1.2.2 Web客户端和服务器"></a>1.2.2 Web客户端和服务器</h3><p>Web内容都是存储在Web服务器上的。Web服务器所使用的是HTTP协议，因此经常会被称为HTTP服务器。</p><h3 id="1-2-3-资源"><a href="#1-2-3-资源" class="headerlink" title="1.2.3 资源"></a>1.2.3 资源</h3><p>一个HTTP事务由一条请求命令和一个响应结果组成。这种通信是通过名为HTTP报文（HTTP message）的格式化数据块进行。</p><p>HTTP支持不同的请求命令，这些命令被称为HTTP方法（HTTP method）</p><p>每个HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数的代码，告知客户端请求是否成功。</p><p>那HTTP的设计思路是什么样的呢？</p><p>在报文编码方式上，HTTP采用了面向程序员的文本（ASCII）编码方式而非面向计算机的二进制编码方式。</p><blockquote><p>HTTP是无状态的请求-应答协议。无状态的设计是个严重缺乏前瞻性的设计，但考虑到在HTTP诞生之初网上没有什么资源，也根本不存在可以跟用户交互的网站，因此这个设计思路也是完全可以理解的。最初的HTTP（0.9版）只提供了GET方法，这是因为其作者认为网上所有的资源（网页）都是静态的，远程用户是不能修改的，浏览器所能做的就是从远程服务器上“获取（GET）”指定网页并以只读方式展示给用户，在用户获取网页之后就立即中断与服务器的连接，从而节省宽带与服务器的宝贵资源。</p><p>随着Internet的加速发展，特别是图片和音视频等多媒体内容的出现和流行，原先只面向文本资源对象的HTTP已不能满足人们的需求，所以HTTP做了一个较大的升级（1.0版）：首先，增加了POST方法，使得客户端可以i提交（上传）文件到服务器端；其次，通过引入Content-Type这个Header，支持除文本外的多媒体数据的传输支持。</p></blockquote><p>《架构解密：从分布式到微服务》</p><h2 id="1-3-回答商汤PM的问题"><a href="#1-3-回答商汤PM的问题" class="headerlink" title="1.3 回答商汤PM的问题"></a>1.3 回答商汤PM的问题</h2><p>梳理了软件集成和HTTP之后，我来尝试回答商汤PM的问题</p><h3 id="1-3-1-客户请求"><a href="#1-3-1-客户请求" class="headerlink" title="1.3.1 客户请求"></a>1.3.1 客户请求</h3><p>客户请求类型：Post。</p><p>请求代码，涉及隐私内容已删除！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> post</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">flask_server = <span class="string">&#x27;https://ocr.xilanhua.com&#x27;</span></span><br><span class="line">predict_url = os.path.join(flask_server, <span class="string">&#x27;/ocr/predict/ticket&#x27;</span>)</span><br><span class="line">headers =\</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiNWszTjBTanpaWTMtSVNOMk5jYlpwWXU3UERVS3FWWU82T2l4OWlkdUxBIn0.eyJleHAiOjE2MTc5Mzc5MzMsImlhdCI6MTYxNTM0NTkzMywianRpIjoiMGRlYmM5MWMtODNhNi00NjU5LWE4M2YtMDI3MWZhNGFjMWYzIiwiaXNzIjoiaHR0cHM6Ly9zc28uY2xvdWQuNHBhcmFkaWdtLmNvbS9hdXRoL3JlYWxtcy9BdXRvT0NSIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjEwM2NlMzMwLTk2N2UtNDE3Mi04YzE1LTYzNzYzMGRjZWQ3NyIsInR5cCI6IkJlYXJlciIsImF6cCI6Im9jcmNsaWVudCIsInNlc3Npb25fc3RhdGUiOiI0NmM5ZDA3Yi04MGVjLTQ0MzQtYTQ5My0yNTQ4MzM4NGM3ZjYiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50IQ&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">general_predict</span>(<span class="params">image_path, scene, edge_size=<span class="number">0</span>, do_recognition=<span class="string">&#x27;True&#x27;</span>, row_range_flag=<span class="string">&#x27;False&#x27;</span>, vis_flag=<span class="string">&#x27;False&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cnt = f.read()</span><br><span class="line">        x = base64.b64encode(cnt)</span><br><span class="line">        image_jpeg_base64 = x.decode(<span class="string">&#x27;ascii&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">&#x27;image&#x27;</span>] = image_jpeg_base64</span><br><span class="line">    data[<span class="string">&#x27;scene&#x27;</span>] = scene</span><br><span class="line">    data[<span class="string">&#x27;edge_size&#x27;</span>] = edge_size</span><br><span class="line">    data[<span class="string">&#x27;do_recognition&#x27;</span>] = do_recognition</span><br><span class="line">    data[<span class="string">&#x27;row_range_flag&#x27;</span>] = row_range_flag</span><br><span class="line">    data[<span class="string">&#x27;vis_flag&#x27;</span>] = vis_flag</span><br><span class="line">    res = post(predict_url, data=data, headers = headers).json()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">general_predict(<span class="string">&#x27;./test.jpg&#x27;</span>, <span class="string">&#x27;idcard&#x27;</span>,edge_size=<span class="number">0</span>, do_recognition=<span class="string">&#x27;True&#x27;</span>, row_range_flag=<span class="string">&#x27;False&#x27;</span>, vis_flag=<span class="string">&#x27;False&#x27;</span>)</span><br></pre></td></tr></table></figure><p>客户请求的地址，是一个flask server。</p><p>客户在请求时候，会传过来一段header，这个header就相当于开门的钥匙，有了这个密钥，服务才会正常响应。</p><p>最后，客户是将图片内容进行了base64编码，然后post给服务器。</p><h3 id="1-3-2-服务返回"><a href="#1-3-2-服务返回" class="headerlink" title="1.3.2 服务返回"></a>1.3.2 服务返回</h3><p>最近服务器迁移中。后续补上。</p><p>上面讲了很多东西，但是都只是搬砖引入，讲API的目的也是为了引出数据流，没错这才是主菜。上述主要是想讲述，数据流。</p><p>为什么在这里要讲数据流。从业务上来说，我是搞SaaS的，基本上为客户提供服务，都是基于API为客户提供服务，那么客户如何请求我们的服务，他们都传给了我们什么数据，这些数据传到我们服务器端上之后，有哪些阶段。相信我，对数据流的了解，是开展业务的首要前提。</p><p>因为在实际开展业务中，会遇到很多问题，比如响应时长、比如数据落盘问题。</p><p>举个例子，比如响应时长过长，需要优化？怎么优化呢？第一步，我们需要将整个客户端-服务器端的链路梳理出来，这个链路有多长，经过哪些环节，每个环节，业务逻辑是什么，处理时长是多长？</p><p>在举个例子，数据落盘，这个数据从进来，到罗盘都流过了哪些环节，每个环节都在做什么？为什么有这些环节？</p><h1 id="二、解决问题"><a href="#二、解决问题" class="headerlink" title="二、解决问题"></a>二、解决问题</h1><p>上面讲了数据流，工作中遇到的问题蛮多的，如果要对这些问题进行一下分类：</p><ol><li>数据</li><li>业务</li></ol><p>目前的我，应该是会将其分为数据和业务。</p><p>数据是算法的基石，而对业务上下游的梳理，则是开展算法策略的前提，数据和业务理解，两者缺一不可。但是在实际开展工作中，我们经常会遇到这样或者那样的问题。不管遇到什么问题，我们在解决问题时候，都应该按照以下思维模型来进行（这是我总结的一个解决问题的<strong>思维模型</strong>）</p><p>1）要解决的问题是什么&#x2F;目标是什么？</p><p>2）当前收集到的信息有哪些？这些信息之间的关系是什么？</p><ul><li>业务上下游？</li><li>数据上下游？</li></ul><p>3）根据当前的目标和信息，接下来要实现目标，我的action是什么？这些action分别需要谁的支持，在什么时间点，主要产出分别是什么？</p><h1 id="三、埋点"><a href="#三、埋点" class="headerlink" title="三、埋点"></a>三、埋点</h1><h2 id="3-1-埋点是啥"><a href="#3-1-埋点是啥" class="headerlink" title="3.1 埋点是啥"></a>3.1 埋点是啥</h2><p>有一个问题哈？埋点就是数据采集吗？</p><p>其实数据采集标准动作有三步：埋点、采集、上报。也就是说一组数据从产生到接入存储必经三个步骤</p><h3 id="埋点"><a href="#埋点" class="headerlink" title="埋点"></a>埋点</h3><p>埋点只是数据采集的一个动作。</p><h3 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h3><p>一旦埋点被用户触发，数据就会产生，采集动作将捕获这些数据，做初步的格式化、组装、暂存、为上报动作做准备。</p><p>格式化和组装是为接下来的上报动作提供便利；暂存是为了配合上报动作的节奏。</p><h3 id="上报"><a href="#上报" class="headerlink" title="上报"></a>上报</h3><p>经过采集的数据从用户产品被送到数据接入层的动作过程就是上报。只有完成了上报，一个数据才算进入了数据产品体系。</p><p>数据到达接入层后会经历解包和解析、格式转换、数据清洗、数据存储四大技术流程。</p><ul><li>数据解包和解析</li></ul><p>根据数据协议的约定，采集层在上报数据前将魅族数据以特定的格式拼装，经过压缩上传到接入层，这样可以提高数据传输的效率。数据上传至接入层后便要进行响应的反向操作，即解包（对应压缩）和解析（对应拼装）</p><ul><li>格式转换</li></ul><p>由于解析后的数据类型与数据Topic定义的逻辑类型存在差异，这就需要根据数据Topic的定义，将每个分量转换类型和格式。</p><ul><li><p>数据清洗</p></li><li><p>数据存储</p></li></ul><p>数据仓库是实现数据存储的重要技术手段。</p><p>《 产品经理数据修炼30问》</p><h2 id="3-2-为什么需要埋点？埋点的重要性是什么？"><a href="#3-2-为什么需要埋点？埋点的重要性是什么？" class="headerlink" title="3.2 为什么需要埋点？埋点的重要性是什么？"></a>3.2 为什么需要埋点？埋点的重要性是什么？</h2><p>埋点上报作为数据统计分析的基础，一定要100%准确。</p><blockquote><p>用户行为分析平台就是对用户在App或网站浏览、点击等这些行为进行大数据统计分析，发现用户使用产品的行为规律、对产品功能的使用喜好程度，把这些结果应用于产品的营销、运营中。</p><p>用户行为，是指用户使用App、小程序或者web程序所产生的点击和浏览等交互行为。</p></blockquote><h2 id="3-3-业务中经常遇到的问题？"><a href="#3-3-业务中经常遇到的问题？" class="headerlink" title="3.3 业务中经常遇到的问题？"></a>3.3 业务中经常遇到的问题？</h2><p>根据我工作经验，经常遇到的问题有</p><p>1）埋点不考虑业务逻辑</p><p>2）埋点字段定义模糊</p><p>3）埋点数据上报不准确</p><p>分别举例来看看吧～（我发现网络上很多著作，都只讲抽象的概念，不讲case，非常让人讨厌</p><h3 id="3-3-1-埋点不考虑业务逻辑"><a href="#3-3-1-埋点不考虑业务逻辑" class="headerlink" title="3.3.1 埋点不考虑业务逻辑"></a>3.3.1 埋点不考虑业务逻辑</h3><p>业务逻辑是啥？</p><p>举个例子来说吧，比如在推荐领域，相关推荐。在做data check时候，发现每次都上报两条曝光数据。但是业务是什么样子的呢？</p><p><img src="https://kerryli1007.github.io/images/2021_Q2_Week4_%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/1.jpg"></p><p>真实的业务是这样的，就是每当用户下拉当前阅读文章到下面时候，B文章的展示出来且能被用户看到的部分，不过1&#x2F;7，但是也是简单粗暴直接记为了show。这样说还是很抽象，我尝试再具体详细一些。</p><p>1）这是推荐场景的个性化推荐模块，目标是在下面给用户推荐当前用户可能感兴趣的内容，让用户点进去，提高用户的留存</p><p>2）在当前这篇文章下面，给用户推荐了A和B两篇文章，当用户刷到上图位置时候，就为A和B记为show。</p><p>问题来了，但是这个时候，用户压根看不清B的内容到底是啥？这会带来什么影响呢？</p><p>直接影响就是，可能用户本来感兴趣的内容B，但是因为没有有效展示出来，用户没有进行近一步的动作，所以会导致，直接将用户反馈记为了负反馈。</p><h3 id="3-3-2-埋点字段定义模糊"><a href="#3-3-2-埋点字段定义模糊" class="headerlink" title="3.3.2 埋点字段定义模糊"></a>3.3.2 埋点字段定义模糊</h3><p>比如在小视频场景，当用户刷到了当前时候，这个时候，这个视频的行为会有一个show，但是如果用户产生了观看行为，那么也就是说，用户在这个视频上消费了时间，这个时候，会记录一个duration，这个duration就表示用户在这个视频上产生了观看行为。</p><p>但是问题来了，用户在这个视频上观看了几秒，这个行为就是duration了呢？</p><p>大于等于1秒？</p><p>大于等于2秒？</p><p>这些都是要基于业务进行思考。</p><h3 id="3-3-3-埋点数据上报不准确"><a href="#3-3-3-埋点数据上报不准确" class="headerlink" title="3.3.3 埋点数据上报不准确"></a>3.3.3 埋点数据上报不准确</h3><p>埋点数据上报不准确主要有哪几种表现 ：</p><p>1）重复上报</p><p>2）动作顺序混乱，比如对于资讯，肯定是先show再有其他动作，比如click，但是经常会发现，先click再show，这就是有问题了！</p><h2 id="3-4-如何规避上述问题"><a href="#3-4-如何规避上述问题" class="headerlink" title="3.4 如何规避上述问题"></a>3.4 如何规避上述问题</h2><p>所以如何规避上述问题呢？</p><p>首先，业务，业务，业务，精通业务。</p><p>其次，每个字段的定义需要了然于胸。</p><p>最后，data check，data check，data check。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很久没有写工作总结了，得拾起来。&lt;/p&gt;
&lt;p&gt;本周关键词：数据流、解决问题、埋点&lt;/p&gt;
&lt;h1 id=&quot;一、数据流&quot;&gt;&lt;a href=&quot;#一、数据流&quot; class=&quot;headerlink&quot; title=&quot;一、数据流&quot;&gt;&lt;/a&gt;一、数据流&lt;/h1&gt;&lt;p&gt;年初时候，和商汤的</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>2021_Q2_Week3_工作总结</title>
    <link href="https://kerryli1007.github.io/2021/04/22/2021-Q2-Week3-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://kerryli1007.github.io/2021/04/22/2021-Q2-Week3-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-22T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>本周关键词：客户管理、负载均衡、策略产品</p><p>recap一下去年和百度一位MT的沟通，沟通内容是他给了我一些我博客内容的反馈，总结一下就是：方法论偏多，干货偏少。不是说，方法论不好，而是在我当前阶段，应该了解更多的干货，比如ocr的算法原理。（因为去年的时候，我还在搞ocr。这是上述recap的大背景。今年调整了赛道，开始重新搞推荐，上述建议同样适用。所以，在我今年的每周总结，我都会有意识的增加干货部分。并且可能会采取将工作总结分为方法论和干货两个模块的形式。</p><p>同样，在方法论和干货篇中，也会有单独的WHY模块。做一件事是执行力，这是0，知道并且能判断为什么做一件事，是0前面的1。（今年的思维比去年成熟太多了，惊喜！）</p><h1 id="一-方法论篇"><a href="#一-方法论篇" class="headerlink" title="一 方法论篇"></a>一 方法论篇</h1><h2 id="1-1-客户管理"><a href="#1-1-客户管理" class="headerlink" title="1.1 客户管理"></a>1.1 客户管理</h2><p>思前想后，觉得客户管理的方法论，不适合公开发布，就省略了吧。</p><h1 id="二-干货篇"><a href="#二-干货篇" class="headerlink" title="二 干货篇"></a>二 干货篇</h1><h2 id="2-1-负载均衡"><a href="#2-1-负载均衡" class="headerlink" title="2.1 负载均衡"></a>2.1 负载均衡</h2><p>为啥要了解负载均衡？一寸光阴一寸金。负载均衡和我有啥关系？在工作中，我经常听到这个名词，感觉不懂，就不配继续拿工资了。</p><h3 id="2-1-1-负载均衡是什么"><a href="#2-1-1-负载均衡是什么" class="headerlink" title="2.1.1 负载均衡是什么"></a>2.1.1 负载均衡是什么</h3><p>负载均衡是一种电子计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动或其他资源中分配负载，以达到优化资源使用、最大华吞吐率、最小化响应时间、同时避免过载的目的。</p><blockquote><p>负载均衡是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或者其他服务的性能和可靠性。</p></blockquote><p>太抽象了，能不能具体一点，我不喜欢抽象的描述。</p><blockquote><p>在业务初期，我们一般会先使用单台服务器对外提供服务。随着业务流量越来越大，单台服务器无论如何优化，无论采用多好的硬件，总会有性能天花板，当单服务器的性能无法满足业务需求时，就需要把多台服务器组成集群系统提高整体的处理性能。</p><p>基于上述需求，我们要使用统一的流量入口来对外提供服务，本质上就是需要一个流量调度器，通过均衡的算法，将用户大量的请求流量均衡地分发到集群中不同的服务器上。这其实就是我们今天要说的<strong>负载均衡</strong>。</p><p>使用负载均衡可以给我们带来的几个好处：</p><ul><li>提高了系统的整体性能；</li><li>提高了系统的扩展性；</li><li>提高了系统的可用性；</li></ul></blockquote><h3 id="2-1-2-常见的负载均衡类型"><a href="#2-1-2-常见的负载均衡类型" class="headerlink" title="2.1.2 常见的负载均衡类型"></a>2.1.2 常见的负载均衡类型</h3><h4 id="1）DNS实现负载均衡"><a href="#1）DNS实现负载均衡" class="headerlink" title="1）DNS实现负载均衡"></a>1）DNS实现负载均衡</h4><p>一个域名通过 DNS 解析到多个 IP，每个 IP 对应不同的服务器实例，这样就完成了流量的调度，虽然没有使用常规的负载均衡器，但实现了简单的负载均衡功能。</p><p><img src="https://kerryli1007.github.io/images/2021_Q2_Week3_%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/1.png"></p><h4 id="2）硬件负载均衡"><a href="#2）硬件负载均衡" class="headerlink" title="2）硬件负载均衡"></a>2）硬件负载均衡</h4><p>这种方式，我工作中基本上没有遇到过，暂时不考虑。</p><h4 id="3）软件负载均衡"><a href="#3）软件负载均衡" class="headerlink" title="3）软件负载均衡"></a>3）软件负载均衡</h4><p>软件负载均衡，可以在普通的服务器上运行负载均衡软件，实现负载均衡功能。目前常见的有Ngix、HAproxy、LVS。</p><p>工作中最经常接触的是Ngix。</p><p>PS：本周总结有限，因为实际写这篇总结的时候已经是5月5日了～写每周总结，不能拖，一拖就出问题！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周关键词：客户管理、负载均衡、策略产品&lt;/p&gt;
&lt;p&gt;recap一下去年和百度一位MT的沟通，沟通内容是他给了我一些我博客内容的反馈，总结一下就是：方法论偏多，干货偏少。不是说，方法论不好，而是在我当前阶段，应该了解更多的干货，比如ocr的算法原理。（因为去年的时候，我还</summary>
      
    
    
    
    <category term="工作" scheme="https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>item-to-item collaborative filtering</title>
    <link href="https://kerryli1007.github.io/2021/04/09/item-to-item-collaborative-filtering/"/>
    <id>https://kerryli1007.github.io/2021/04/09/item-to-item-collaborative-filtering/</id>
    <published>2021-04-09T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.525Z</updated>
    
    <content type="html"><![CDATA[<p>目标：</p><ol><li>了解推荐领域的经典算法i2i，产生背景、自身特点、运作原理</li><li>了解不同算法之间的特点，u2i、cluster model、search based、i2i</li></ol><p>以下是论文，Enjoy～</p><p>对于电商场景而言，推荐算法通常面临如下挑战：</p><ol><li>大型零售商拥有海量数据，数以千万计的用户与不计其数的商品。</li><li>推荐应用需要推荐系统实时返回数据，同时要求这些返回结果是有效的。</li><li>新的用户由于只有很少的购买行为和评论行为，系统往往没有这类用户的数据。</li><li>老用户的数据过多。</li><li>用户数据处于动态变化中。用户和网站的每一次交互都产生了非常珍贵的数据，推荐系统需要立即针对这些新的信息给出重新计算后的反馈。</li></ol><p>针对上述问题，通常有3种解决思路：</p><ul><li>传统的协同过滤</li><li>聚类模型</li><li>基于搜索的方法</li></ul><p>在这篇论文中，作者将上述3种方法同Amazon提出的item-to-item算法进行了分析对比。</p><p>和传统的算法相比，item-to-item(i2i)的优势：</p><ul><li>该算法的线上扩展性与用户以及商品的数量无关。</li><li>该算法可实时计算出用户偏好，可扩展至海量数据，并且这些预测的质量非常高。</li></ul><h1 id="1-传统的推荐算法"><a href="#1-传统的推荐算法" class="headerlink" title="1. 传统的推荐算法"></a>1. 传统的推荐算法</h1><p>传统推荐算法包括用户协同过滤（user-to-user collaborative filtering），聚类模型（Cluster Models）、基于搜索的方法（Search-Based Methods）。</p><p>绝大多数的推荐算法，其逻辑均为，针对用户A，首先找到和用户A有着相似消费行为的用户群B；然后算法将用户群B消费过的商品计算出来，得到一个商品集C；接着，将A已经购买过的商品从商品集C中减去，得到待推荐商品集D；最后，将D中的商品推荐给用户A。这类算法的核心是找到有相似消费行为的用户。具体的算法有user-to-user collaborative filtering和cluster models。除此之外，还有核心是找到相似商品的算法。这类算法的具体代表有search-based methods和item-to-item collaborative filtering。</p><p>总结一下，推荐算法的基础逻辑，分为两类：类别1，找到有相似的消费者；类别2，找到有相似的商品。</p><h2 id="1-1-用户协同过滤（user-to-user-collaborative-filtering）"><a href="#1-1-用户协同过滤（user-to-user-collaborative-filtering）" class="headerlink" title="1.1 用户协同过滤（user-to-user collaborative filtering）"></a>1.1 用户协同过滤（user-to-user collaborative filtering）</h2><p>传统的基于用户的协同过滤算法将用户表征为关于物品的N维向量，N在这里表示的是不同物品的类别数量。这个向量的组成部分有正的，也有负的（The components of the vector are positive, for purchased or positively rated items and negative for negatively rated items.）。对于Best-selling 商品，算法将这些向量的组成部分相乘，让不那么出名的商品更相关。对于绝大多数消费者而言，这些向量都是很稀疏的。</p><ul><li>要回答什么是sparse feature，可能首先要理解什么是feature。</li><li>一般在machine learning意义上，我们常说的feature，是一种对数据的表达。当然，要衡量一种feature是否是合适的表达，要根据数据，应用，ML的模型，方法….很多方面来看。一般来说，Feature应该是informative（富有信息量），discriminative（有区分性）和independent（独立）的。</li><li>那么具体怎么选择feature，其实一直是一个开放的问题。在机器学习里面，feature的选择是至关重要的：对于同一种学习的模型，同样的学习方法，同样的数据，选择不同的feature来表达，可能会产生完全不同的效果。</li><li>Feature有很多种特性和分类：Feature可以是Linear（线性），也可以是Non-linear（非线性）的；Feature可以是Fixed（固顶的），也可以是Adaptive（适应性的)….甚至feature都可以不是numerical的，但因为题主问的是sparse feature，所以我就在这里特指numerical的feature。</li><li>如果把我们的每一个数据点，想象成一个vector（向量），记作y，对应的feature则可以用另外一个vector来表示，记作x。</li></ul><p>更多关于稀疏向量的解释，参考 <a href="https://www.zhihu.com/question/31951092">https://www.zhihu.com/question/31951092</a></p><p>该算法通过一些相似的用户来生成推荐。通过计算两个消费者的相似度，通常用来计算两个消费者相似度的方式是计算这两个向量之间的cosine。</p><p>也有一些其他的方法来计算不同用户之间的相似度，但是这些方法各有利弊。详细参考<a href="https://www.youtube.com/watch?v=VZKMyTaLI00">https://www.youtube.com/watch?v=VZKMyTaLI00</a></p><p>使用协同过滤算法来做推荐是非常消耗计算资源的。最差的情况下，是O(MN)，M是用户的数量，N是商品的数量，因为这类算法需要遍历每个消费者来评估N个商品。然而，由于通常用户的向量都是非常稀疏的，这个算法的表现更倾向于是O（M+N）。扫描所有的消费者大概是O（M）。但是这里有一些消费者，他们买了或者购买了大量的商品，就需要O（N）的处理时间。因此，最后这个算法的性能是O（M+N）。对于大的数据集，比如有大于100万的用户，和大于10万的商品，该算法会遇到非常大的性能和可扩展性的问题。</p><p>通过减少数据量可以部分地解决这个可扩展性的问题。我们可以减少M通过随机取样或者删除只有少量购买行为的的消费者。我们可以减少N通过移除不受欢迎或者非常受欢迎的商品。</p><p>但是不幸的是，这些方法都或多或少会降低推荐的质量。首先，如果算法只筛选了一小部分消费者，这一小部分消费者的相似度会降低。其次，最后，如果算法将不那么受欢迎或者受欢呼的商品移除了，那么这些商品永远不会在推荐系统中出现，消费者也不会收到这些推荐。</p><h2 id="1-2-聚类模型（Cluster-Models）"><a href="#1-2-聚类模型（Cluster-Models）" class="headerlink" title="1.2 聚类模型（Cluster Models）"></a>1.2 聚类模型（Cluster Models）</h2><p>通过一个case，来看聚类模型的整个pipeline。</p><p>西蓝花来到网页上，这个网页要做的是找到和西蓝花画像最相似的用户群。算法首先将所有用户分为N个Group，接着将西蓝花放进其中的一个Group，比如说Group A，最后算法通过Group A中消费者的购买行为和评分来为西蓝花推荐商品。</p><p>这些Group通常是通过聚类或者无监督学习来获得，虽然在有的应用是手动来划分。基于相似度指标，聚类算法将最相似的用户放在同一个群组。因为在大数据集上聚类的表现不好，所以大多数应用使用贪心聚类算法。这些算法通过先开始一个小的部分，这个小部分只包含几个随机选择的用户。接着这个算法重复地向该群组添加用户。对于大的数据集，以及有高维度的数据集，抽样以及降维是必须的。</p><p>一旦算法创建了群组，他会计算用户和各个群组之间的相似度，接着选择相似度最高的群组，并将该用户划分进该群组。</p><p>因为聚类算法在计算相似度时候，计算的是特定用户与N个群组之间的相似度，而非与所有用户之间的相似度，因此聚类算法的线上可扩展性是更好的，且性能更佳。但是，聚类算法的质量是很差的。</p><h2 id="1-3-基于搜索的方法（Search-Based-Methods）"><a href="#1-3-基于搜索的方法（Search-Based-Methods）" class="headerlink" title="1.3 基于搜索的方法（Search-Based Methods）"></a>1.3 基于搜索的方法（Search-Based Methods）</h2><p>搜索或者基于内容的方法将推荐作为对于相关物品的搜索。考虑到用户的购买和对商品的评分，整个算法会建构一个query，去寻找同一个作者、艺术家、导演的受欢迎的物品。如果用户西蓝花购买了教父的DVD合集，这个系统会推荐其他的犯罪剧，或者其他Marlon Brando主演的电影，或者其他Francis Ford Coppola导演的电影。</p><p>对于用户只有很少的购买或者评分行为，基于搜索的方法也能扩展，并且表现良好。相反，对于有着成千上问购买行为的用户，基于所有物品的query构建反而是不切实际的。这样的情况下，算法必须使用的是数据的子集，这样就会降低数据质量。在所有case中，基于搜索的方法表现是糟糕的。推荐结果太普遍，或者太窄了。（比如推荐的都是热门、或者推荐的都是一个作者的所有书籍）推荐系统应该帮助消费者发现新的商品、相关的商品、或者消费者感兴趣的商品。但是同一个作者受欢迎的商品或者同一个类别的商品，是不能达成推荐系统的目标的。</p><h1 id="2-item-to-item的协同过滤"><a href="#2-item-to-item的协同过滤" class="headerlink" title="2. item-to-item的协同过滤"></a>2. item-to-item的协同过滤</h1><p>在邮件营销和网站首页，亚马逊均使用推荐系统作为营销工具。</p><p>但是由于现存的推荐算法无法处理亚马逊上数以亿万计的商品和用户，因此亚马逊创建了自己的推荐算法，基于物品的（i2i）协同过滤，该算法的特点可以处理大数据并且实时给出高质量的推荐。</p><h2 id="2-1-item-to-item的原理"><a href="#2-1-item-to-item的原理" class="headerlink" title="2.1 item-to-item的原理"></a>2.1 item-to-item的原理</h2><p>i2i将消费者购买的商品的相似度进行打分，然后将相似的商品放进一个推荐列表。</p><p>对于一个给定的商品，为了找到与该商品最相似的商品，算法会创建一个相似item表来找到消费者最有可能一起购买的商品。我们可以创建一个product-to-product的矩阵，通过迭代所有的商品，并计算每一对的相似度。然而，很多商品的没有共同的消费者，因此这种方式就是非常无效的并且也很占用内存。接下来的迭代算法提供一个一个更好的方式，通过计算一个商品与所有相关商品之间的相似度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">For each item in product catalog, I1</span><br><span class="line">For each customer C who purchased I1</span><br><span class="line">For each item I2 purchased by</span><br><span class="line">customer C</span><br><span class="line">Record that a customer purchased I1</span><br><span class="line">and I2</span><br><span class="line">For each item I2</span><br><span class="line">Compute the similarity between I1 and I2</span><br></pre></td></tr></table></figure><p>在两个item中来计算相似度，但是一个通用的方法是使用我们之前提到的计算的cosine，在这里一个向量代表一个商品，而不是一个消费者。</p><p>线下对相似物品的计算非常的耗时，最差情况下。</p><h2 id="2-2-算法对比"><a href="#2-2-算法对比" class="headerlink" title="2.2 算法对比"></a>2.2 算法对比</h2><p>亚马逊有2900万消费者和几百万的商品。其他的零售店也有相对较大的资源，这些数据都提供机会。</p><p>基本上当前所有的算法都是在小数据集上进行的测评，这些数据集有MovieLens data set，包括35,000消费者和3,000物品，EachMovie data set，包括4,000消费者和1,600物品。</p><p>对于非常大体量的数据集，一个可扩展的推荐算法必须能够在线下完成计算。做一个简短的对比，现存的方法有如下弊端：</p><ul><li>传统的CBF没有线下计算，线上计算量随着数据量呈线性增加，针对大数据集场景，该算法是无法投产的，除非对数据集进行将维、抽样、或者切分。但是这些操作都会降低推荐的质量。</li><li>聚类算法在线下计算表现很好，但是线上推荐质量相对较差。为了提升，可以增加聚类后群组的数量，但是这个会让线上的分类计算量增加。</li><li>基于搜索的方法建构了关键词，类别以及作者索引，但是不能提供更新、更有趣的推荐。这类方法对于有大量购买和评分的行为的用户而言，可扩展性差。</li></ul><p>i2i在可扩展性和表现上都很好的原因是，该算法在线下计算商品的相似度。i2i的online部分只是针对消费者的购买和评分行为，查找相似的商品，这个过程只是依赖于消费者购买或者评分了多少商品。因此，即便是针对特别大的数据集，该计算方式也是尤为快。因为算法推荐的都是高度相关的商品，因此推荐的效果也</p><h1 id="3-生产场景应用"><a href="#3-生产场景应用" class="headerlink" title="3. 生产场景应用"></a>3. 生产场景应用</h1><p>待补充</p><p>待补充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解推荐领域的经典算法i2i，产生背景、自身特点、运作原理&lt;/li&gt;
&lt;li&gt;了解不同算法之间的特点，u2i、cluster model、search based、i2i&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是论文，Enjoy～&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="推荐系统" scheme="https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>产品经理相关思考</title>
    <link href="https://kerryli1007.github.io/2021/02/16/20210217-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/"/>
    <id>https://kerryli1007.github.io/2021/02/16/20210217-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/</id>
    <published>2021-02-16T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在被拷问几个问题，主要集中在三个问题：</p><ul><li>产品经理是做什么的？</li><li>你为什么说你对产品有热情？</li><li>对于做产品这件事，你的价值是什么？</li></ul><p>这些问题有的是我自己对自己发起的，有的是朋友向我发起的。</p><p>对问题的思考，让我像拿着手术刀一样，毫不留情地剖析我自己。</p><h1 id="01-产品经理是做什么的？"><a href="#01-产品经理是做什么的？" class="headerlink" title="#01 产品经理是做什么的？"></a>#01 产品经理是做什么的？</h1><p>这个问题已经烂大街了。</p><p>随便Google一下，都有成千上万的标准答案。但是，那是别人的答案，我的回答是什么？为什么我会给出这样的回答？</p><p><strong>初探产品经理</strong></p><p>当时的我尚在少儿编程公司时候，公司的主要商业模式是为8 - 12岁的孩子提供编程录播课，孩子们看了课程之后，做课后作业。在做课后作业的时候，会遇到一些问题，他们在前台的chatbox提问。后台会有老师解答。这是公司业务流程中，很普通的一个环节，但是这个环节存在一个问题，所有孩子都上同一门课，理所当然他们提的问题是一样的。后台老师需要重复地回答相同的问题，老师也是人，烦躁是第一感受，第二感受是没有成就感。</p><p>当时，我在想，既然这些问题都是重复的，为什么不能自动回答？对用户来说，自动回答可以缩短让用户等待的时间；对后台老师来说，自动回答可以增加工作的automation。</p><p>接着和当时的后端负责人（目前的产品负责人）聊了这个问题。他说，好啊，你需要哪些数据，列一个需求清单给我，我导出来给你。</p><p>当时列出来的数据清单的schema如下</p><ul><li>课程等级（L1 - L6）</li><li>课程ID（1 - 12）</li><li>学生和老师的对话流</li></ul><p>对老师和学生的对话流进行分析，发现大概有</p><ul><li>20的问题，都是老师课上有讲，但是学生没有认真听讲，所有存疑</li><li>30的问题，都是重难点，存在大量重复提问</li><li>40的问题，都是一些“长尾”的问题</li><li>10的问题，个性化</li></ul><p>具体数值可能有出入，但是大概是上面这样。通过上述分析，我将其中能概括出来的回答做了总结。做了一个后台自动回复功能。回复的模版可以根据课程内容配置。</p><p>大大地提高了效率，也缩短了孩子们的等待时间。这是我初探产品经理。</p><p><strong>AI产品经理</strong></p><p>后来加入了4PD的云团队。团队的主要目标是将产品放在云上进行售卖。团队人数少，我的工作职能一边负责着解决方案，一边负责着官网前后端的设计。</p><p>回顾反思一下，当时做这套系统，思考得更多得是支持团队业务的开展。这里说的业务开展，就是获客、已经管理这些customer的生命周期。</p><p>前后端的产品设计之外，还兼任了“云OCR PM”负责OCR上云的工作。在OCR上云的过程中，让我更加加深了对产品经理职业的理解。</p><p>如果说，前后端官网的设计是让我了解了产品作为一个什么样的tool来支持业务的开展，ocr上云的产品工作，让我了解了产品如何从市场竞争格局的角度，来帮助产品GTM。</p><p>在这个阶段，对用户场景的思考、对市场竞争的思考，对自己产品优势劣势的思考，都得到了磨练。</p><p>而上述各个阶段的转变，从能做一个单一的feature、到能做一个系统的产品，再到帮助一个产品GTM，其实背后对应的知识技能要求也有差异。</p><p>对一个优秀PM的评估，有如下几个维度：</p><ul><li>通用能力</li><li>专业能力</li><li>产出</li><li>组织影响力</li></ul><h1 id="02-为什么讲我对做产品有热情"><a href="#02-为什么讲我对做产品有热情" class="headerlink" title="#02 为什么讲我对做产品有热情"></a>#02 为什么讲我对做产品有热情</h1><p>经过一段时间的思考，我对“做产品有热情”的理解，可以分为3个阶段：</p><ul><li>“无知”的热情</li><li>“朦胧”的热情</li><li>“明白“的热情</li></ul><p>我先解释一下我对这3个阶段的理解，接着说一下这三个阶段变化的背后底层逻辑。</p><p><strong>“无知”的热情</strong></p><p>问：你为什么想做产品？</p><p>答：因为我喜欢。</p><p>问：你喜欢的产品有哪些？</p><p>答：Emmm，Nomo。</p><p>问：为什么？</p><p>答：感觉很惊艳。</p><p>问：为什么惊艳？</p><p>答：有很多滤镜。</p><p>问：……</p><p><strong>“朦胧”的热情</strong></p><p>问：你为什么想做产品？</p><p>答：因为我喜欢创造工具。</p><p>问：哪一款是你最喜欢的工具？为什么喜欢这款工具？</p><p>答：Notion。</p><p>问：继续说说，为什么喜欢这款工具。</p><p>答：因为这款工具1、2、3吧啦吧啦很好（基本说出了这款工具的亮点</p><p><strong>“明白”的热情</strong></p><p>在“朦胧“的热情上，多了对这个行业的洞察。包括对这个行业历史、以及当前市场玩家的洞察。而且亲自动手做了大量的研究工作。</p><p>参考一份模版一样的“明白“的产品热情</p><blockquote><p>最近看了俞军老师当年学习搜索引擎的方法。他的学习方法如下： </p><p>-每天至少200次搜索，持续一年以上 </p><p>-阅读可收集到的任何搜索相关文章，至少5000篇，至少一半是英文 </p><p>-把任何可利用时间用于思考搜索，把眼前看到以及脑中的任何事物以及文字都用搜索来描述和验证 - 任何别人搜索过的案例，一定仿照一遍，并做10倍以上的变化搜索，至少半年 </p><p>-对最感兴趣的一门领域，深入了解它，彻底跟踪该领域内任何信息，包括你极尽所能收集到的任何角度、任何位置、任何媒体、任何人、任何形式的信息，直到你弄清楚信息是怎样出生、生长、生病、死亡，维持这种状态绝不可短于一年。 </p><p>-阅读任何人文学科著作至少1000本，其中至少100本哲学和心理学作品，不要放过任何所谓经典著作</p><p>-以感情入搜索。我的力量来源于愤怒！内心深处的愤怒，改变世界的信念支持我在每次搜索时尽全力并得到足够的回报。</p></blockquote><p>链接： <a href="http://www.sowang.com/sousuo/2002-11-11.htm">我告诉你怎么学搜索-搜索技巧-中文搜索引擎指南网</a></p><p>说回来这3阶段变化的背后：</p><ol><li>意愿层。从“无知”到“明白”，意味着，愿意投入大量的时间、精力。这是第一层，意愿层。</li><li>动手能力。在意愿层的基础上，是动手能力，包括搜索信息的能力，归纳信息的能力，以及最后提取信息的能力。动手能力打在字上是很轻松，但是在执行层面，是非常难的。这种前期的投入，非常枯燥，若非真的热爱，有热情，是很难坚持的。</li><li>只有在意愿✅，动手能力✅的基础上，才有资格讲，对产品的热情。</li></ol><p>反躬自省一下，我目前处在什么阶段呢？</p><p>阶段二到阶段三过渡。</p><p>我用Notion搭建出来的“产品沉思录”就是我在努力向第三阶段迈近的证据，但是目前烛光尚弱，尚不足以照亮阶段三。</p><h1 id="03-对于做产品这件事，我的价值是什么"><a href="#03-对于做产品这件事，我的价值是什么" class="headerlink" title="#03 对于做产品这件事，我的价值是什么"></a>#03 对于做产品这件事，我的价值是什么</h1><p>对于这个问题的回答，我试图将命题缩小一点，在创造工具产品这件事上，我的价值是什么？</p><p>我的价值这个话题还是太难回答，再具体一点。我希望通过怎么样的方式来创造价值？</p><p>对当前工作流的观察，进行抽象，借助一些思想先锋&#x2F;好的理念，创造出好的产品。</p><p>参考高效会议一章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一直在被拷问几个问题，主要集中在三个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品经理是做什么的？&lt;/li&gt;
&lt;li&gt;你为什么说你对产品有热情？&lt;/li&gt;
&lt;li&gt;对于做产品这件事，你的价值是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题有的是我自己对自己发起的，有的是朋友向我发</summary>
      
    
    
    
    <category term="效率工具" scheme="https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>复盘写博客这一年</title>
    <link href="https://kerryli1007.github.io/2021/02/16/20210217-%E5%A4%8D%E7%9B%98%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <id>https://kerryli1007.github.io/2021/02/16/20210217-%E5%A4%8D%E7%9B%98%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%80%E5%B9%B4/</id>
    <published>2021-02-16T16:00:00.000Z</published>
    <updated>2023-03-24T10:41:37.521Z</updated>
    
    <content type="html"><![CDATA[<p>规律性地写博客有一年了。关于博客的内容，也得到了一些反馈，反馈陆陆续续来自不同的人，他们有着不同的角度。就这些反馈做一下总结，也梳理一下来年的重点。</p><p>反馈1:都是HOW，缺少WHY。</p><p>反馈2:经验比重大，干货比重小。</p><p>调整：</p><ol><li>更加关注WHY。不是说HOW，也就是如何做一件事不重要。WHY和HOW都很重要，但是应该有倾向地提升对WHY的刻意思考。</li><li>更加关注干货。比如在OCR这个模块，干货更多的是指对各家底层技术的了解。</li></ol><p>一个疑问：</p><ol><li>如何提升自己对自己不了解的行业的认知</li></ol><p>大概这样，未来1年再动态调整。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;规律性地写博客有一年了。关于博客的内容，也得到了一些反馈，反馈陆陆续续来自不同的人，他们有着不同的角度。就这些反馈做一下总结，也梳理一下来年的重点。&lt;/p&gt;
&lt;p&gt;反馈1:都是HOW，缺少WHY。&lt;/p&gt;
&lt;p&gt;反馈2:经验比重大，干货比重小。&lt;/p&gt;
&lt;p&gt;调整：&lt;/p&gt;</summary>
      
    
    
    
    <category term="思考" scheme="https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
</feed>
