{"meta":{"title":"一颗西蓝花🥦","subtitle":null,"description":"AI/思考/学习","author":"一颗西蓝花🥦","url":"https://kerryli1007.github.io","root":"/"},"pages":[{"title":"archives","date":"2020-07-18T05:10:34.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"archives/index.html","permalink":"https://kerryli1007.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-08-30T03:41:17.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"categories/index.html","permalink":"https://kerryli1007.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-08-30T14:45:09.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"contact/index.html","permalink":"https://kerryli1007.github.io/contact/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-08-30T14:40:51.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"friends/index.html","permalink":"https://kerryli1007.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2016-12-31T10:09:56.000Z","updated":"2016-12-31T10:09:56.000Z","comments":false,"path":"history/index.html","permalink":"https://kerryli1007.github.io/history/index.html","excerpt":"","text":""},{"title":"友链","date":"2022-05-28T03:09:14.000Z","updated":"2023-03-24T10:41:37.773Z","comments":true,"path":"link/index.html","permalink":"https://kerryli1007.github.io/link/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-24T09:37:05.000Z","updated":"2017-02-24T09:37:05.000Z","comments":true,"path":"tags/index.html","permalink":"https://kerryli1007.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"人生决策效率算法","slug":"20230324-人生效率算法","date":"2023-03-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2023/03/23/20230324-人生效率算法/","link":"","permalink":"https://kerryli1007.github.io/2023/03/23/20230324-%E4%BA%BA%E7%94%9F%E6%95%88%E7%8E%87%E7%AE%97%E6%B3%95/","excerpt":"","text":"什么是人生决策效率算法？我们的人生，由无数个决策组成。如果我们做了正确的决策，那我们会获得不错的回报。但是，如果我们做了错误的决策，那我们不但拿不到回报，还会付出代价。 人生决策效率，指在我的范围内，做出对未来的自己，最有裨益的决策。 诸多因素均会影响我们的决策效率，根据我认为的重要性优先级，将这些因素进行排序：1、认知的高低。认知高低是最重要最关键的影响因素。举个例子，2017年的我，对未来毫无规划，也不知道职场的规则，所以做出了在咨询公司呆了2个月，然后又去互联网公司的错误决策。这个时期的我，对社会的认知能力为1（从1 - 10 打分）。特别说明一点，认知高低永远是相对的，我现在评估17年的我认知能力为1，当下认知能力为6，但是很有可能，再过3年，我会评价目前的自己，认知能力也只有1。2、金钱的富裕程度。在对决策的影响中，似乎很少有人谈及金钱，因为传统文化的影响，中国人羞于谈论金钱。但是金钱时时刻刻影响我们的决策，小到洗衣液的选购，大到生病上学。金钱充足的人，更容易目光远大；金钱匮乏的人，更容易鼠目寸光。3、未知的信息。外界的突发的事件，比如俄乌战争。 这里面1和2是我们已知的，3是未知的。 想要做出最好的决策，我们需要提升自己在因素1和因素2上的能力。 认知高低认知直接影响一个人的状态。 我健身4年了，但是我知道，最近半年，是我进步最快的半年。我之所以说，最近半年的进步最快，直接证明是我的3大项数据，卧推23kg、硬拉63kg、深蹲40kg。以前躺在罗马椅上，我连卧推用的15kg小杆都推不起来。 为什么有这个进步？因为，我对饮食、训练都有了更深一层的认识。 在训练上，我开始思考肌肉本来的功能走向、肌肥大的原理、休息日对我训练的重要性。在饮食上，我开始从人体所需的3大宏量元素思考我到底更需要什么。 而以前，我从不思考这些。 以前的我训练，基本上每天都去健身房、但是没有系统的训练计划，也不去考虑，我的肌肉量到底涨还是没有涨。这种不带脑子的锻炼，实际上是在麻痹自己。以前的我饮食，每一顿碳水过量、脂肪过量，蛋白质少的要死，吃的随心所欲。 所以，过去健身的3年6个月，我的投入为10，产出只有3，最近6个月，我的投入为3，产出有2。两者一比，谁的效率更好，一目了然，也自然就是我今天想聊的，人生决策效率。 如果4年前的我，就能用今天的认知去做判断，那现在的我，身材应该也和我的偶像一样好了。 金钱的富裕程度这个我还不能有切身体会，毕竟我一直都在贫困线上挣扎。等以后，如果有机会有钱了再来写感受吧。 提个问题，怎么样才能提高认知水平？以前的我会说：看书，看大佬怎么做的。 现在的我会说：去尝试、去验证、去失败。有的事，你没有亲身经历过，你永远不知道到底是怎么一回事。 不要停下来，人生在于发疯，你发疯的次数越多，你成长越快。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"从HOW到WHY","slug":"20230323-从HOW到WHY","date":"2023-03-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2023/03/22/20230323-从HOW到WHY/","link":"","permalink":"https://kerryli1007.github.io/2023/03/22/20230323-%E4%BB%8EHOW%E5%88%B0WHY/","excerpt":"","text":"昨晚又一次阅读了自己过往的博客，发现以前自己做的事，都是关于「如何把一件事做好，比如把产品卖出去、把项目交付好」，而自己最近做的事，则是判断「我应该做什么去获得最大收益」。想来这也是我确实成长到了一个新阶段，祝贺一下自己。 为什么说自己成长到了一个新阶段？因为选择应该做什么，比把一件事做好，更重要，更困难。 解释一下「选择应该做什么」与「把一件事做好」的区别。 选择应该做什么：实际上是在判断ROI，要做的事根据预期收益和投入排优先级。 把一件事做好：是在优先级排列出来后，去执行。 为什么说前者比后者更重要？优先级的判断，直接影响后续执行时的资源投入，如果资源投入错了，那就白干。 为什么说前者比后者更困难？因为提前预判项目的收益，需要很多认知的支持，包括：对用户心理的清晰认知、对产品形态的精准把握。 什么帮助我形成了「应该怎么做去获得最大收益」这种思维？自媒体创业。 自己的内容创作能力有上限，因此每天能发的内容数量是有限的，大概在3-4条，而我需要通过这3-4条的内容获得流量、获得粉丝。所以，我需要不断地去思考，做什么品类的内容能获得更好的数据、更有助于人设的打造。 更好的数据具体指？ 数据分为终极指标与优化指标。 终极指标：曝光数、转粉数、转化数。优化指标：2s跳出、5s完播率、平均播放时长等等 前者是我想追逐的目标，后者是指导我去优化视频内容的参考指标。 人设的打造是指？ 人设打造的目标是我要让用户记住我，路径是把我和一些用户目前已经非常熟悉的概念联系起来（涉及到战略方向，不做展开），具体的执行就是在不同品类的视频类型中，一直强调这些概念。 所以我做的一切都是奔着数据和人设去的，目前看起来，效果还不错。validate我说效果还不错的证据是：1、最新5条内容的vv都在一个不错的量级2、互动数据中有很多我人设相关概念的评论出现 未来怎么才能成长地更快？不要停下来，生命在于发疯。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"再次更博，认识你自己","slug":"20220322-再次更博，认识自己","date":"2023-03-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2023/03/21/20220322-再次更博，认识自己/","link":"","permalink":"https://kerryli1007.github.io/2023/03/21/20220322-%E5%86%8D%E6%AC%A1%E6%9B%B4%E5%8D%9A%EF%BC%8C%E8%AE%A4%E8%AF%86%E8%87%AA%E5%B7%B1/","excerpt":"","text":"know thyself。 - 苏格拉底 博客停更了一年半，似乎也能隐射出，这一年半我的状态并不是很好。 家人患疾、工作不顺，相互叠加，让我这个「不那么成熟的成年人」一下子成长为了「成熟的成年人」。 以问答的方式，来重新认识一下我自己。 问题1：什么对你最重要？答：站在这这个时间节点。 家人、金钱。 注意，这两者同等重要，不分先后。于我而言，家人永远是最重要的。金钱能为我与我的家人提供更好的生活，所以也是最重要的。 问题2：钱对你这么重要，你怎么赚钱？工资，我想绝大多数人（99.9%）都和我一样。 去年，家人患疾，让我意识到，我的这一份工资与重大疾病所需的治疗费相比，是多么的杯水车薪、多么的无可奈何。 所以，我开始谋划睡后收入以及周末收入。 开过网店，验证了做服装生意的全流程，同时也在我的心理埋下了梦想的种子，未来自己也能创建自己的健身服品牌。 并且在去年离职后all in在抖音自媒体创业，做废了两个账号，目前第三个账号顺利运营中，预计下个月可以开始带货盈利。 问题3：你说你从「不那么成熟的成年人」成长成了「成熟的成年人」，能具体说说吗？3个最key的变化。（下文中，将「不那么成熟的成年人」称为前者，「成熟的成年人」称为后者）变化1：前者会恋爱脑，后者不会。变化2：前者不敢大大方方谈赚钱，后者敢。变化3：前者会在意别人怎么看自己（量化一下，应该是100%），后者不在意别人怎么看自己（量化一下，能做到85%，还做不到100%，说明还没有足够强大） 问题4：你对目前的你自己满意吗？以及你希望成为什么样的人？对自己的满意度，打65分吧，属于刚及格。 为什么打65分，是因为做自媒体创业这段时间，我意识到自己身上存在的人性的弱点，列举弱点1：在意别人的看法弱点2：害怕数据差弱点3：容易被焦虑情绪裹挟，导致没有办法好好执行规划 我希望成为什么样的人？生命力顽强的人。不管我身处什么环境，都不会停止往上攀爬。 写在最后大胆往前走，不要害怕困难，不要害怕失败，不要害怕委屈，不要害怕挫折。大胆往前走~","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"LearningToRank","slug":"LearningToRank","date":"2021-07-31T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2021/07/31/LearningToRank/","link":"","permalink":"https://kerryli1007.github.io/2021/07/31/LearningToRank/","excerpt":"","text":"排序学习的模型通常分为单点法（Pointwise Approach）、配对法（Pairwise Approach）和列表法（Listwise Approach）三大类，三种方法并不是特定的算法，而是排序学习模型的设计思路，主要区别体现在损失函数（Loss Function）、以及相应的标签标注方式和优化方法的不同。 总结一下Pointwise、Pairwise和Listwise，三者主要的区别是在训练模型，考察损失函数时候，单次考虑多少篇文章。 一、从搜索引擎说起一般来说搜索引擎包含六大部分: crawler, parser,indexer, link analyzer, query processor, and ranker. crawler从web上抓取网页和文档；parser分析文档和超链接图；indexer对索引和数据进行建库；link analyzer跟据超链接图来分析网页的权重；query processor对query进行处理（类似NLP的工作，切词、改写、term重要性之类的）；ranker是central component，它将处理后的query和检索出的网页进行排序处理。 ranking在信息检索应用中是一个很核心的问题。像是协同过过滤，问答系统，多媒体检索，文本摘要以及在线广告等均有涉及ranking。利用machine learning的方式处理ranking问题即为learning to rank，即LTR. Ranking in Information Retrieval 传统的ranking模型可以分为relevance ranking models和importance ranking models. relevance ranking就是从相关性角度计算出每一个doc和query之间的分值。早期的ranking model就是基于query-terms在doc中的出现次数来计算的。例如Boolean model就是预测doc相关与否，但它不能给出具体的度量值。 二、LTR框架 LTR是有监督学习，因此需要有标注的training set。 在学习系统中，先通过训练集对模型进行训练。 三、Pointwise Approach（单文档方法）1.1 Pointwise是啥在损失函数中，pointwise单次只考虑一篇文章。 在pointwise方法中，每篇文章的得分，独立于这篇文章在整个文档合集中的顺序。 所有的分类、回归场景都可以使用pointwise。 Pointwise的处理对象是单一文档。将单一查询文档对转化为特征向量，相关度作为Label，构成训练样本，然后采用分类或者回归方法进行训练。得到训练模型后，再通过模型对新的查询和文档进行预测，得到相关度得分，最终将该得分作为文档排序的依据。 1.2 Pointwise的缺点Pointwise存在一定的局限性，它仅仅考虑单个文档的绝对相关度，没有考虑给定查询下的文档集合的排序关系。 四、Pairwise Approach（文档对方法）2.1 Pairwise是啥Pointwise只考虑单个文档与查询的绝对相关度，没有考虑给定查询下的文档集合的排序关系。 Pairwise在损失函数中看的是两篇文章的损失函数。Pairwise将重点转向了文档之间的排序关系，它将排序问题转化为文档对&lt;di,dj&gt;排序关系的分类和回归问题。 对于给定查询下的文档集合，其中任何两个相关度不同的文档都可以组成一个训练实例&lt;di, dj&gt;。若di比dj更相关，则该实例的label为1，否则为01，这样就得到一个二分类的训练集。 2.2 Pairwise的特点 Pairwise approaches work better in practice than pointwise approaches because predicting relative order is closer to the nature of ranking than predicting class label or relevance score. Some of the most popular Learning to Rank algorithms like RankNet 翻译总结一下： 1、Pairwise比pointwise表现更好，因为pairwise预测的是文章的顺序，而并不像pointwise，只预测一个得分。 Pairwise方法虽然考虑了文档之间的相对排序关系，但仍然没有考虑文档出现在结果列表中的位置。排在前面的文档更重要。 五、Listwise Approach（文档列表方法）3.1 Listwise是啥Listwise观察整个文档合集的顺序，并且为该文档合集找到其顺序。 参考： 1、深入理解XGBoost：高效机器学习算法与进阶 2、这就是搜索引擎：核心技术详解","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"聊一聊推荐系统的多样性","slug":"聊一聊推荐系统的多样性","date":"2021-07-31T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/07/31/聊一聊推荐系统的多样性/","link":"","permalink":"https://kerryli1007.github.io/2021/07/31/%E8%81%8A%E4%B8%80%E8%81%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/","excerpt":"","text":"一、从业务说起讲一个bad case，前段时间客户投诉了我们的服务，因为视频流场景中，我们的推荐服务连续推荐同一个创作者的视频。 我们的解决方案：portprocess处理，规则是同一发布者的内容不超过1条。 思考用业务语言来描述这个规则应该是怎么样的？ 对于用一个用户，userid，给他推荐的内容，在N刷之内，不能出现同一个创作者的内容多次（≥2）。 这里面重点有： 1、同一个userid 2、N刷之内 3、不能将同一个创作者的内容多次推荐 放在整个推荐链路中，如何实现？首先思考一下，整个推荐链路一共有几步：recall、rank、rerank、业务规则。 总结：这类实现一般放在业务规则层实现。 多样性一个维度是创作者的多样性，还有一个维度是内容的多样性。看一个bad case 背景是：我前段时间研究卧室布置，然后第二天打开我的小红书，好家伙，第一屏，4个都给我推卧室布置。 这是我看到的一个bad case。想一下，为什么这是一个bad case，这为什么不是一个好的case。用户的审美是会疲劳的，如果一直都是同样的内容，用户会审美疲劳。 因此如何在生产生保障推荐结果的多样性呢？ 再总结一下推荐结果同质带来的影响。 从用户体验来看，容易造成审美疲劳和新鲜感下降，进而造成消费下降和流失 从数据收集来看，用户的兴趣被局限，进而无法获得用户对于更多内容的样本，得不到用户级别更广泛兴趣的训练数据 从模型拟合来看，整个大盘的数据分布bias会更加严重，导致模型泛化性变差 从作者角度来看，多样性不足+bias严重导致A品类的作者天生就比B品类更容易分发消费，打击部分作者积极性 从内容生态来看，内容同质化+作者流失最终导致内容品类匮乏 二、多样性是什么？多样性到底是什么呢？ 比如对于我来说，我既喜欢漫威的电影，又喜欢甄嬛传，还喜欢惊悚片。那么为了满足我广泛的兴趣，推荐系统推荐给我的列表，是需要覆盖用户的不同兴趣领域，即推荐结果要有多样性。 多样性是手段，不是目标！ 多样性是手段，不是目标！ 多样性是手段，不是目标！ 重要的事说三遍。为什么多样性不是目标呢？ 1. 多样性很难量化。3个体育新闻+7个小姐姐和7个小姐姐+3个体育新闻，哪个更加多样呢？ 2. 多样性不是越多越好，一次推荐 list 10 篇文章，各是不同的话题的，显然比较多样，但是你确定是更好的推荐结果吗？你肯定会说，多样性要“合适”就好，问题就在这里，合适的点在哪里呢？那一定是通过其他真正的结果指标来告诉你的。 3. 多样性对于每个人，每个场景来说，是不一样的，好坏的点不同。比如说我最近刚有了宝宝，那么我恨不得淘宝给我推荐的商品全都是母婴用品，多样性并不是一个特别重要的事情。 那么哪些指标是合理的呢？ 用户的点击率、阅读时长、留存、分享、互动数据。这是推荐系统的 ground truth，如果可以建立这些 ground truth 和多样性之间的关系，那显然可以去做一些工作 除了上述指标之外，关于多样性，还有哪些可以参考的标准呢？ 以产品信息流为例： 个人侧强调的是用户体感，包括但不限于： 单个用户一刷内多样性（比如小红书的例子，就是一刷内，均是同质内容） 单个用户跨刷多样性 两个用户彼此的差异性 单个用户N天内消费的密集型&#x2F;覆盖度 用户兴趣的迁移程度 系统强调生态，包括但不限于 人均消费的品类数（用户消费了的物料有多少类别） 品类渗透情况 小众作者的发文情况 三、如何保证推荐结果的多样性那么问题来了，工业界我们要如何保证多样性？ 重排。资讯推荐场景，所有物料都是存储在es中。召回阶段从es中，多路召回大概3000篇文章，然后在rank阶段对这些文章进行点击率打分。但是可能会出现一个问题，单纯靠ctr打分，可能会导致得分高，排在前面的，都是娱乐类的新闻。导致用户没有办法看到时政类新闻。那么解法是什么呢？ 将这些文章按照其category类别进行分类，然后通过合适的配比，返回推荐业务需要的内容，合计20篇，比如美食类 * 2，彩妆类 * 1，健身类 * 2，等。广告和运营位可以插在20篇的任意位置。 重排是在recall、rank之后进行的操作，如果我们想优化整个链路，如何实现呢？ 召回层 多路召回。不同的召回策略在多样性等指标上差异较大。 热度降权。常见的基于协同过滤的召回算法(ItemCF、DSSM等)容易导致”热门”推荐”热门”，使得长尾的”利基”Item被淹没。 用户兴趣多样性探索 Rank层 point-wise过渡到list-wise 多目标融合。如果只考虑ctr那么天然适合标题封面党，只考虑finish会利于短且内容密集的视频，staytime利于中长影视，以上还只是用户层面的；如果在融合公式加上作者侧、内容测、长期的指标，也会利于生态建设 总结一下 参考： 1、推荐系统应该如何保障推荐的多样性？ 2、推荐系统-多样性 3、打散算法的三种解决方案及其选型场景 4、推荐中的多样性与生态建设","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"只需3步，快速梳理新的推荐业务场景","slug":"20210727-只需3步快速梳理新的推荐业务场景","date":"2021-07-26T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/07/26/20210727-只需3步快速梳理新的推荐业务场景/","link":"","permalink":"https://kerryli1007.github.io/2021/07/26/20210727-%E5%8F%AA%E9%9C%803%E6%AD%A5%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%E6%96%B0%E7%9A%84%E6%8E%A8%E8%8D%90%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/","excerpt":"","text":"为什么要写这篇文章？ 最近工作中，遇到了一些场景，比如：1、发现部门同学评估推荐场景时候，输出内容不够结构化，导致接手项目的人，不知道当前项目情况；2、部门项目比较多，需要involve一些交付的同学支持，但是交付的同学，缺乏推荐的背景，亟须被赋能。 所以想总结一些简单明了的方法论，沉淀下来，供团队使用，以及赋能交付。 声明，本章节内容简洁，目标是让大家对推荐场景评估这个事，有一个大的认知。因为力求简洁，故没有办法详尽各个模块。 直接切入正题，只需三步，掌握推荐项目评估秘诀。 总结：1、上述是一个非常简单的梳理推荐场景的框架，鉴于其简单，所以容易上手，因为只有开始入门了，才能深入；2、每个模块展开涉及的内容都会非常广，后续会一一详尽介绍。","categories":[{"name":"推荐策略产品必备技能","slug":"推荐策略产品必备技能","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"}],"tags":[]},{"title":"聊一聊新品物料相关","slug":"20210713-聊一聊新品物料相关","date":"2021-07-12T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/07/12/20210713-聊一聊新品物料相关/","link":"","permalink":"https://kerryli1007.github.io/2021/07/12/20210713-%E8%81%8A%E4%B8%80%E8%81%8A%E6%96%B0%E5%93%81%E7%89%A9%E6%96%99%E7%9B%B8%E5%85%B3/","excerpt":"","text":"新品物料，就说不开一个问题，冷启动。 在推荐领域，关于冷启动，一共有三个大的话题： 用户冷启动 物料冷启动 系统冷启动 物料冷启动的策略包括基于物料meta信息、以及ee探索性质的。 但之前一直没有就物料冷启动与推荐系统、还有生态（UGC、PGC）进行详细阐述。 界定本文要讨论的topic： 冷启动的目标 兼顾冷启动的系统设计 一、目标物料冷启动的目标是什么？ 对系统来说，流量价值最大化。流量价值最大化是什么意思？比如我们一共就100个upv。现在进来了一批新物料，我们需要给这些物料曝光。因此我们需要将物料推送给特定的用户。 最简单的解法，直接将新品物料随机分发给用户。这样的直接影响是，由于这样的随机分发，和用户兴趣无关，也同用户当前浏览的资讯内容无关，导致，用户体验差，虽然给这些物料了曝光，但是伤害了用户体验，也造成了流量的浪费。 更好的解法是什么？1）构造物料的静态画像，基于内容，即上文说到的基于物料meta信息2）基于物料本身的信息评估物料的质量，比如小红书场景，图片是否高清、文本语言是否通顺，是评估笔记质量的重要标准。3）召回时候不要完全随机召回，也需要by一定语意召回。什么意思呢？就是说，比如最简单的做法，当用户西蓝花发了一篇健身类的笔记，完全随机的召回，就是将这篇文章随机推荐给500个用户，给500个pv，但是很可能这500个人都没有健身的兴趣，所以对于这篇物料来说，show 500，click 0。这样的流量分发就是效率低下的，浪费了500个pv，一来没有给物料积累正确的反馈数据数据，二来带给了用户不好的体验。所以更好的做法是在召回时候，by一定语义召回。基于内容做一定语义召回。 总结一下：在新物料曝光这个过程中，将物料分发给可能对该物料感兴趣的用户；对内容侧的画像丰富是按照其内容质量进行等级划分，决定给这个物料多少pv。（比如我在抖音的一些视频，自然流量，差不多是500；另一些like、comment多的，自然流量会有5w） 上述讲的所有，最终评估的指标包括： by 用户维度的 ctr（click&#x2F;show）、人均停留时长（内容消费深度）等 更好解法的好处： 带给用户更好的体验 为物料积累准确的数据 思考，因为我经常用小红书、抖音，根据我自己也做推荐系统的经验，这两个平台是怎么做物料冷启动的？ 基础流量：基础流量的意思就是，给定一条新物料，一定次数的曝光（PV数），这个流量的pv数，抖音给的大概在500，小红书给的大概在100.什么意思呢？如果一条抖音视频数据如下，show 500，like 20，comment 1-2，基本上这个数据表现，平台不会再给流量了，即抖音不会继续将这条视频分发给更多的人了。所以，基本上show 500就是判断这个视频是否需要继续被分发的关键，那么如何精准地分发这给这500个pv就非常重要。 如果在500pv数据的基础上，这个视频的表现非常好，like高、comment多，且comment中有很多艾特，说明这条视频质量高、传播性强，那么这个时候，平台会不断给这个视频流量。 多说一点，我两个月前发过一条视频，抖音给了6w show，比较神奇的是，当时这条动态没有任何关键词描述，就随便配了几个与视频内容也不符合的字，说明抖音在构造物料画像时候，是可以基于视频内容做理解的啊。 二、系统设计如果是我，我要怎么设计？ 从物料的视角，先了解推荐系统的数据流。 大家好，我是创作者西蓝花创作出来发布在小红书的笔记，系统给我的编号是A00001。 系统将我推荐给了100个用户，这100个用户在推荐主站看到了我，但是没有人点击过我。接着，我就再也没有出现再过推荐首页了。 大家好，我是创作者西蓝花创作出来的物料，系统给我的编号是A00002.系统将我推荐给了100个用户，这100个用户在推荐主站看到了我，50个人点击了我，30个人收藏了我，20个人like了我。10个人comment了我。接着，我在推荐首页被推荐给了更多的人，我第一次被这么多人看到。很多人看到了我，然后关注了西蓝花，她可开心了。暗自下定决心，要创作更多的更好的内容发布在小红书平台。 对于小红书这个推荐系统而言，从物料质量划分维度，A00001的质量低，A00002的质量高。A00002质量高的表现有哪些？如何量化A00002的质量高？ 点击率高，点击率 &#x3D; 50 &#x2F;100 &#x3D; 50% 收藏率高 like率高 comment高 所有这些指标带给平台最直接的收益是：用户在平台的停留时长更长，因为用户在单篇物料上停留时间长。 我们再来看一个推荐系统不太准的系统 我是一个健身物料，但是系统将我推荐给了100个，不爱健身的人。他们对我也没有什么兴趣，因此我只获得了500个show。我是一个制作很精美的化妆视频，系统将我推荐给了100个对化妆没有兴趣的人，他们对我也没有什么兴趣，因此我只获得了500个show。 这样的结果是什么，西蓝花作为创作者的创作兴致直接被打压 &#x3D; &#x3D; 话说回来，从我一开始玩短视频，本来是快手和抖音一起玩，发生1件事，让我直接放弃掉了快手。 2021.5.15在快手和抖音分别发了同一条内容，抖音给了6w pv，快手给了500pv。抖音涨粉了1000，但是快手涨粉0。这件事直接让作为创作者的我不再使用快手的直接原因。 说回来那条动态，都是一条视频，配图都是“随便拍一下”，但是抖音似乎直接将这条动态推送给了感兴趣的人，快手就弱一点，没有做好冷启动。所以，冷启动阶段的精准匹配实在是太重要了。（个人陋见，也有可能我发的内容，快手不喜欢，而不是快手的精准化匹配不好。 不过，新物料的精准分发确实是非常重要。 那么系统要如何更好地支持物料冷启动？ 目标是什么？指标是什么？（If you can not measure it, you can’t improve it) 被分发出去新物料的用户的点击率、人均浏览时长。 点击率（ctr），衡量的是，比如我分发了100个item，其中有多少个被点击了，但是考虑到标题党可能存在，所以不能只看ctr 还需要看人均物料浏览时长。 3、7日留存。 要让ctr好、人均物料浏览时，就需要做到推荐得准。在文本领域，和朋友沟通，了解到知乎的新品召回也是by语意topic。 最后总结一下： 通过提升新item分发精准度提高新物品分发的效率。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"聊一聊相关推荐","slug":"20210711-聊一聊相关推荐","date":"2021-07-10T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/07/10/20210711-聊一聊相关推荐/","link":"","permalink":"https://kerryli1007.github.io/2021/07/10/20210711-%E8%81%8A%E4%B8%80%E8%81%8A%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90/","excerpt":"","text":"界定一下本文讨论的topic： 什么是相关推荐 市面上产品的相关推荐 为什么需要相关推荐 从产品设计视角看相关 如何衡量相关推荐效果好坏 相关推荐的数据流 从物料视角看相关推荐 过去埋藏在地下，挖出来时是煤炭，是你今天的炉火。 一、什么是相关推荐如果两个item的相似度高，可将其理解为相关推荐。具体一点： 资讯场景：两篇讲离婚类的合同。 电商场景：intoyou的唇泥和维姿的唇泥。上述场景的相似度判断标准均从item本身的特质进行判断，技术上为content based相关计算。 但是如果上述item本身的特征少，那我们可使用cf的技术实现手段。 备注：了解content based算法以及cf算法的适用场景，以及优缺点是必备的。 二、市面上产品的相关推荐2.1 资讯调研今日头条和腾讯新闻的相关推荐模块 相似之处 ner 命名实体识别（Named Entity Recognition，简称 NER），又称作“专名识别”，是指识别文本中具有特定意义的实体，主要包括人名、地名、机构名、专有名词等。在推荐场景下，NER是深度查询理解（Deep Query Understanding，简称 DQU）的底层基础信号，主要应用于item召回、用户意图识别 差异之处 今日头条的相关推荐栏位包括i2i、u2i，并且会实时更新用户基于搜索框呈现出的短期兴趣（相隔1-2刷） 腾讯视频的相关推荐栏位暂且只覆盖i2i，且不会实时更新用户基于搜索框呈现的短期兴趣（相隔1-2刷） 总结一下：相关推荐出来的内容不一定必须是有相似度的，主要看产品如何定义，相关推荐场景也可以被叫做持续消费场景。 （善于总结，让读者或者听众快速get到自己表达的点，对别人友好，对自己也友好） 2.2 视频（B站）视频内容详情页的推荐栏位总结：视频推荐场景有做很明显的基于视频内容的推荐。 三、为什么需要相关推荐我们思考一下，如果没有相关推荐，用户的使用操作链路。 资讯场景用户小西进入主站，通过推荐或者搜索发现自己喜欢的文章，点击进入浏览。浏览完毕，退出。继续通过主站推荐或者搜索的方式发现自己喜欢的文章。 这样操作的影响： 用户操作成本高，难以找到感兴趣的文章 体验不流程。综上，都不利于用户在平台停留时间长。 短视频场景：短视频场景的用户链路同上。 总结，相关推荐场景的用途是延长用户在平台的停留时长。所以这个场景也可以叫做持续消费场景。 四、从产品设计视角看相关所有产品设计都是围绕业务目标开展，我们的业务目标是延长用户在平台的停留时长。所以我们希望在用户消费完一个物料时候，立马给对方推她可能感兴趣的第二个、第三个item。所以有了如下的设计版式： 底部推荐栏位 侧边推荐栏位 我是抖音、小红书的深度用户，最近刷视频有一个很火的概念，叫做沉浸式护肤&#x2F;化妆，同理在推荐场景中，借用这个概念，这样的推荐产品形态设计，带给用户的体验式沉浸式阅读，不要被打扰。 五、如何衡量相关推荐效果的好坏当相关推荐的效果很差时，比如用户明明在浏览健身类文章，但是给用户推荐了离婚类文章，用户还是单身狗呢。这样的场景，可以直观通过肉眼分析bad case来判断推荐效果的好坏。当然，也要关注线上指标，包括ctr、uctr（有多少占比的用户有点击行为），人均文章停留时长。 注意哦，在做优化的时候，千万不能只关注ctr，因为ctr高和推荐结果质量没有不是正相关，很极端的场景，都推标题党，点击率就上去了，但是用户体验其实很差。分析一下，如果用户点击了标题党文章，下一个直接动作是什么，肯定是回退出当前文章，所以用户在当前文章的浏览时间是很短的，因此可以有辅助指标，用户浏览单篇文章的时长，浏览时长也是衡量浏览深度的一个指标。 当效果已经很好，要做的是fine tune的时候，肉眼不太能再辨别效果是否更好，就需要进行线上分流实验，关注线上指标，包括ctr、uctr、人均文章停留时长。 六、推荐策略的数据流召回、排序、业务规则。 排序一般怎么做？模型是一个比较抽象的词，是指对一种映射的抽象描述，即 f（context，user，item）—&gt; score。衡量一个模型的好坏，就是假设出来的这个映射关系和真实内在关系的距离。 但是上述方式的表达能力弱，参考下述排序模型发展史总结一下：特征工程以及特征工程的自动化，一直是推动实用化推荐系统演技的主要方向。 这个topic，新开文章单独写。 七、从物料视角看相关推荐这个topic，参考我的另一篇文章，聊一聊新品物料相关。 参考链接： https://segmentfault.com/a/1190000039404377","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"于黑暗中作光明","slug":"20210708-于黑暗中作光明","date":"2021-07-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/07/07/20210708-于黑暗中作光明/","link":"","permalink":"https://kerryli1007.github.io/2021/07/07/20210708-%E4%BA%8E%E9%BB%91%E6%9A%97%E4%B8%AD%E4%BD%9C%E5%85%89%E6%98%8E/","excerpt":"","text":"如果你觉得四周黑暗，那么说明你自己不是一盏明灯。 一、两则对话分享和老板的对话。 【第一则】 - 老板：你的目标就是变得更牛逼。 - 我反问：怎么才能算是牛逼一些，如何才能牛逼一些？ - 老板答：你靠自己就能把项目run下来，其他人都是你的工具人。 【第二则】 - 我：项目总是不一帆风顺。 - 老板：怕啥，总有路的。 这两则对话，非常简练。但于我，非常inspring。一是让我继续保持乐观的态度，车到山前必有路；二是让我开始意识到我的目标可以非常简单，就是实现一个又一个的目标，实现目标的过程中，其他人都是我的工具人，都是我的资源。 二、于暗夜中为作光明最近为团队做了一些贡献，帮助团队在当前较混沌的时刻，找到了一些确定的事，以及接下来的前进方向。 能为团队做这样的贡献，分外荣幸，希望能多为团队做贡献。于暗夜中为作光明。 备注：我自己的笔记是记录了这件事的详细过程，发布在Blog上，因此做了隐藏。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"推荐策略产品必备技能之推荐算法原理（上）","slug":"推荐策略产品必备技能之推荐算法原理（上）","date":"2021-05-29T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/05/29/推荐策略产品必备技能之推荐算法原理（上）/","link":"","permalink":"https://kerryli1007.github.io/2021/05/29/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"工业界的推荐算法链路，通常是召回、粗排、精排。 一、召回在召回章节，我的构思书写思路为 多路召回 每路召回的具体实现 召回与过滤 推荐系统的召回阶段是根据用户的数据（静态数据，历史行为数据），为用户在海量的候选集中粗选一批待推荐的内容。在实际应用中，召回模块一般都是多路召回的架构。这样设计主要出于如下几点的考虑 考虑用户层面。 考虑系统层面。增强系统的鲁棒性，部分召回实效，其余召回队列正常工作，不会导致整个召回层失效。 考虑多样性内容分发。图文、视频、小视频，精准、试探、时效各占一定比例。召回目标的多元化。 可解释性，某一部分是有明确的推荐理由的。 比如京东电商推荐的召回 这些召回规则对于特定的场景都是通用的，但是问题来了，有的用户是有一些反馈记录的，比如截图一个抖音主页推荐，我对一些推荐的视频是有明确的负反馈的，如果这类视频再推荐给我，是非常伤害用户体验的，所以这个阶段，会进行一个过滤。 过滤之后，会对召回出来的物料进行模型排序。 在上篇，主要讲一下召回。每一路召回的目标是不一样的。 比如在电商场景，常见的召回有 基于内容的召回 协同过滤召回 基于模型的召回 DSSM召回 1.1 基于内容的召回基于内容推荐的基本思想是为用户推荐与他感兴趣的项目内容相似的项目，即发掘用户曾经喜欢过项目的特征，并推荐类似的项目。 基于内容的推荐系统主要包括：项目建模、用户建模、产生推荐。 一般来说，物品都有一些关于内容的分类，电影有战争、科幻、爱情等。基于内容的推荐，就是根据这些物品的内容属性和用户历史评分或操作记录，计算出用户对不同内容的爱好程度，再根据这些爱好推荐其他相同属性的物品。 内容推荐的基本方法有如下4个步骤：1）内容表征（item representation）：为每个item都抽取出一些特征来表示此item；2）用户偏好计算：利用过去一个用户的显式评分或隐式操作，计算用户不同特征上的偏好分数。3）内容召回：将待推荐物品的特征与用户偏好得分相匹配，取出用户最有可能喜欢的物品池4）物品排序：按用户偏好召回物品池 步骤一：内容表征从文章内容中抽取出一些代表他们的属性，最常用的方法就是利用出现在一篇文章中的词来代表这篇文章。item会有一些属性对它进行描述，这些属性通常分为两种：结构化与非结构化信息。 比如电影类别特征，例如可选的电影类别有：爱情、剧情、科幻、战争、中国、日本、韩国、美国，合计8个类别。《银河护卫队》同时具有科幻和美国2个内容特征，那么它的结构话特征可用一个8位的二进制数表示如下： 对于一些非结构化的内容，需要进行处理，提取出相对应的特征。 比如对电影，具有如下字段：电影ID（id）、标题（title）、上映时间（year）、电影类型&#x2F;标签（genre，基因）、指示（indicators）、indicators数组的数量（numFields）： 12345678&#123; &quot;id&quot;: &quot;65006&quot;, &quot;title&quot;: &quot;Impulse&quot;, &quot;year&quot;: &quot;2008&quot;, &quot;genre&quot;: [&quot;Mystery&quot;,&quot;Thriller&quot;], &quot;indicators&quot;: [&quot;154&quot;,&quot;272&quot;,”154&quot;,&quot;308&quot;, &quot;535&quot;, &quot;583&quot;, &quot;593&quot;, &quot;668&quot;, &quot;670&quot;, &quot;680&quot;, &quot;702&quot;, &quot;745&quot;], &quot;numFields&quot;: 12&#125; 一般这些数据都是放在es中，便于索引。关于这些数据在es中，如何做索引的，暂时还没有进一步做研究，后续补充。 步骤二：用户偏好计算，比如在电影场景，我们可以分析用户西蓝花在过去一周的行为。来计算user_behavior_profile。步骤三：内容召回，根据用户偏好召回对应内容。步骤四：物品排序，最后进行排序， 基于内容的推荐方法，优点 物品没有冷启动问题，因为物品的内容特征不依赖用户数据 原理简单，易于定位问题. 缺点： 依赖于物品的meta信息，如果物品的信息较少，则无法做出推荐 3.2 协同过滤协同过滤做的是一件什么事？协同过滤根据用户的历史数据，计算用户之间的相似度，计算item之间的相似度，然后基于这些相似度给用户做推荐。协同过滤强依赖用户行为！协同过滤强依赖用户行为！协同过滤强依赖用户行为！ 协同过滤分为基于用户的协同过滤和基于物品的协同过滤。 协同过滤的思想：1）抽象一点，物以类聚，人以群分。2）具体一点，西蓝花和短短都很喜欢健身，也都很喜欢好看的legging和运动背心，短短买了一件新款legging，西蓝花也有很大可能喜欢。 3.2.1 用户协同过滤（user-to-user collaborative filtering）上述截图页面，就是一个典型的用户协同过滤页面，购买过《深度学习推荐系统》的人还购买过什么。一点题外话，仔细分析一下这个推荐页面，可以发现这个推荐是没有经过业务逻辑处理的。 原因有2:1）《深度学习推荐系统》是我目前已经加购到购物车的商品；2）《智能搜索和推荐系统：原理、算法与应用》《推荐系统与深度学习：新时代技术新未来》是我过去两周才购买了的商品。 不过，或许京东推荐团队有其他考虑～ 用户协同过滤更详细流程：1）找到和目标推荐用户相似的用户群A；2）找到用户群A购买的商品集合B；3）从商品集合B中减目标用户已经购买过的商品，得到C；4）计算商品合计C中商品，目标用户的点击率；5）最后添加一些业务逻辑规则 比如豆瓣电影的“喜欢这部电影的人也喜欢” 3.2.2 物品协同过滤（item-to-item collaborative filtering）物品协同过滤的核心是给用户推荐那些和他们喜欢的物品相似的物品。 比如当当网的经常一起购买的商品。","categories":[{"name":"推荐策略产品必备技能","slug":"推荐策略产品必备技能","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"}],"tags":[]},{"title":"推荐策略产品必备技能之推荐系统框架（下）","slug":"推荐策略产品必备技能之推荐系统框架（下）","date":"2021-05-25T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/05/25/推荐策略产品必备技能之推荐系统框架（下）/","link":"","permalink":"https://kerryli1007.github.io/2021/05/25/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8B%EF%BC%89/","excerpt":"","text":"在上一篇，我们聊了推荐系统框架是怎么样一回事，在本篇，我们来学习一下数据流。 一、概括为什么要了解数据流？ 对于一款非常复杂的产品，比如像推荐系统这块由多个模块组成的产品，只有了解了其数据流，才能知道这个系统是如何运作的。 对于产品经理自身而言，只有了解了整体数据流，才能增强自己对复杂产品设计的把控能力。 二、推荐系统数据流1. 背景Brief要了解推荐系统的数据流，首先需要知道，对于一个推荐系统，主要的数据模块。可以将其抽象成3个模块：用户数据、物料数据、用户行为。 2. 推荐系统目标对于一个推荐系统，它的目标是什么？通过两个case来了解。 1）Case 1：资讯场景 比如资讯场景业务目标是点击率。点击率的计算逻辑 &#x3D; click &#x2F; show。 那为了提升点击率，我们需要哪些数据实现目标？ 静态数据：用户表、物料表。 用户行为数据：用户行为数据。 聚焦到用户行为数据，如何定义哪些是正样本、哪些是负样本。 需要注意的是，在行为数据定义时候（样本定义时候），经常出现的几个show虚报的问题： 推荐结果即show。推荐结果即show的意思是，比如一个相关推荐场景，后台服务器一次给出的预测结果是10条数据，客户端只展现了4条。为了图方便，客户的上报show的逻辑是将所有的返回推荐结果都上报为show。 加载即show。在信息流场景，往往需要预加载。但是很多预加载的item，实际上尚未被展示。客户的埋点逻辑是加载即上报show，因此会导致show虚高。 信息流上下滑动。在信息流场景，还经常出现的一个问题是，用户经常上下刷动，所以同一物料会有多次曝光，建议上报时候做去重设置。 2）Case 2：小视频场景 比如小视频场景，建模目标是完播率，即视频的播放时长&#x2F;视频的总时长。 3. 推荐系统如何实现业务目标将推荐系统实现业务目标拆分成两条数据流来理解，在线数据流和离线数据流。 1）在线数据流 在线数据流是指一个请求进入到推荐系统到给出预估结果的流程，参考下述示例图。 接着进一步了解在线数据流。 用户来到APP，打开APP，这个时候前端会像服务器后端发送请求，接着服务器后端会像推荐系统（SaaS服务）发送请求。 推荐服务接受到这个请求，会先进行load balance，接着后端处理，在后端处理分为算法和规则，算法即召回和排序，规则即rerank。 根据2.2的描述，我们知道，对于一个推荐系统来说，都有其特定的目标，当我们完成目标确认后，比如提升点击率或者完播率。 接着就可以开始建模了。假设模型已经ready。来看一下推荐系统的在线流程～ 召回（Recall）：召回的作用是从整个物料库中，通过某一种&#x2F;多种策略，快速召回一小批物料，供后续模型打分使用。 排序（Rank）：排序是将前一个阶段召回的物料进行模型排序。 重排（Rerank） 重排是什么？ 重排是基于排序环节的打分结果，对上述结果再次进行排序。 为什么需要重排？ 在上一个环节，排序做的事本质上是预测用户对物品该兴趣的概率，考虑的只是物品与用户之间的关系，但是忽略掉了物品之间的相关性。 如何理解呢？分享一个极端的case，小红最近酷爱刷电影剪辑类小视频，模型学习的话，很可能学出来最后给用户推荐的都是同一个publisher的10条item。 这样肯定是不行的，试想，如果你正在刷抖音，连续10条都给你推荐同一个博主的内容，这个体验能好吗？所以需要rerank。 重排环节一般会做什么？ 重排阶段是个策略出没之地，就是集中了各种业务和技术策略。比如为了更好的推荐体验，这里会加入去除重复、结果打散增加推荐结果的多样性、强插某种类型的推荐结果等等不同类型的策略。 2）离线 什么是离线数据流呢？模型训练以及模型的更新都是离线数据流完成的事。 离线模型的训练以及模型的更新，涉及到多个数据模块的配合，包括用户画像、物料画像、行为日志，离线数据流，我们下章节见～","categories":[{"name":"推荐策略产品必备技能","slug":"推荐策略产品必备技能","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"}],"tags":[]},{"title":"推荐策略产品必备技能之推荐系统框架（上）","slug":"推荐策略产品必备技能之推荐系统框架（上）","date":"2021-05-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/05/22/推荐策略产品必备技能之推荐系统框架（上）/","link":"","permalink":"https://kerryli1007.github.io/2021/05/22/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"本模块的目标： 梳理推荐系统框架 梳理推荐系统框架中的各个模块的实现 理解推荐系统的数据流 一个推荐系统，大致分为4层，分别是离线层、存储层、近线层和在线层。离线、近线和在线的区分在于响应用户行为的速度差异。 一个经典的Web推荐系统的架构，主要包括如下四部分： 推荐服务：该服务从Web服务器获取推荐请求，然后返回推荐结果。 存储系统：这些系统存储用户特征、物品特征和模型参数，为了方便检索，也存储了物品索引。 离线学习： 该组建从用户行为数据中学习模型参数，然后按照一定的周期将参数推送到在线存储系统中。 物品特征学习 用户特征学习 在线学习： 推荐服务模块的功能是对来自业务的request进行预测。比如，我这会打开抖音，抖音后台会发送一个request给服务器，服务器接收到这个request之后，会根据过去我在抖音上的行为偏好，为我推荐向我可能感兴趣的短视频。 存储系统的功能是存储用户特征、物品特征、以及物品索引。 离线学习的功能包括：模型训练、物品特征、用户特征计算。 模型训练是指给定用户和物品，以及用户对该物品的响应数据，来训练模型参数，这个过程一般需要耗费好几个小时的时间。 物品特征是比如对于非结构化数据，经常需要对这些数据进行TF_IDF计算，这个也是在离线层进行。 用户特征也是。 在线学习 的功能是利用用户的即时数据进行预估。来看一个经典的推荐系统架构的设计 这是Netflix的推荐系统架构，这个架构的设计目标是：1）支持好的用户体验，且能支持快速的迭代；2）针对用户的行为，作出快速的响应。 在这个设计中，计算被分为了离线、近线和在线。 计算可以离线进行、近线进行、也可以在线进行。对于用户产生的最新行为，在线计算能更好地进行反馈，但是在线必须实时进行反馈。这样的话，就对算法的计算复杂性有很大的限制，同时，也会限制能处理的数据量。 离线训练能处理较大的数据量，且不要求必须是实时的。模型的更新一般是离线进行的，在模型的前后两次更新这个时间窗口中，由于没有进入新的数据，所以这个模型一直使用的是旧的数据。对于推荐系统架构最关键的因素是如何将在线和离线计算无缝结合。 近线计算是在上述两者之间，在近线计算，我们可以执行类似在线的计算，但不要求实时响应。","categories":[{"name":"推荐策略产品必备技能","slug":"推荐策略产品必备技能","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"}],"tags":[]},{"title":"我理解的推荐策略产品之必备技能","slug":"我理解的推荐策略产品的必备技能","date":"2021-05-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/05/21/我理解的推荐策略产品的必备技能/","link":"","permalink":"https://kerryli1007.github.io/2021/05/21/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E7%9A%84%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/","excerpt":"","text":"梳理我对推荐策略产品的理解。 一个60分的推荐策略产品经理，我认为，至少需要具备如下能力模型： 推荐系统框架 推荐算法原理 业务产品设计 数据分析能力 项目管理能力 对推荐系统框架的理解，至少需要掌握：a 推荐系统架构； b 整个推荐系统的数据流。对推荐算法原理的理解，至少需要：a 了解CTR常见算法，以及其演化历史；b 对各种算法策略的适用场景，优缺点有自己的思考业务产品设计，这一层比较抽象，我的理解是说，产品需要了解自己产品上用户的特性，根据用户的特性，设置对应的推荐场景，并根据数据表现，调整该场景的策略，这就是能力模型4的数据分析能力。最后一个能力是项目管理能力，项目管理能力是很多产品经理都忽略了的能力。在项目管理这一层能力上，我主要想强调的是：a 资源协调能力；b 风险管理能力 对每个能力的阐述，我都会按照从理论到实践的套路来阐述。废话不多说，让我们开始吧～Enjoy。想写推荐策略产品经理的话题 PS：有一段时间了，一直都没有好的思路，最近深入经营我的抖音账号，粉丝超过了1000，开通了创作者服务平台，在数据中心，有一个账号诊断模块，从5个纬度分析了我的账号，分别是播放量、完播率、粉丝净增、投稿活跃度，和互动指数，如下图。这也是我将策略产品经理的必备技能拆分为上述5个维度的灵感来源。","categories":[{"name":"推荐策略产品","slug":"推荐策略产品","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81/"}],"tags":[]},{"title":"价值就是去解决问题","slug":"20210509-工作就是去解决问题","date":"2021-05-08T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/05/08/20210509-工作就是去解决问题/","link":"","permalink":"https://kerryli1007.github.io/2021/05/08/20210509-%E5%B7%A5%E4%BD%9C%E5%B0%B1%E6%98%AF%E5%8E%BB%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/","excerpt":"","text":"一、为什么想到写这个话题最近看玉伯的文章《价值就是去解决问题》，摘录了其中和我价值观高度一致的两段话。 一个岗位的价值，就看能帮助公司解决多少问题。蚂蚁的产品体验，特别是商家侧的用户体验，很痛，设计师是否能推动各方去解决这些痛点？很难，但本就没有容易的事。一年推动不起来，就推动两年，两年不行就再花五年去推动，不断找人去聊，去一点一点解决，帮助公司解决的问题越大，价值就越大。价值做出来，加薪晋升等等就是自然而然的事。不用去抱怨什么，去比较什么，多想想怎么解决更多问题，去为公司为客户产生更大价值。 解决问题能获得巨大的满足感和成就感，比其他事情有意思多了。这种满足感，会让人着迷，会活着活着发现解决问题就是人生的意义所在。获得满足感不一定能获得幸福感，幸福感是一个更高级的词汇，成就感是由己及他的满足，幸福感是由他及己的福报。去帮助到的人越多，流动的情感就会越多。 因为觉得这两段话非常符合我的价值观，所以也想展开并结合我自己的工作聊一聊。 二、“挺好的呀，你就是来帮他解决问题的，这就是你的价值。”我于4月1日加入了公司另一个部门。 4月中旬，我在电梯口遇到了公司交付负责人。她笑着和我说：“我看你在新部门表现挺好的，在某某项目上，很不错”。我笑着摇摇头说：“不算好，这个项目还是有很多问题。”她接着说：“你的价值就是来帮某某（部门老大）解决问题的呀。等你能把所有项目上的问题都解决了，不事事都去麻烦某某（部门老大），你就成长了，你也能创造更大的价值。“ 是。我的价值完全取决于我能解决多大的问题。 恍惚间，觉得这一两年的成长太大了。以前总是害怕遇到问题，问题还没有发生，我自己都把自己吓死了。现在面对问题，已经完全没了恐惧。 我有一名好友，推荐领域的算法工程师，前不久被B站以高薪挖走，需要离开北京去上海。在他临走前，一起吃了顿饭。 饭桌上，我问他，你对什么负责？他说，业务指标啊，比如人均浏览时长啥的。我手，你觉得有什么样的能力，让你能对这些指标负责。（其实我本来想问一些干货他的回答说，要是不能对这些负责，我要不直接和老板说我不干了。（哈哈哈 言归正传。有问题，才有机会。能解决多大的问题，就能创造多大的价值。 三、如何才能解决问题这是一个很大的话题，我只能凭借自己的经验，尝试寻找其中的规律，做一些总结。 心态我觉得能做到解决问题的第一步，一定是心态上的调整。从害怕遇到问题，到遇到问题，沉稳淡定。 周五晚上，坐在研发leader旁边（最近我都把工位搬去了研发身边，哈哈哈），他问我，我看你朋友圈发了最近都很开心，你为啥都那么开心？我想了想说，每天解决问题，也是快乐的来源呀。他说，那不错，你的底层操作系统很好。 其实就是心态，每天工作中有很多问题，遇到问题的时候，我是将其视为，解决了这个问题，我职场技能又提升了，还是将其视为我不顺职场路的来源，这两种心态，有本质的区别。我觉得这是最关键的影响。 硬技能在这里的硬技能，我着重想分享的是，思路。 解决问题的过程中，会发现，问题和问题之间，相互关联。所以，在解决问题的过程中，需要1）明确我要解决的问题是什么，或者说我的假设是什么2）和这个问题相关的，我收集到的信息有哪些3）为了验证我的假设，我需要做什么，每一步的假设是什么，每一步的产出是什么？","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"2021_Q2_Week5_工作总结","slug":"2021-Q2-Week5-工作总结","date":"2021-05-08T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/05/08/2021-Q2-Week5-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2021/05/08/2021-Q2-Week5-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"本周工作关键词：工作效率、团队赋能 在上周的工作总结，我有强调到，对于未来我每周写的工作总结，会对模版有调整。具体来说，是都要包括如下2部分： 方法论 干货篇同样在方法论和干货篇中，会特别突出强调WHY。 一 方法论1.1 提升工作效率为什么要提升工作效率？ 答案是不言而喻的。 如何才能提升工作效率呢？从自己的工作中，我总结了一些经验。这些经验，可以1）目标量化2）规划具体到天粒度3）提前将任务的操作步骤制定 因为上述经验的应用case，涉及到工作细节，就不在周报中详细描述。 1.2 为团队赋能研发leader最近和我沟通了一下我的工作。 总结一下就是1）不能事事都我自己干，最后我很牛逼了，但是别人没有成长2）当我事事都自己干，这样项目和产品的blocker就在于我 具体怎么做呢 可预期的结果是什么呢？ 二 干货篇1.1 报错code与问题定位HTTP Status Code是用以表示网页服务器超文本传输协议响应状态的3位数字代码。 更多细节参考 HTTP状态码 - 维基百科，自由的百科全书","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"2021_Q2_Week4_工作总结","slug":"2021-Q2-Week4-工作总结","date":"2021-05-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/05/04/2021-Q2-Week4-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2021/05/04/2021-Q2-Week4-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"很久没有写工作总结了，得拾起来。 本周关键词：数据流、解决问题、埋点 一、数据流年初时候，和商汤的一位PM沟通。彼时的我，还在负责云OCR的GTM。 当时我们的沟通内容如下。 商汤PM：你知道你负责的OCR返回的结果是什么吗？ 我：我知道，是对文本的所见即所得的识别内容。 商汤PM：他们是什么样的形式存在？这个你了解吗？ 我：你指的形式具体是指的什么？ 商汤PM：你的ocr识别结果是什么？ 我：是一个json文件。 商汤PM：这个json文件中，包含哪些部分。客户请求的时候，这个json中有哪些部分，你返回给客户的json中有哪些部分。 我瞬间明白，商汤PM在这里问我的是，我的云ocr服务是如何与客户产生交互。 在回答上述问题之前，我想recap两个知识点，分别是软件集成和HTTP。 1.1 软件集成去年冬天，和NLP Leader沟通我们为客户提供服务时候，他和我讲到，当客户想将我们的AI能力，集成到他们的系统，有两种方式：一是直接将我们的代码写进他们的系统，二是调用我们的API。前者成本高昂，所以在实际业务中，我们接触更多的是后者。那么后者就需要，双方对彼此接口的内容，做一致的约定。 这里涉及到一个知识点，叫做软件架构。划重点，软件架构。 应用程序架构的关注点是应用程序，通常包括将应用程序解构为类和组件，确保设计模式的正确应用。本质上应用程序架构谈论的是软件设计的低级别切面。 系统架构是更大规模的应用程序架构。大多数软件系统实际上是由横跨不同层次和技术的多个应用程序组成。举个例子，你可能有这样一个软件系统，Java EE中间层消费Oracle数据库提供的数据，同时向.NET Silverlight客户端提供Web服务。每个部分都有自己的应用程序架构。 要让整个软件系统工作起来，就要思考如何组合这些单独的应用程序。换句话说，要有端到端的软件系统在较高层次上的整体结构。大多数软件系统都不是孤立的，因此系统架构还关注互操作系统和与环境中其他系统的集成。 《程序员必读之软件架构》 1.2 HTTP接口调用。接口调用在我工作中，太常见了。常见到我都以为，我完全了解接口调用是怎么一回事，其实并没有。对于接口调用，我是说不出来123的。讲一个题外话，如何在简单的工作交流中，让别人知道，你有没有点东西。我的理解就是，在和别人沟通一个问题的时候，要讲出一个123。上周就接口调用的问题和我司一位非常厉害的架构师沟通。在我阐述了我的困惑之后，他逻辑非常清晰地讲出了，要解决这个问题，我要做的步骤123，以及每个步骤的背后逻辑。（ 言归正传，回到接口调用。首先，理解一下接口调用是一件什么事？API是一件属于网络基础的事。 Web浏览器、服务器和相关的Web应用都是通过HTTP相互通信。HTTP是现代全球因特网中使用的公共语言。 1.2.1 HTTP ——因特网的多媒体信使1.2.2 Web客户端和服务器Web内容都是存储在Web服务器上的。Web服务器所使用的是HTTP协议，因此经常会被称为HTTP服务器。 1.2.3 资源一个HTTP事务由一条请求命令和一个响应结果组成。这种通信是通过名为HTTP报文（HTTP message）的格式化数据块进行。 HTTP支持不同的请求命令，这些命令被称为HTTP方法（HTTP method） 每个HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数的代码，告知客户端请求是否成功。 那HTTP的设计思路是什么样的呢？ 在报文编码方式上，HTTP采用了面向程序员的文本（ASCII）编码方式而非面向计算机的二进制编码方式。 HTTP是无状态的请求-应答协议。无状态的设计是个严重缺乏前瞻性的设计，但考虑到在HTTP诞生之初网上没有什么资源，也根本不存在可以跟用户交互的网站，因此这个设计思路也是完全可以理解的。最初的HTTP（0.9版）只提供了GET方法，这是因为其作者认为网上所有的资源（网页）都是静态的，远程用户是不能修改的，浏览器所能做的就是从远程服务器上“获取（GET）”指定网页并以只读方式展示给用户，在用户获取网页之后就立即中断与服务器的连接，从而节省宽带与服务器的宝贵资源。 随着Internet的加速发展，特别是图片和音视频等多媒体内容的出现和流行，原先只面向文本资源对象的HTTP已不能满足人们的需求，所以HTTP做了一个较大的升级（1.0版）：首先，增加了POST方法，使得客户端可以i提交（上传）文件到服务器端；其次，通过引入Content-Type这个Header，支持除文本外的多媒体数据的传输支持。 《架构解密：从分布式到微服务》 1.3 回答商汤PM的问题梳理了软件集成和HTTP之后，我来尝试回答商汤PM的问题 1.3.1 客户请求客户请求类型：Post。 请求代码，涉及隐私内容已删除！ 1234567891011121314151617181920212223242526# coding=utf-8from requests import postimport base64import osflask_server = &#x27;https://ocr.xilanhua.com&#x27;predict_url = os.path.join(flask_server, &#x27;/ocr/predict/ticket&#x27;)headers =\\ &#123; &quot;Authorization&quot;: &quot;Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiNWszTjBTanpaWTMtSVNOMk5jYlpwWXU3UERVS3FWWU82T2l4OWlkdUxBIn0.eyJleHAiOjE2MTc5Mzc5MzMsImlhdCI6MTYxNTM0NTkzMywianRpIjoiMGRlYmM5MWMtODNhNi00NjU5LWE4M2YtMDI3MWZhNGFjMWYzIiwiaXNzIjoiaHR0cHM6Ly9zc28uY2xvdWQuNHBhcmFkaWdtLmNvbS9hdXRoL3JlYWxtcy9BdXRvT0NSIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjEwM2NlMzMwLTk2N2UtNDE3Mi04YzE1LTYzNzYzMGRjZWQ3NyIsInR5cCI6IkJlYXJlciIsImF6cCI6Im9jcmNsaWVudCIsInNlc3Npb25fc3RhdGUiOiI0NmM5ZDA3Yi04MGVjLTQ0MzQtYTQ5My0yNTQ4MzM4NGM3ZjYiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50IQ&quot; &#125;def general_predict(image_path, scene, edge_size=0, do_recognition=&#x27;True&#x27;, row_range_flag=&#x27;False&#x27;, vis_flag=&#x27;False&#x27;): with open(image_path, &#x27;rb&#x27;) as f: cnt = f.read() x = base64.b64encode(cnt) image_jpeg_base64 = x.decode(&#x27;ascii&#x27;).replace(&#x27;\\n&#x27;, &#x27;&#x27;) data = &#123;&#125; data[&#x27;image&#x27;] = image_jpeg_base64 data[&#x27;scene&#x27;] = scene data[&#x27;edge_size&#x27;] = edge_size data[&#x27;do_recognition&#x27;] = do_recognition data[&#x27;row_range_flag&#x27;] = row_range_flag data[&#x27;vis_flag&#x27;] = vis_flag res = post(predict_url, data=data, headers = headers).json() print(res) return resgeneral_predict(&#x27;./test.jpg&#x27;, &#x27;idcard&#x27;,edge_size=0, do_recognition=&#x27;True&#x27;, row_range_flag=&#x27;False&#x27;, vis_flag=&#x27;False&#x27;) 客户请求的地址，是一个flask server。 客户在请求时候，会传过来一段header，这个header就相当于开门的钥匙，有了这个密钥，服务才会正常响应。 最后，客户是将图片内容进行了base64编码，然后post给服务器。 1.3.2 服务返回最近服务器迁移中。后续补上。 上面讲了很多东西，但是都只是搬砖引入，讲API的目的也是为了引出数据流，没错这才是主菜。上述主要是想讲述，数据流。 为什么在这里要讲数据流。从业务上来说，我是搞SaaS的，基本上为客户提供服务，都是基于API为客户提供服务，那么客户如何请求我们的服务，他们都传给了我们什么数据，这些数据传到我们服务器端上之后，有哪些阶段。相信我，对数据流的了解，是开展业务的首要前提。 因为在实际开展业务中，会遇到很多问题，比如响应时长、比如数据落盘问题。 举个例子，比如响应时长过长，需要优化？怎么优化呢？第一步，我们需要将整个客户端-服务器端的链路梳理出来，这个链路有多长，经过哪些环节，每个环节，业务逻辑是什么，处理时长是多长？ 在举个例子，数据落盘，这个数据从进来，到罗盘都流过了哪些环节，每个环节都在做什么？为什么有这些环节？ 二、解决问题上面讲了数据流，工作中遇到的问题蛮多的，如果要对这些问题进行一下分类： 数据 业务 目前的我，应该是会将其分为数据和业务。 数据是算法的基石，而对业务上下游的梳理，则是开展算法策略的前提，数据和业务理解，两者缺一不可。但是在实际开展工作中，我们经常会遇到这样或者那样的问题。不管遇到什么问题，我们在解决问题时候，都应该按照以下思维模型来进行（这是我总结的一个解决问题的思维模型） 1）要解决的问题是什么&#x2F;目标是什么？ 2）当前收集到的信息有哪些？这些信息之间的关系是什么？ 业务上下游？ 数据上下游？ 3）根据当前的目标和信息，接下来要实现目标，我的action是什么？这些action分别需要谁的支持，在什么时间点，主要产出分别是什么？ 三、埋点3.1 埋点是啥有一个问题哈？埋点就是数据采集吗？ 其实数据采集标准动作有三步：埋点、采集、上报。也就是说一组数据从产生到接入存储必经三个步骤 埋点埋点只是数据采集的一个动作。 采集一旦埋点被用户触发，数据就会产生，采集动作将捕获这些数据，做初步的格式化、组装、暂存、为上报动作做准备。 格式化和组装是为接下来的上报动作提供便利；暂存是为了配合上报动作的节奏。 上报经过采集的数据从用户产品被送到数据接入层的动作过程就是上报。只有完成了上报，一个数据才算进入了数据产品体系。 数据到达接入层后会经历解包和解析、格式转换、数据清洗、数据存储四大技术流程。 数据解包和解析 根据数据协议的约定，采集层在上报数据前将魅族数据以特定的格式拼装，经过压缩上传到接入层，这样可以提高数据传输的效率。数据上传至接入层后便要进行响应的反向操作，即解包（对应压缩）和解析（对应拼装） 格式转换 由于解析后的数据类型与数据Topic定义的逻辑类型存在差异，这就需要根据数据Topic的定义，将每个分量转换类型和格式。 数据清洗 数据存储 数据仓库是实现数据存储的重要技术手段。 《 产品经理数据修炼30问》 3.2 为什么需要埋点？埋点的重要性是什么？埋点上报作为数据统计分析的基础，一定要100%准确。 用户行为分析平台就是对用户在App或网站浏览、点击等这些行为进行大数据统计分析，发现用户使用产品的行为规律、对产品功能的使用喜好程度，把这些结果应用于产品的营销、运营中。 用户行为，是指用户使用App、小程序或者web程序所产生的点击和浏览等交互行为。 3.3 业务中经常遇到的问题？根据我工作经验，经常遇到的问题有 1）埋点不考虑业务逻辑 2）埋点字段定义模糊 3）埋点数据上报不准确 分别举例来看看吧～（我发现网络上很多著作，都只讲抽象的概念，不讲case，非常让人讨厌 3.3.1 埋点不考虑业务逻辑业务逻辑是啥？ 举个例子来说吧，比如在推荐领域，相关推荐。在做data check时候，发现每次都上报两条曝光数据。但是业务是什么样子的呢？ 真实的业务是这样的，就是每当用户下拉当前阅读文章到下面时候，B文章的展示出来且能被用户看到的部分，不过1&#x2F;7，但是也是简单粗暴直接记为了show。这样说还是很抽象，我尝试再具体详细一些。 1）这是推荐场景的个性化推荐模块，目标是在下面给用户推荐当前用户可能感兴趣的内容，让用户点进去，提高用户的留存 2）在当前这篇文章下面，给用户推荐了A和B两篇文章，当用户刷到上图位置时候，就为A和B记为show。 问题来了，但是这个时候，用户压根看不清B的内容到底是啥？这会带来什么影响呢？ 直接影响就是，可能用户本来感兴趣的内容B，但是因为没有有效展示出来，用户没有进行近一步的动作，所以会导致，直接将用户反馈记为了负反馈。 3.3.2 埋点字段定义模糊比如在小视频场景，当用户刷到了当前时候，这个时候，这个视频的行为会有一个show，但是如果用户产生了观看行为，那么也就是说，用户在这个视频上消费了时间，这个时候，会记录一个duration，这个duration就表示用户在这个视频上产生了观看行为。 但是问题来了，用户在这个视频上观看了几秒，这个行为就是duration了呢？ 大于等于1秒？ 大于等于2秒？ 这些都是要基于业务进行思考。 3.3.3 埋点数据上报不准确埋点数据上报不准确主要有哪几种表现 ： 1）重复上报 2）动作顺序混乱，比如对于资讯，肯定是先show再有其他动作，比如click，但是经常会发现，先click再show，这就是有问题了！ 3.4 如何规避上述问题所以如何规避上述问题呢？ 首先，业务，业务，业务，精通业务。 其次，每个字段的定义需要了然于胸。 最后，data check，data check，data check。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"2021_Q2_Week3_工作总结","slug":"2021-Q2-Week3-工作总结","date":"2021-04-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/04/22/2021-Q2-Week3-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2021/04/22/2021-Q2-Week3-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"本周关键词：客户管理、负载均衡、策略产品 recap一下去年和百度一位MT的沟通，沟通内容是他给了我一些我博客内容的反馈，总结一下就是：方法论偏多，干货偏少。不是说，方法论不好，而是在我当前阶段，应该了解更多的干货，比如ocr的算法原理。（因为去年的时候，我还在搞ocr。这是上述recap的大背景。今年调整了赛道，开始重新搞推荐，上述建议同样适用。所以，在我今年的每周总结，我都会有意识的增加干货部分。并且可能会采取将工作总结分为方法论和干货两个模块的形式。 同样，在方法论和干货篇中，也会有单独的WHY模块。做一件事是执行力，这是0，知道并且能判断为什么做一件事，是0前面的1。（今年的思维比去年成熟太多了，惊喜！） 一 方法论篇1.1 客户管理思前想后，觉得客户管理的方法论，不适合公开发布，就省略了吧。 二 干货篇2.1 负载均衡为啥要了解负载均衡？一寸光阴一寸金。负载均衡和我有啥关系？在工作中，我经常听到这个名词，感觉不懂，就不配继续拿工资了。 2.1.1 负载均衡是什么负载均衡是一种电子计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动或其他资源中分配负载，以达到优化资源使用、最大华吞吐率、最小化响应时间、同时避免过载的目的。 负载均衡是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或者其他服务的性能和可靠性。 太抽象了，能不能具体一点，我不喜欢抽象的描述。 在业务初期，我们一般会先使用单台服务器对外提供服务。随着业务流量越来越大，单台服务器无论如何优化，无论采用多好的硬件，总会有性能天花板，当单服务器的性能无法满足业务需求时，就需要把多台服务器组成集群系统提高整体的处理性能。 基于上述需求，我们要使用统一的流量入口来对外提供服务，本质上就是需要一个流量调度器，通过均衡的算法，将用户大量的请求流量均衡地分发到集群中不同的服务器上。这其实就是我们今天要说的负载均衡。 使用负载均衡可以给我们带来的几个好处： 提高了系统的整体性能； 提高了系统的扩展性； 提高了系统的可用性； 2.1.2 常见的负载均衡类型1）DNS实现负载均衡一个域名通过 DNS 解析到多个 IP，每个 IP 对应不同的服务器实例，这样就完成了流量的调度，虽然没有使用常规的负载均衡器，但实现了简单的负载均衡功能。 2）硬件负载均衡这种方式，我工作中基本上没有遇到过，暂时不考虑。 3）软件负载均衡软件负载均衡，可以在普通的服务器上运行负载均衡软件，实现负载均衡功能。目前常见的有Ngix、HAproxy、LVS。 工作中最经常接触的是Ngix。 PS：本周总结有限，因为实际写这篇总结的时候已经是5月5日了～写每周总结，不能拖，一拖就出问题！","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"item-to-item collaborative filtering","slug":"item-to-item-collaborative-filtering","date":"2021-04-09T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2021/04/09/item-to-item-collaborative-filtering/","link":"","permalink":"https://kerryli1007.github.io/2021/04/09/item-to-item-collaborative-filtering/","excerpt":"","text":"目标： 了解推荐领域的经典算法i2i，产生背景、自身特点、运作原理 了解不同算法之间的特点，u2i、cluster model、search based、i2i 以下是论文，Enjoy～ 对于电商场景而言，推荐算法通常面临如下挑战： 大型零售商拥有海量数据，数以千万计的用户与不计其数的商品。 推荐应用需要推荐系统实时返回数据，同时要求这些返回结果是有效的。 新的用户由于只有很少的购买行为和评论行为，系统往往没有这类用户的数据。 老用户的数据过多。 用户数据处于动态变化中。用户和网站的每一次交互都产生了非常珍贵的数据，推荐系统需要立即针对这些新的信息给出重新计算后的反馈。 针对上述问题，通常有3种解决思路： 传统的协同过滤 聚类模型 基于搜索的方法 在这篇论文中，作者将上述3种方法同Amazon提出的item-to-item算法进行了分析对比。 和传统的算法相比，item-to-item(i2i)的优势： 该算法的线上扩展性与用户以及商品的数量无关。 该算法可实时计算出用户偏好，可扩展至海量数据，并且这些预测的质量非常高。 1. 传统的推荐算法传统推荐算法包括用户协同过滤（user-to-user collaborative filtering），聚类模型（Cluster Models）、基于搜索的方法（Search-Based Methods）。 绝大多数的推荐算法，其逻辑均为，针对用户A，首先找到和用户A有着相似消费行为的用户群B；然后算法将用户群B消费过的商品计算出来，得到一个商品集C；接着，将A已经购买过的商品从商品集C中减去，得到待推荐商品集D；最后，将D中的商品推荐给用户A。这类算法的核心是找到有相似消费行为的用户。具体的算法有user-to-user collaborative filtering和cluster models。除此之外，还有核心是找到相似商品的算法。这类算法的具体代表有search-based methods和item-to-item collaborative filtering。 总结一下，推荐算法的基础逻辑，分为两类：类别1，找到有相似的消费者；类别2，找到有相似的商品。 1.1 用户协同过滤（user-to-user collaborative filtering）传统的基于用户的协同过滤算法将用户表征为关于物品的N维向量，N在这里表示的是不同物品的类别数量。这个向量的组成部分有正的，也有负的（The components of the vector are positive, for purchased or positively rated items and negative for negatively rated items.）。对于Best-selling 商品，算法将这些向量的组成部分相乘，让不那么出名的商品更相关。对于绝大多数消费者而言，这些向量都是很稀疏的。 要回答什么是sparse feature，可能首先要理解什么是feature。 一般在machine learning意义上，我们常说的feature，是一种对数据的表达。当然，要衡量一种feature是否是合适的表达，要根据数据，应用，ML的模型，方法….很多方面来看。一般来说，Feature应该是informative（富有信息量），discriminative（有区分性）和independent（独立）的。 那么具体怎么选择feature，其实一直是一个开放的问题。在机器学习里面，feature的选择是至关重要的：对于同一种学习的模型，同样的学习方法，同样的数据，选择不同的feature来表达，可能会产生完全不同的效果。 Feature有很多种特性和分类：Feature可以是Linear（线性），也可以是Non-linear（非线性）的；Feature可以是Fixed（固顶的），也可以是Adaptive（适应性的)….甚至feature都可以不是numerical的，但因为题主问的是sparse feature，所以我就在这里特指numerical的feature。 如果把我们的每一个数据点，想象成一个vector（向量），记作y，对应的feature则可以用另外一个vector来表示，记作x。 更多关于稀疏向量的解释，参考 https://www.zhihu.com/question/31951092 该算法通过一些相似的用户来生成推荐。通过计算两个消费者的相似度，通常用来计算两个消费者相似度的方式是计算这两个向量之间的cosine。 也有一些其他的方法来计算不同用户之间的相似度，但是这些方法各有利弊。详细参考https://www.youtube.com/watch?v=VZKMyTaLI00 使用协同过滤算法来做推荐是非常消耗计算资源的。最差的情况下，是O(MN)，M是用户的数量，N是商品的数量，因为这类算法需要遍历每个消费者来评估N个商品。然而，由于通常用户的向量都是非常稀疏的，这个算法的表现更倾向于是O（M+N）。扫描所有的消费者大概是O（M）。但是这里有一些消费者，他们买了或者购买了大量的商品，就需要O（N）的处理时间。因此，最后这个算法的性能是O（M+N）。对于大的数据集，比如有大于100万的用户，和大于10万的商品，该算法会遇到非常大的性能和可扩展性的问题。 通过减少数据量可以部分地解决这个可扩展性的问题。我们可以减少M通过随机取样或者删除只有少量购买行为的的消费者。我们可以减少N通过移除不受欢迎或者非常受欢迎的商品。 但是不幸的是，这些方法都或多或少会降低推荐的质量。首先，如果算法只筛选了一小部分消费者，这一小部分消费者的相似度会降低。其次，最后，如果算法将不那么受欢迎或者受欢呼的商品移除了，那么这些商品永远不会在推荐系统中出现，消费者也不会收到这些推荐。 1.2 聚类模型（Cluster Models）通过一个case，来看聚类模型的整个pipeline。 西蓝花来到网页上，这个网页要做的是找到和西蓝花画像最相似的用户群。算法首先将所有用户分为N个Group，接着将西蓝花放进其中的一个Group，比如说Group A，最后算法通过Group A中消费者的购买行为和评分来为西蓝花推荐商品。 这些Group通常是通过聚类或者无监督学习来获得，虽然在有的应用是手动来划分。基于相似度指标，聚类算法将最相似的用户放在同一个群组。因为在大数据集上聚类的表现不好，所以大多数应用使用贪心聚类算法。这些算法通过先开始一个小的部分，这个小部分只包含几个随机选择的用户。接着这个算法重复地向该群组添加用户。对于大的数据集，以及有高维度的数据集，抽样以及降维是必须的。 一旦算法创建了群组，他会计算用户和各个群组之间的相似度，接着选择相似度最高的群组，并将该用户划分进该群组。 因为聚类算法在计算相似度时候，计算的是特定用户与N个群组之间的相似度，而非与所有用户之间的相似度，因此聚类算法的线上可扩展性是更好的，且性能更佳。但是，聚类算法的质量是很差的。 1.3 基于搜索的方法（Search-Based Methods）搜索或者基于内容的方法将推荐作为对于相关物品的搜索。考虑到用户的购买和对商品的评分，整个算法会建构一个query，去寻找同一个作者、艺术家、导演的受欢迎的物品。如果用户西蓝花购买了教父的DVD合集，这个系统会推荐其他的犯罪剧，或者其他Marlon Brando主演的电影，或者其他Francis Ford Coppola导演的电影。 对于用户只有很少的购买或者评分行为，基于搜索的方法也能扩展，并且表现良好。相反，对于有着成千上问购买行为的用户，基于所有物品的query构建反而是不切实际的。这样的情况下，算法必须使用的是数据的子集，这样就会降低数据质量。在所有case中，基于搜索的方法表现是糟糕的。推荐结果太普遍，或者太窄了。（比如推荐的都是热门、或者推荐的都是一个作者的所有书籍）推荐系统应该帮助消费者发现新的商品、相关的商品、或者消费者感兴趣的商品。但是同一个作者受欢迎的商品或者同一个类别的商品，是不能达成推荐系统的目标的。 2. item-to-item的协同过滤在邮件营销和网站首页，亚马逊均使用推荐系统作为营销工具。 但是由于现存的推荐算法无法处理亚马逊上数以亿万计的商品和用户，因此亚马逊创建了自己的推荐算法，基于物品的（i2i）协同过滤，该算法的特点可以处理大数据并且实时给出高质量的推荐。 2.1 item-to-item的原理i2i将消费者购买的商品的相似度进行打分，然后将相似的商品放进一个推荐列表。 对于一个给定的商品，为了找到与该商品最相似的商品，算法会创建一个相似item表来找到消费者最有可能一起购买的商品。我们可以创建一个product-to-product的矩阵，通过迭代所有的商品，并计算每一对的相似度。然而，很多商品的没有共同的消费者，因此这种方式就是非常无效的并且也很占用内存。接下来的迭代算法提供一个一个更好的方式，通过计算一个商品与所有相关商品之间的相似度。 12345678For each item in product catalog, I1For each customer C who purchased I1For each item I2 purchased bycustomer CRecord that a customer purchased I1and I2For each item I2Compute the similarity between I1 and I2 在两个item中来计算相似度，但是一个通用的方法是使用我们之前提到的计算的cosine，在这里一个向量代表一个商品，而不是一个消费者。 线下对相似物品的计算非常的耗时，最差情况下。 2.2 算法对比亚马逊有2900万消费者和几百万的商品。其他的零售店也有相对较大的资源，这些数据都提供机会。 基本上当前所有的算法都是在小数据集上进行的测评，这些数据集有MovieLens data set，包括35,000消费者和3,000物品，EachMovie data set，包括4,000消费者和1,600物品。 对于非常大体量的数据集，一个可扩展的推荐算法必须能够在线下完成计算。做一个简短的对比，现存的方法有如下弊端： 传统的CBF没有线下计算，线上计算量随着数据量呈线性增加，针对大数据集场景，该算法是无法投产的，除非对数据集进行将维、抽样、或者切分。但是这些操作都会降低推荐的质量。 聚类算法在线下计算表现很好，但是线上推荐质量相对较差。为了提升，可以增加聚类后群组的数量，但是这个会让线上的分类计算量增加。 基于搜索的方法建构了关键词，类别以及作者索引，但是不能提供更新、更有趣的推荐。这类方法对于有大量购买和评分的行为的用户而言，可扩展性差。 i2i在可扩展性和表现上都很好的原因是，该算法在线下计算商品的相似度。i2i的online部分只是针对消费者的购买和评分行为，查找相似的商品，这个过程只是依赖于消费者购买或者评分了多少商品。因此，即便是针对特别大的数据集，该计算方式也是尤为快。因为算法推荐的都是高度相关的商品，因此推荐的效果也 3. 生产场景应用待补充 待补充","categories":[{"name":"推荐系统","slug":"推荐系统","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"}],"tags":[]},{"title":"产品经理相关思考","slug":"20210217-产品经理相关思考","date":"2021-02-16T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/02/16/20210217-产品经理相关思考/","link":"","permalink":"https://kerryli1007.github.io/2021/02/16/20210217-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83/","excerpt":"","text":"最近一直在被拷问几个问题，主要集中在三个问题： 产品经理是做什么的？ 你为什么说你对产品有热情？ 对于做产品这件事，你的价值是什么？ 这些问题有的是我自己对自己发起的，有的是朋友向我发起的。 对问题的思考，让我像拿着手术刀一样，毫不留情地剖析我自己。 #01 产品经理是做什么的？这个问题已经烂大街了。 随便Google一下，都有成千上万的标准答案。但是，那是别人的答案，我的回答是什么？为什么我会给出这样的回答？ 初探产品经理 当时的我尚在少儿编程公司时候，公司的主要商业模式是为8 - 12岁的孩子提供编程录播课，孩子们看了课程之后，做课后作业。在做课后作业的时候，会遇到一些问题，他们在前台的chatbox提问。后台会有老师解答。这是公司业务流程中，很普通的一个环节，但是这个环节存在一个问题，所有孩子都上同一门课，理所当然他们提的问题是一样的。后台老师需要重复地回答相同的问题，老师也是人，烦躁是第一感受，第二感受是没有成就感。 当时，我在想，既然这些问题都是重复的，为什么不能自动回答？对用户来说，自动回答可以缩短让用户等待的时间；对后台老师来说，自动回答可以增加工作的automation。 接着和当时的后端负责人（目前的产品负责人）聊了这个问题。他说，好啊，你需要哪些数据，列一个需求清单给我，我导出来给你。 当时列出来的数据清单的schema如下 课程等级（L1 - L6） 课程ID（1 - 12） 学生和老师的对话流 对老师和学生的对话流进行分析，发现大概有 20的问题，都是老师课上有讲，但是学生没有认真听讲，所有存疑 30的问题，都是重难点，存在大量重复提问 40的问题，都是一些“长尾”的问题 10的问题，个性化 具体数值可能有出入，但是大概是上面这样。通过上述分析，我将其中能概括出来的回答做了总结。做了一个后台自动回复功能。回复的模版可以根据课程内容配置。 大大地提高了效率，也缩短了孩子们的等待时间。这是我初探产品经理。 AI产品经理 后来加入了4PD的云团队。团队的主要目标是将产品放在云上进行售卖。团队人数少，我的工作职能一边负责着解决方案，一边负责着官网前后端的设计。 回顾反思一下，当时做这套系统，思考得更多得是支持团队业务的开展。这里说的业务开展，就是获客、已经管理这些customer的生命周期。 前后端的产品设计之外，还兼任了“云OCR PM”负责OCR上云的工作。在OCR上云的过程中，让我更加加深了对产品经理职业的理解。 如果说，前后端官网的设计是让我了解了产品作为一个什么样的tool来支持业务的开展，ocr上云的产品工作，让我了解了产品如何从市场竞争格局的角度，来帮助产品GTM。 在这个阶段，对用户场景的思考、对市场竞争的思考，对自己产品优势劣势的思考，都得到了磨练。 而上述各个阶段的转变，从能做一个单一的feature、到能做一个系统的产品，再到帮助一个产品GTM，其实背后对应的知识技能要求也有差异。 对一个优秀PM的评估，有如下几个维度： 通用能力 专业能力 产出 组织影响力 #02 为什么讲我对做产品有热情经过一段时间的思考，我对“做产品有热情”的理解，可以分为3个阶段： “无知”的热情 “朦胧”的热情 “明白“的热情 我先解释一下我对这3个阶段的理解，接着说一下这三个阶段变化的背后底层逻辑。 “无知”的热情 问：你为什么想做产品？ 答：因为我喜欢。 问：你喜欢的产品有哪些？ 答：Emmm，Nomo。 问：为什么？ 答：感觉很惊艳。 问：为什么惊艳？ 答：有很多滤镜。 问：…… “朦胧”的热情 问：你为什么想做产品？ 答：因为我喜欢创造工具。 问：哪一款是你最喜欢的工具？为什么喜欢这款工具？ 答：Notion。 问：继续说说，为什么喜欢这款工具。 答：因为这款工具1、2、3吧啦吧啦很好（基本说出了这款工具的亮点 “明白”的热情 在“朦胧“的热情上，多了对这个行业的洞察。包括对这个行业历史、以及当前市场玩家的洞察。而且亲自动手做了大量的研究工作。 参考一份模版一样的“明白“的产品热情 最近看了俞军老师当年学习搜索引擎的方法。他的学习方法如下： -每天至少200次搜索，持续一年以上 -阅读可收集到的任何搜索相关文章，至少5000篇，至少一半是英文 -把任何可利用时间用于思考搜索，把眼前看到以及脑中的任何事物以及文字都用搜索来描述和验证 - 任何别人搜索过的案例，一定仿照一遍，并做10倍以上的变化搜索，至少半年 -对最感兴趣的一门领域，深入了解它，彻底跟踪该领域内任何信息，包括你极尽所能收集到的任何角度、任何位置、任何媒体、任何人、任何形式的信息，直到你弄清楚信息是怎样出生、生长、生病、死亡，维持这种状态绝不可短于一年。 -阅读任何人文学科著作至少1000本，其中至少100本哲学和心理学作品，不要放过任何所谓经典著作 -以感情入搜索。我的力量来源于愤怒！内心深处的愤怒，改变世界的信念支持我在每次搜索时尽全力并得到足够的回报。 链接： 我告诉你怎么学搜索-搜索技巧-中文搜索引擎指南网 说回来这3阶段变化的背后： 意愿层。从“无知”到“明白”，意味着，愿意投入大量的时间、精力。这是第一层，意愿层。 动手能力。在意愿层的基础上，是动手能力，包括搜索信息的能力，归纳信息的能力，以及最后提取信息的能力。动手能力打在字上是很轻松，但是在执行层面，是非常难的。这种前期的投入，非常枯燥，若非真的热爱，有热情，是很难坚持的。 只有在意愿✅，动手能力✅的基础上，才有资格讲，对产品的热情。 反躬自省一下，我目前处在什么阶段呢？ 阶段二到阶段三过渡。 我用Notion搭建出来的“产品沉思录”就是我在努力向第三阶段迈近的证据，但是目前烛光尚弱，尚不足以照亮阶段三。 #03 对于做产品这件事，我的价值是什么对于这个问题的回答，我试图将命题缩小一点，在创造工具产品这件事上，我的价值是什么？ 我的价值这个话题还是太难回答，再具体一点。我希望通过怎么样的方式来创造价值？ 对当前工作流的观察，进行抽象，借助一些思想先锋&#x2F;好的理念，创造出好的产品。 参考高效会议一章。","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"复盘写博客这一年","slug":"20210217-复盘写博客这一年","date":"2021-02-16T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/02/16/20210217-复盘写博客这一年/","link":"","permalink":"https://kerryli1007.github.io/2021/02/16/20210217-%E5%A4%8D%E7%9B%98%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%80%E5%B9%B4/","excerpt":"","text":"规律性地写博客有一年了。关于博客的内容，也得到了一些反馈，反馈陆陆续续来自不同的人，他们有着不同的角度。就这些反馈做一下总结，也梳理一下来年的重点。 反馈1:都是HOW，缺少WHY。 反馈2:经验比重大，干货比重小。 调整： 更加关注WHY。不是说HOW，也就是如何做一件事不重要。WHY和HOW都很重要，但是应该有倾向地提升对WHY的刻意思考。 更加关注干货。比如在OCR这个模块，干货更多的是指对各家底层技术的了解。 一个疑问： 如何提升自己对自己不了解的行业的认知 大概这样，未来1年再动态调整。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"传统软件到现代化网络服务的变革","slug":"20210215-传统软件到现代化网络服务的变革","date":"2021-02-14T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/02/14/20210215-传统软件到现代化网络服务的变革/","link":"","permalink":"https://kerryli1007.github.io/2021/02/14/20210215-%E4%BC%A0%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%88%B0%E7%8E%B0%E4%BB%A3%E5%8C%96%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8F%98%E9%9D%A9/","excerpt":"","text":"一款现代化的网络服务，应该具备哪些特质？ 跨设备、云端存储、交互友好、多人协同。但是你有没有想过，我们今天看到的这些特征，这些开发者的设计理念，为什么是这样的？他们背后又发生了什么变化，才催生了这些特质。 从传统软件到现代化的网路服务，背后的变革实质，其实是这3点： 数据是流动的 面向使用场景设计 交互高于功能","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"用Notion搭博客","slug":"用Notion搭博客","date":"2021-02-14T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2021/02/14/用Notion搭博客/","link":"","permalink":"https://kerryli1007.github.io/2021/02/14/%E7%94%A8Notion%E6%90%AD%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"最近阅读Ivan Zhao当时创造Notion时的设计理念，他说当时他是他朋友里面唯一一个会编程的，帮朋友写了很多网页。他希望能将软件开发的能力，通过Notion，以搭积木的方式，交给没有编程能力的用户。 时间倒退。 2017年，我第一次接触到个人搭建博客这个概念，当时想自己搭建一个博客，但是囿于自己丝毫不懂技术，只得作罢。 2019年，我在技术上有了一些积累，搭建博客的念头再次萌生，于是当时的我花了4天，终于使用github搭建起了我的博客。当时的搭建过程，在CSDN上做了详细记录https://blog.csdn.net/weixin_41160054/article/details/89531921。主要有4个步骤： Github仓库建站 Node.js安装 Hexo安装 Hexo主题 总结一下，两个字，复杂。 完成上述安装，已经很复杂了。使用成本也不低。使用Github博客两年来，我遇到的主要问题有两个： 设备更换，环境需重新部署 图片插入，费时费力 虽然我研究了好几天，但是最后还是在淘宝上花钱请人给修好的。当时我想的是，专业的人做专业的事，我应该Focus在思考以及内容的沉淀，而环境维护的事，就花钱请人支援。 设备更换的问题算是解决了。接着我遇到了第二个问题，图片插入，费时费力。因为我写的很多文章，都有大量的图片。和在本地直接将图片粘贴进文档编辑器不同，如果要将图片发布在Hexo博客上，需要按照Hexo博客的规矩来做。首先需要给所有图片新建一个文件夹，将所有图片放在这个文件夹中，然后根据这些图片的名称ID，依次插入到文章中。 除了图片插入，费时费力之外，还有一个问题就是不支持更丰富的媒介形式，比如PPT、视频、语音。最近在写电子表格二三事时候，考古电子表格的发展，搜罗到了大量珍贵的视频，我本来是打算一起放在文档中，但是无奈不支持，只有以链接插入的方式附上。 随着我对Notion的研究，我发现Notion完全可以替代我的博客。 Recap一下，我为什么使用博客： 让我所有的思考有一个沉淀的地方 这些沉淀的内容，也可以作为我个人品牌，对外暴露 Notion完全可以满足上述两个需求，而且满足地非常好，超出我预期的好。 让我的所有思考有一个可以沉淀的地方。 使用Notion，我给自己搭建了一个产品沉思录。 分门别类地对文章主题进行了梳理。 不过由于刚搭建起来，里面的内容还在填充中。这个时候，我在思考，如果有一种办法，能让我在Hexo上的所有文章，都一键搬运到Notion中，那我的迁移成本就很低了。想到这里我突然想起了Airtable，今天研究Airtable时候，他们就支持从其他平台通过API的方式将数据导入。（所以，其实产品设计产品设计，产品不是设计出来的，产品是根据需求而被实现出来的。） 通过share，可以将上面这个Notion的产品沉思录，交给任何人阅读。（也就是一个博客了） 说回第二个痛点，图片插入，Notion在插入图片上，压根没有那么复杂，所见即所得。 最后Notion对媒介的支持形式，异常丰富，视频也是直接支持，并且可以在线播放。 综上，一些关于使用Notion搭建博客的碎碎念。 最后，附上我的产品沉思录地址 https://www.notion.so/ProductThinking-59a055d3e91c4b3695b72b6bb29a9148","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"电子表格二三事","slug":"2021-02-14-电子表格二三事","date":"2021-02-13T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/02/13/2021-02-14-电子表格二三事/","link":"","permalink":"https://kerryli1007.github.io/2021/02/13/2021-02-14-%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E4%BA%8C%E4%B8%89%E4%BA%8B/","excerpt":"","text":"#01 背景晚上在APP Store看各大文档编辑器的评论，看到一个评论如下 划一下重点，因为Bear做表格做了3年都没有做出来，这个忠实用户终于抛弃了Bear。 我自身也是Bear的忠实用户，当即和朋友讨论到 我的猜想是很无厘头啦，Bear为何迟迟没有研发出表格，不得知晓，不过我倒是兴起，想研究一下电子表格（electronic spreadsheet）的历史。 #02 电子表格起源#02-01 VisiCalc 上述是VisiCalc的一个截图。VisiCalc是世界上第一套电子表格软件，由当时在哈佛大学念MBA的Dan Bricklin研发。Dan Bricklin在上课时候发现经常要计算一些“what-if”的复杂财务报表，用人工计算费时又费力，容易出错，因此便想到用电脑来帮忙计算。 这是Dan当初上课时候需要计算的数字。 在推销VisiCalc时，Dan Bricklin这样回忆：“当我们向一家波士顿的电脑公司推销VisiCalc的时候，业务代表看了只是觉得有点兴趣，但店里的会计看了几乎兴奋地颤抖起来。” 接着VisiCalc跟着苹果二号推出，成为了苹果二号电脑上的“杀手应用软件” 。 （VisiCalc 在 Apple II 上） 乔布斯对VisiCalc的评论如下 总结就是： 电子表格推动的行业的发展 VisiCalc促进了Apple II的成功 我们来看看当时VisiCalc都有哪些功能 可以看出，VisiCalc在当时，已经电子表格的基本功能，包括 核心概念，行列式 删除行&#x2F;列 自动求和，基础函数，比如sum 了解更多内容，观看视频https://www.youtube.com/watch?v=Ii3PDjJCCQ4 &#x3D;&#x3D;看到这里的你，有没有想过一个问题？为什么VisiCalc长这样？WHY？WHY？WHY？&#x3D;&#x3D; VisiCalc 的设计逻辑是VisiCalc模块分享的重点。 预习一下为什么我们要学习当时VisiCalc的设计逻辑。下面这段话，是去年2月我发布在知识星球的一段读书笔记。总结一下，学习产品，是学习产品背后的设计逻辑。KNOW WHY。 腾讯产品法里面有这样一段话： 在某条路上走得太久了，习惯成自然，于是就忘记了最开始为什么要选择走这条路。 解决这个问题的办法也很简单，就是看到任何一样东西，都清楚地意识到：它背后站着无数个设计者，没有“本来就该是那个样子”的产品。 小到城市村落的分布、道路交通、全球航线的设计，小到你身边一个灯泡、一把牙刷、一块肥皂的设计。所有这些产品，背后都有它的设计故事。只有抛开“别人怎么做”“过去怎么做”的参考，直接回归初始问题去进行推导，才有可能获得与众不同的视角。 👆上面这段话，带给我很大启发的一句话是，每一个产品，我们都需要去思考它背后的设计故事，回归初始问题去推导，才可能收获与众不同的视角。 最近看陆奇的《AI时代创新机会》里面讲到AI带来的市场新格局，里面讲到新的IT行业。整个芯片，从底到上，必须重解一次，今天的X86 ARM的系统架构的前提假定是Von Neumann假定数据纬度是比较低的，Cache Hit Ratio足够要高。然而人工智能时代实际上没有这些特征，都是高维度的数据，必须需要大规模地平行处理，所以整个硅晶片的工业，会被重写。 正因为底层假设的变化，需要被处理的数据从低维度，变成了高纬度，因此，当前市面上出现了很多针对高维度数据的存储器、计算器，比如腾讯开源的Angle。 总结一下，是说，没有产品本来就该是那个样子的说法，每一个产品，背后都有它的故事。 VisiCalc的设计逻辑呢？着重分享两个： 自动加减 Grid设计 自动加减工作中的一个典型，我们需要求和十个数值。我们将十个数值输入Excel，然后使用公式sum求和。这个时候，我们发现，有一个数值输入错了，接着，我们将这个数值做了修改。非常自动的，我们的sum后面的值，也会非常自动地更新了。 这个功能在今天看来，非常自然，自然到我们理所应当地认为这个功能就是这样。但是为什么是这样的呢？ VisiCalc的creator这样分享到 I imagined a magic blackboard that if you erased one number and wrote a new thing in, all of the other numbers would automatically change, like word processing with numbers. I imagined that my calculator had mouse hardware on the bottom of it and a head-up display, like in a fighter plane. And I could type some numbers in, and circle in, and press the sum button. And right in the middle of a negotiation I’d be able to get the answer. Now I just had to take my fantasy and turn it into reality. Grid设计 How do you represent values in formulas? It had to be something the computer knew what to put in. You need to know where on the screen it referred to. The first thing I thought was the programmer way of doing it. The first time you pointed to somewhere, the computer would ask you to type in a unique name. It became pretty clear that was going to be too tedious. The computer had to automatically make up the name and put it inside. So I thought, why not make it be the order in which you creat them? I tried that. Value 1, Value2. Pretty quickly I saw that if you had more than a few values you never remeber on the screen where things were. Then I said, why not instead of allowing you to put values anywhere, I’ll restrict you to a grid. Then when you pointed to a cell, the computer could put the row and column in as a name. And if I did it like a map and put ABC across the top and numbers along the side. Restricted a map solve all problems and opened up new capabilities, like the ability to have ranges of cells. 更多细节，参考https://www.youtube.com/watch?v=YDvbDiJZpy0 说完了产品设计，回过头来再看看VisiCalc的商业成就： 在6年内，VisiCalc被售卖了700,000 在VisiCalc的整个生命周期里，被售卖了100万份 诸多消费者花费2,000购买Apple II就是为了获得VisiCalc 但是在数据处理上，VisiCalc当时能计算和处理的数据只有254行，以及63列。 在VisiCalc出现之前，那个时候，人们是如何记录计算的呢 这是Dan的父亲当时做帐的帐稿。密密麻麻的线条，非常复杂。 #02-02 Lotus1231982年，Mitch Kapor，他曾经负责VisiCalc营销和销售，离开了公司，并且有着信念，希望创造出比VisiCalc更好的产品。他建立了Lotus Development并且于1983年发布了Lotus 123，Lotus123后来成为了VisiCalc最大的对手。Lotus123有更好的新功能，UI界面也有了改善。 ….In January 1983, Lotus introduced Lotus 1-2-3 at a price of $495. It was immediately acknowledged to be a better product than VisiCalc. In December 1982 Gregg Williams wrote in Byte that 1-2-3 had ‘many more functions and commands than VisiCalc’ and that 1-2-3 was ‘revolutionary instead of evolutionary.’ PC World called it ‘state of the art.’ 了解更多Lotus123，链接https://www.youtube.com/watch?v=zi6l-5j_Ifw Lotus123发布两年后，Excel面世了。 接下来，是电子表格发展的一些关键历程。 #03 电子表格发展的关键历程1985年：Excel1.0面世 1988年：求伯君花14个月写出来的国产办公软件WPS。 1993年：微软推出Office办公套件，将Excel捆绑。 2006年：Google Docs面世，这是一个新鲜事物，原来不依赖于客户端，在网页上也可以使用办公软件 2007年：苹果开发了numbers 2011年：微软开始支持在线办公 2013年：Airtable出现，同构表 2016年：在线电子表格产品陆续出现 上述这些关键节点的产品，本来打算都写在本篇文章，思考之后，还是都分开写吧。","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"A story of tools and the future of work","slug":"A-story-of-tools-and-the-future-of-work","date":"2021-02-12T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/02/12/A-story-of-tools-and-the-future-of-work/","link":"","permalink":"https://kerryli1007.github.io/2021/02/12/A-story-of-tools-and-the-future-of-work/","excerpt":"","text":"本篇文章记录的是Notion的故事。 “The best way to predict the future is to invent it.” Alan Kay, computing pioneer 所有的办公室工作者，每天都面临这样的场景，打开15个应用，一个是邮件应用，一个是IM，比如Slack，还有一个是Google Docs等等。 但是，我们是否有思考过，为什么会有这些“工作工具”产生，他们来自于哪里，为什么这里有这么多他们？ 为了很好地回答这个问题，让我们回到这些工具产生的时代。 工业革命时期，诸多人口涌向工厂，在这个时候，为了减轻管理压力，一些工具被创造出来了。打字机取代了手抄，文件管理柜能存储柜员不能记住的信息。 1950年，电脑被创造出来了。起初，这些电脑只是房间大小的“怪物”。他们只能被用来做数字计算。 1970年，一些神奇的事发生了。 一些思想先锋意识到电脑不仅仅可以被用来算数。在他们的预期中的世界，电脑可以增强人的想象（Alan Kay），增强人的智能（Doug Engelbart），以及超越纸张扩展我们的思维（Ted Nelson）。 这样的工具，是见所未见的。 Google Docs带来了协作，Dropbox让我们可以在云端存储文件。但是，他们的进化有限。我们每天需要打开很多应用，在不同应用之间切换。 这是为什么Notion存在，Notion希望打破这些不同应用之间的壁垒，带回早期思想先锋的ideas。 第一个，Notion将所有的工作流都放在了一起。用户希望一个task list？一个产品roadmap？一个设计思想？这些内容都在一起。用户可以通过搭建乐高的方式自己创造自己的workspace。 按照自己喜爱的方式解决问题，使用Notion时候，唯一的障碍只是想象力。 “The best way to predict the future is to invent it.” Alan Kay, computing pioneer","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"Tool for thought","slug":"Tool-for-thought","date":"2021-02-11T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2021/02/11/Tool-for-thought/","link":"","permalink":"https://kerryli1007.github.io/2021/02/11/Tool-for-thought/","excerpt":"","text":"如何理解tool for thought？ 上个世纪60年代，远见卓识的天才们在追求一个梦想，他们希望电脑能够增强人的智能。其中一位天才，他叫lan Kay，他这样描绘电脑的角色：“the very use of it would actually change the thought patterns of an entire civilization。”对电脑的使用可以改变整个文明的思维范式。 远古时期，我们的祖先直立起来，解放了双手，开始创造工具，将石子摩尖、钻木取火。可以将石子儿、木头这些工具抽象为tool for body。 摘录自《人类简史》 那tool for thought就好理解了，我们借助工具，来增强我们的智能。 乔布斯对tool for thought的理解是a bicycle for our mind。可以参考我的博客文章《Tool Builder》。","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"Notion如何提升个人生产力","slug":"Notion如何提升个人生产力","date":"2021-02-10T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2021/02/10/Notion如何提升个人生产力/","link":"","permalink":"https://kerryli1007.github.io/2021/02/10/Notion%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E4%B8%AA%E4%BA%BA%E7%94%9F%E4%BA%A7%E5%8A%9B/","excerpt":"","text":"作为一个工具主义者，tool for thought，我一直认为notion是一款非常棒的效率工具。 最近被问到：“你认为notion到底棒在哪里？” 因为被临时问到，当时的回答，言语措辞都略显生硬。借着春节有大把时间思考，做如下思考总结。 好的写作工具围绕工具这个词，最近一年，我进行了大量的思考。 为什么开始关注工具？ 接触到Bear（熊掌记）是2018年夏天。彼时的我，尚且没有定期写作的习惯。虽然在石墨文档上，也留下了一些思考，但是，那些思考沉淀仿佛没有灵魂，他们没有带给我成就感，满足感。初探Bear，惊叹于她的颜值。随着对Bear的使用场景扩充，从大段的思考总结，到平时的思维碎片，再到日常工作安排，Bear成为了工作生活中不可或缺的一部分。也是在这个过程中，我意识到我也爱上了思考、写作沉淀这回事。这件事，也成为了我的习惯。 在Bear之外，我还接触了诸多其他的写作工具，比如Craft、Ulyssess、MWeb等。但是，Notion是最让我惊叹的。 为什么呢？为什么工具那么多，我认为notion是最棒的那一款。换句话说，为什么notion是一款非常棒的效率工具？ 灵活如果要用三个词，描绘我对notion的看法，灵活是第一个词。 也有人将此称为自由，打趣一点，他们是这样说的：“notion真的非常自由，自由到我不知如何下手。“ 灵活到底是什么呢？ 在notion中，用户可以插入任何内容。 这些内容，可以是一段文本，一个新的嵌套的页面，一个todo task，一个一级目录，等等。notion将文本中可以输入的内容进行了拆解，拆解成了诸多小的元素，这些元素在notion中统一被称之为Basic Block。除了Basic Block，还有Inline，Database、Media等等。 将这些Block组合在一起，就是Ivan Zhao描述的 Notion 作为一款生产力软件，它就像的乐高拼块一样，它能做各种各样的事。从根本上来说，Notion 是关于我们如何将软件开发的能力带到大家手中。 这些block，就像乐高，用户可以使用这些block搭建他们想象中的任何事物。 任何事物，到底有哪些事物呢？能举例看看吗？ 太多了，比如Task Management、Timeline等等。 颜值颜值是我对notion印象的第二个词。 notion的颜值到底高在哪里？ 比如新建page。配图和图标，都是非常精妙的设计，让原本单调的纯文本，变成了像精心设计过的网页一样精美。 notion的颜值为什么这么高？站在notion背后的产品经理为什么会这样设计？ Notion 的想法是从我大学时候开始的，大学的时候我专业是认知科学，就是学习人的大脑怎么运作，带上一点计算机，一点哲学。但是我爱上了视觉艺术和摄影。 我真正开始的时候是快毕业的时候，我身边的朋友都是艺术家，而我是朋友圈里唯一一个知道怎么编程的人。所以我开始为我朋友写网站，然后他们可能请我吃个饭什么的，我不记得了细节了。做了大概4，5个网站后，我想我的朋友都很有创意，如果没有编程这个门槛的话，他们完全可以自己做网站。就像 Spotify，每个人可以在上面放音乐。Notion 作为工具，我希望大家能够做自己网站。那个时候，我在思考如何让大家能够制作属于自己的网站，而不需要通过编程。 我的理解，这个设计风格应该是来自于早期Ivan为他的朋友们写网页，创造出来的产物。不过以前，Ivan通过coding创造出这样精美的页面，现在Ivan将软件开发的能力，通过notion，交给了不会写代码的用户。 协作协作是我对notion印象的第三个关键词。只需要点击右上角的分享，我目前正在敲打的每一个字，就可以被放在网络上，任何人通过我的url链接，都可以阅读，然后获得反馈。 综上，是我对notion的3个关键词。 给世界一个更好的表达思考和想法的方法。 《Computer Lib &#x2F; Dream Machines》By Ted Nelson 写于2021年除夕。 一点题外话 我觉得这个产品好，这个工具好，这本书好。 你为什么觉得这个产品好，这个工具好，这本书好？是否能说出个所以然。 能描述出一款产品好，好在哪里，说出个所以然，这是做产品的一个重要的思维模型。（咦，似乎在大年三十晚上，我收获了一个思维模型！ 所以这个问题，可以被复用到 为什么我觉得craft好？ 为什么我觉得metion好？ 为什么我觉得tool for thought好？ 等等 #思维模型 #好在哪","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"Bear使用体验","slug":"Bear使用体验","date":"2021-01-16T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2021/01/16/Bear使用体验/","link":"","permalink":"https://kerryli1007.github.io/2021/01/16/Bear%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/","excerpt":"","text":"西蓝花是何人也？ 工具主义者。（嘿嘿 #01 为什么我痴迷工具？好的工具可以帮助用户塑造行为。 &#x3D;&#x3D;插图1&#x3D;&#x3D; 2017年到2019年这段时间，我没有定期输出的习惯。迫于工作压力，会进行一些输出，这部分输出都在石墨，石墨的定位是一款团队协作工具，但是使用起来，完全谈不上体验，我只是例行公事般地在上面做总结。后来接触了Bear，在Bear的陪伴下，我爱上了写作，不断地总结、反思、复盘。在这个工程中，我也爱上了工具。我意识到一款好的工具，是可以丰富人的想象力，增强人的能力。 We shape our tools, and then our tools shape us. 我在Bear上留下了1321篇笔记 我也从这个时候开始喜欢上研究各种写作工具。 如果说一款好的写作工具能让我爱上写作。那么——是不是一款好的协作工作，能提升团队协作的效率？是不是一款好的okr管理工具，能帮助我们更好地完成OKR？是不是一款好的职场沟通工具，能帮助职场同学，获得更多的反馈，更好地成长？（当我打下这段字的时候，我脑海里面疯狂地回想着Success Factor，年中和年底两次的绩效考核，说实话，光是让我研究这个产品该如何使用，就让我感到很烦躁了。就别提我是否能好地利用这个工具，来对我前一阶段的表现进行review，从中学习）上述都是一些很疯狂的idea，言归正传，说回Bear。 #02 为什么是BearBear，让写作成为了一种享受。 02-01 颜值说起来可能有点浮浅。对于Bear，我是“一见钟情”。但是背后的原因，异常简单，就是爱慕这款产品的颜值。 内置多个主题，供用户挑选，对于颜值党，这是必杀技。 ![image-20210213213311794](&#x2F;Users&#x2F;qiaoyili&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210213213311794.png) 图标标签，支持自定义。 ![image-20210213213417449](&#x2F;Users&#x2F;qiaoyili&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210213213417449.png) 02-02 便捷Bear到底有多便捷？ 便捷到command + N随时随地新开一个页面。 由于Bear的便捷，所以他的使用场景，基本上覆盖了我工作生活中的所有场景。 会议笔记。 复盘总结。 给好朋友写的生日祝福，写完之后可以导出为JPG图片，直接微信发送给朋友。 #03 为什么不是Bear03 -01 Bear的自身短板在产品设计上，Bear有一些致命短板，比如不支持TOC，不支持表格，不支持多媒介展示等。 这些产品Feature的使用场景分别是什么呢？ TOCTOC这个问题，我已经抱怨了有1年了。 ![image-20210213214729920](&#x2F;Users&#x2F;qiaoyili&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210213214729920.png) ![image-20210213214513496](&#x2F;Users&#x2F;qiaoyili&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210213214513496.png) 表格看一个APP Store的真实用户反馈 ![image-20210213214305682](&#x2F;Users&#x2F;qiaoyili&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210213214305682.png) 日常工作中，使用表格，基本上是一个Daily需求了，但是Bear一直都不支持， TOC和表格是两个最常见的场景，Bear迟迟不支持，挺伤人的啊！！！！ 03 - 02 Bear不足的衍生问题当Bear有上述一些不足时候，用户需要使用到TOC或者表格，就需要去其他软件中完成相关部分的操作，这直接就带来了一个问题，在不同应用中切来切去真的很痛苦！ 对于我来说，我经常写写写，但是如果发现我写的文章有一部分内容Bear不支持，那么我很可能就需要使用其他的编辑工具，比如语雀。过一阵子，我想起来我曾经写过这篇文章，我会先去Bear中搜索，但是其实这篇文章并没有在Bear中。 总结带来的衍生问题 需要用户在不同应用中切换 在不同应用中切换，随之带来的是管理成本的陡增 最后，希望能有一款工具，All in One。A tool for everything.","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"复盘从0到1搭建云OCR业务","slug":"20210116-【复盘】从0到1搭建云OCR业务","date":"2021-01-15T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2021/01/15/20210116-【复盘】从0到1搭建云OCR业务/","link":"","permalink":"https://kerryli1007.github.io/2021/01/15/20210116-%E3%80%90%E5%A4%8D%E7%9B%98%E3%80%91%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%BA%91OCR%E4%B8%9A%E5%8A%A1/","excerpt":"","text":"写在前面我西蓝花又回来了。很长一段时间没有更新，工作比较忙，虽然复盘和思考一直有做，但是一直没有抽出大块整片的时间来对自己的工作做梳理。自己也意识到这个状态不太好，时间挤挤总是有的，所以有了这个本复盘《从0到1搭建云OCR业务》，这个话题比较大，所以我会将其做拆分讲述。 自己在过去半年内，搭建了公司的云OCR业务。实现了公司云OCR从无到有，且和行业内一些头部的房地产公司实现合作，为部门创造了收益，故将此段经历记录下来，希望看到这篇文章的有缘人能从中有所收获，也希望自己在这个复盘的过程中，能有更多的成长。 复盘开始从0到1搭建云OCR业务，我将其拆分为如下3部分： 产品管理 竞品分析 GTM策略 产品管理大意是指，我们这套产品是如何在云上正常运转起来。竞品分析是分析竞品的优缺点，综合我们产品和竞品的特质，最后是GTM策略。 大纲1、OCR产品管理1.1 OCR能力管理1.1.1 OCR服务提供（API接口代码、API说明文档）1.1.2 版本管理（平滑产品升级）1.1.3 需求管理（需求判断逻辑）1.2 OCR外围Feature管理1.2.1 版本1 （账号、验证、计费）1.2.2 版本2（QPS管理）2、竞品分析（BAT竞品分析）3、GTM策略3.1 产品定位3.2 报价策略3.3 成本核算3.4 售卖模式 先把大纲列出来，慢慢填坑！","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Q4_Week3_工作总结","slug":"Q4-W3-工作总结","date":"2020-10-31T09:53:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/10/31/Q4-W3-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/10/31/Q4-W3-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"本周关键词：自信、细节和BigPicture、项目推进 谈一谈我对项目管理在这个阶段的认识最近和老板聊了一下自己前一个阶段的工作表现，老板给了很积极的反馈，说在项目管理上，我有很大的进步。 她给了几个她的观察：首先，我更自信了。第二，现在做项目，并没有像以前那样，过度关注细节。最后，在协调push项目进展方面，我的表现非常好。 一、关于自信这个感觉比较虚。自我感觉自信得增加是伴随着自己对公司业务的了解，一点点增加的。 二、关于细节和BigPicture细节和BigPicture的说法，还是比较抽象。我觉得更具体，并且有指导意义，就是优先级。 优先级的应用场景非常多。 场景1:客户提了3个需求。分析：是否3个需求都要满足？如果是，是否3个需求都要同时满足？项目的实际开展中，往往这两个问题都是否定回答。我们需要在这些需求中，找出客户最关注的，以及为这些客户关注的需求排列优先级。 场景2:同时跟进3个项目。分析：这3个项目，当前的阶段，以及其所处阶段的优先级判断。哪个阶段的最紧急，需要最多的支持。 …… 三、推进项目为什么说自己项目推进能力进步了不少？什么是项目？影响项目成功的因素有哪些？在哪些维度，我的能力有提升？ 影响项目成功的因素有哪些？从时间纵向来看，一个项目分为不同的阶段，在不同的阶段，有不同的目标，以及产出；在每一个阶段，从横切面看，这个阶段任务的完成，需要不同角色之间相互配合。 作为项目负责人。在这个过程中，面临的挑战有两个：一是大量的沟通，推进项目进展。二是在项目推进过程中，需要不断决策，因为项目的进展永远不可能一帆风顺，当团队遇到了棘手的问题，需要决策时候，这个时候，项目负责人应该是那个决策人。（因为其他人，没有人像你一样了解项目的整体，并且，其他人负责的是单独某个模块，也没有足够的ownership，在这个时间点向前迈一步） 为什么说大量的沟通是挑战呢？项目做多了，发现一个有意思的现象，大家会有一个看法：”你的这部分工作，不就是协调员的角色吗？“我理解大家的这种看法，确实，表面上看来，这份工作就是为大家分配工作，制定milestone，一不小心就成了协调员。我以前也会被这种想法困住，觉得项目经理就是协调员，但是近来一段时间，其实有额外的感受。 比如最近上线OCR云服务，从底层硬件，机房，物理服务器的准备，到模型，再到云服务。整个项目，涉及到多个部门，不同角色。底层硬件，涉及IT部门，IT部门中，又有不同的角色，负责物理机运维，负责虚拟化。模型层面，又分为模型效果以及模型性能。云服务阶段，又涉及到网关服务的开发，以及服务性能的测试。这些不同的模块，需要和不同的同事配合。从服务上线倒排时间，然后将每一个小模块的工作分配到具体的同事，和其沟通输入，以及期望输出，输出结果以及时间节点。确保其产出能被顺利使用，本身就是一件技术工作。 沟通能力差，或者，不注意细节的项目经理，在这个过程中，沟通成本会巨大。 那么我是如何提升沟通效率的呢？（干货阶段！！！！！！！！！！一到写干货的时候，就好困，想睡觉，呜呜呜） 第一，梳理清楚，合作部门的职能。该部门每个同事的分工，以及其汇报线了解每个同事的分工，便于我们找到对的人，支持我们的工作，了解其汇报线，方便我们在项目推不动的时候，找领导们push进展第二，清晰定义输出和输出发现很多项目经理，在协作时候，都只说希望对方做什么，但是不说为什么希望对方做？以及做这件事的意义是什么？这是两个维度。做这件事的意义，可以带给支持方成就感。（虽然说很多人都说，成就感这种很bullshit，但是我觉得，成就感，参与感是调用一个人积极性的重要因素）。这个在事前和事后，都可以阐述。 - 事前：我们和客户约定了本周五要交付这个环境，所以希望得到您关于……的支持 - 事后：感谢您的支持和配合，我们顺利向客户交付了……为什么希望对方做？ - 第一，这是对方的工作职能范围（这种是很好沟通的 - 第二，这不属于对方的工作职能范围，这个时候要怎么办（说实话，好像我还没有遇到这种情况？Emmmm 接下来就是清晰定义输出和输出，注意输出的制定一定要包括输出物料，以及输出的时间节点。（没有时间节点的项目管理就是垃圾） 为什么说大量的决策也是对项目经理的极大考验呢？因为项目的推进过程中，就不可能一帆风顺，当项目遇到困难了，下一步的抓手在哪里。比如在一个我们做的一个广告场景的营销推荐中，遇到了两次问题： 一次是线上测试时候响应时间无法达到要求 一次是客户的数据维度少，无法做出理想效果 碍于这两个问题，项目陷入了搁浅阶段。项目经理这个时候的角色，不是说，找别人去问要怎么办？这个时候，项目经理的作用是，分析现状，思考下一步的抓手。比如第一个问题的解决方案是，将服务器从自己的机房放到腾讯云上；第二个问题的解决方案是，引入第三方数据供应商。 总结一下，遇到问题，做出果断决策，找到下一步的抓手，这也是项目经理的工作范畴。而不是协调员！","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"work","slug":"work","permalink":"https://kerryli1007.github.io/tags/work/"}]},{"title":"全力以赴","slug":"全力以赴","date":"2020-09-12T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/09/12/全力以赴/","link":"","permalink":"https://kerryli1007.github.io/2020/09/12/%E5%85%A8%E5%8A%9B%E4%BB%A5%E8%B5%B4/","excerpt":"","text":"尽吾志也而不能至者，可以无悔矣，其孰能讥之乎。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Q3_W10_工作总结","slug":"Q3-W10-工作总结","date":"2020-09-05T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/09/05/Q3-W10-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/09/05/Q3-W10-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"回顾一下为什么每周写总结 写周总结，已经成为每周例行事项。但是，长时间做同一件事，很容易就流于表面，只想完成这件事，而忽略了当初为什么做这件事。 为什么写周总结？ 一开始，是想将当周的工作整理总结出来，并且从思考中获得一些收获，坚持了一段时间，算是跳出了我不习惯性复盘的舒适圈。但是陷入了第二个舒适圈，总结整理工作，复盘出可复用的方法论，但是缺少对整个市场的思考。因此，在接下来的周总结中，70%的内容，依然是本周的工作内容，以及从中沉淀总结的方法论，30%的内容，用来输出自己对市场，对大Picture的思考。 开始本周的总结吧。本周的关键词：模型训练、规则分析、 按照优先级来总结吧。 规则分析最近主要负责的CV项目有3个，2个OCR，1个CV类。 项目背景介绍为什么有这两个COR项目？ 客户是一家提供房地产服务的公司，在他们的业务链条中，需要将业务的房本上的信息录入系统，传统做这个的方式是人工录入，但是效率低下，因此需要借助OCR的能力来做。 为什么有这个CV项目？ 客户是一家配送公司，他们的配送小哥配送货物时候是需要穿工服的，但是有一部分小哥不遵守规则，不按照要求穿工服，因此，他们是有对其进行抽查检测。传统的检测流程是，配送小哥拍照，通过系统上传，后台人员检查其是否穿了工服，但是这种方式后台工作人员觉得太枯燥无聊，因此希望借助CV能力来做。 项目目标目标是根据业务定，在这里就不讲了。 数据准备对于定制化CV类项目，需要数据标注。数据标注规则，是需要根据业务目标来定义的。但是有一些通用的内容，做一下总结。 OCR也好、CV类项目也好，在分析我们要用什么方法做这个项目时候，我们都需要先分析图片，抽象出这些图片的特征。将这些特征写成固定规则，融合到模型中。 因为目前这几个项目尚未完全交付，所以细节不展开，之后补上。 根据自己要什么，然后来确定如何标注数据。 模型训练本周我开始在服务器上建模，虽然我自己一直会写代码，但都是在交互界面写，比如Jupyter，或者在自己的终端写，登上服务器写代码建模，还是第一次，开始有点焦虑，后来上手之后，觉得，嘿真方便。 OCR市场-从API调用说起的一些感想为什么做产品？因为有需求？ 在AI行业，为什么做OCR，将身份证信息，通过OCR将身份证上的信息转换成可编辑的文字。所以，将身份证上的信息，转换成可以编辑的文字，这是一个需求。当我们了解了这个需求之后，我们可以尝试思考一下，这个需求有多大。什么是需求多大，就是使用这个需求的人有多少，当然如果是B端用户，就要考虑，使用这个需求的B端客户有多少。除了思考需求的用户的量，还需要思考另一个问题，每个用户使用这些产品的频率有多高？综合这两个需求考虑之后，我们可以知道这个需求到底有多大。为什么我们要思考，这个需求有多大呢？使用用户的数量多寡，以及频率高低，直接影响着，产品生产厂商，可以通过这个产品获利多少。 所以，这就有了OCR产品。那么这个产品是如何向客户提供服务的呢？ OCR是软件产品。软件产品提供服务的方法，一共有两类：私有化部署、公有云。 OCR的需求很多场景都需要用户录入身份证信息，但是传统的方式，是用户用手写输入，这种情况效率低。因此，OCR是有市场需求的。 通用需求 VS. 定制化需求从产品售卖的维度来看，通用需求，是说，我们现有产品就可以满足用户需求；定制化需求是说，需要根据客户的需求，进行定制化。 通用需求的特点：基本上就满足上述描述的，使用用户多，且使用频次高。 定制化需求的特点：由客户单独提出，需要进行定制化开发，使用用户少，基本上就是单个客户 客户需求由于客户公司业务场景的差异，除了有大量的通用需求，也有大量的乱七八糟的小需求，这些需求，也可以称之为长尾需求。 [image:543DEB1B-E410-439D-A23D-6DAC9D531503-63028-000314905A6EC55E&#x2F;v2-3b21f991d3f0446ce30b9b33496e87ab_1440w.jpg] 长尾需求，频次低。当客户提出这样需求的时候，到底是做还是不做？ 抽象地讨论没有多大价值，我们将其放在特定的商业场景中。客户有一个ocr定制化需求，做还是不做？ 一般来说，如果说是私有化部署，那么可以做，因为可以赚一些钱。但是如果是saas需求，那么可能就没有必要做了，除非这些需求，有可能性未来发展成为比较大众的需求。 之前做AI众包时候，本身定位就是以云端交付的方式，来交付一些AI行业的长尾需求，但是做了一段时间之后，发现这类需求，存在一个问题，频次低，收益少。所以，做到后面也就没有做了。 emmm，写到这里吧，以后再更新。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"AI行业与长尾效应","slug":"AI行业与长尾效应","date":"2020-09-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/09/03/AI行业与长尾效应/","link":"","permalink":"https://kerryli1007.github.io/2020/09/03/AI%E8%A1%8C%E4%B8%9A%E4%B8%8E%E9%95%BF%E5%B0%BE%E6%95%88%E5%BA%94/","excerpt":"","text":"脑海里突然冒出来这个想法，起因是最近自己在做一些长尾的ai需求交付工作。毫无疑问，做这样的需求，当下是无法赚钱的，那么是不是说长尾需求就是没有意义和价值的？AI行业的长尾需求到底是什么？ 长尾效应是什么？二八定律和长尾效应二八定律 二八定律又名80&#x2F;20定律、 帕累托法则 （Pareto‘s principle）也叫巴莱特定律、朱伦法则（Juran’s Principle）、关键少数法则（Vital Few Rule）、不重要多数法则（Trivial Many Rule）最省力的法则、不平衡原则等，被广泛应用于 社会 学及 企业管理学 等。 二八定律是19世纪末20世纪初意大利经济学家帕累托发现的。他认为，在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的，因此又称二八定律。 工作中的二八，比如公司，赚的钱，还是来自于20%的大客户，而这些大客户其实是贡献了公司80%的营收。 了解一下理论来源： 1897年，意大利经济学者巴莱多偶然注意到19世纪英国人的财富和收益模式。在调查取样中，发现大部分的财富流向了少数人手里。同时，他还从早期的资料中发现，在其他的国家，都发现有这种微妙关系一再出现，而且在数学上呈现出一种稳定的关系。于是，帕累托从大量具体的事实中发现：社会上20%的人占有80%的 社会财富 ，即：财富在人口中的分配是不平衡的。 结论理解：大部分的财富流向了小部分的人手里。再具体一点，社会上20%的人占有社会80%的财富。 长尾效应在网络上看到一种非常有意思的观点：长尾理论是对二八定律的颠覆。 是这样吗？我认为并不是。最开始，我认为好像是这样。从表象上来说，二八定律是说80%的需求其实只能创造20%的价值，这80%的价值本质上来说，其实是挺小的；而，长尾效应说的是，尾巴上的那一段需求，实质上是能创造非常大的需求。 但是这只是从表象上来说。长尾效应其实是有其自身成立的前提条件的。这个在后面来细聊。 长尾效应定义： 效应，英文名称Long Tail Effect。“头”（head）和“尾”（tail）是两个统计学名词。正态曲线中间的突起部分叫“头”；两边相对平缓的部分叫“尾”。从人们需求的角度来看，大多数的需求会集中在头部，而这部分我们可以称之为流行，而分布在尾部的需求是个性化的，零散的小量的需求。 而这部分差异化的、少量的需求会在需求曲线上面形成一条长长的“尾巴”，而所谓长尾效应就在于它的数量上，将所有非流行的市场累加起来就会形成一个比流行市场还大的市场 为什么要聊长尾效应？因为长尾效应存在于客观世界，并且，创造着巨大的价值。 比起销售额，“长尾理论”的效应更能体现在产品利润上。 为什么会有长尾效应？长尾效应是有其存在的前提条件的。 大热门是提供匮乏的产物——如果只有那么几个货架、几个波段，唯一明智的做法就是把这点空间留给那些最热门的东西。但如果我们有无限多的货架呢？在这种情况下，只盯着大热门也许是错误的经商之道。毕竟，非热门远比热门要多，而且非热门与热门现在同样轻松可得。从真正的小市场产品到那些十足的“失败者”，如果所有这些非热门聚合成一个同样热门市场一样大的市场会怎么样呢？答案是显而易见的：这会彻底改变世界上某些最庞大的市场。 当物理空间不是市场的阻碍，收益可以被增加，成本可以被降低，那么长尾效应就来啦。 长尾效应的商业逻辑商业是什么？ 商业术语的历史大致可以分为以下三个时期：第一时期，从远古到1990年前后。这个时期虽然也存在着商业模式的概念以及相关术语，且这些概念和术语对日后诸多方面的变革都起到了决定性的作用，但当时使用他们的人却寥寥无几。第二时期，1991 - 2001年，为了解释互联网经济，商业术语在这一时期迅速发展至顶峰。商业模式作用之一是回答了“竞争优势的持续性”问题，作用之二是它回答了“革新方法”的问题。 归根结底，商业就是： 把采购来或生产出的价值提供给他人，以换取同等的价值。这些要素的组合就是商业模式。凡是有实力的企业无不拥有自己的商业模式。 长尾效应的商业逻辑是什么？我理解的商业，是有能力可持续地赚钱。 利润 &#x3D; 销售额 - 成本。其中，成本可以分为fixed cost 和variable cost。 这两种成本分别是什么，作何理解。 Variable costs vary with the amount of output produced, and fixed costs remain the same no matter how much a company produces.固定成本，是固定投入，不管商家生产多少商品，固定成本都是保持不变的。可变成本，是会变动的，商家生产的商品越多，成本越高。两者呈正相关。 看一下专业的讲解： 商家的成本由固定成本和变动成本两部分组成。固定成本是相对于变动成本来说的，指总额在一定时期和一定的业务量范围内，不受业务量增减变动的影响，并能保持不变的成本，例如厂房建筑、机械装备、卖场租金等都是属于固定成本范围。变动成本则与固定成本相反。 《长尾效应》一书写到： 处于“长尾部分的冷门商品，如果放在实体店内就成了占地方的赔钱商品，但放在网店上，哪怕全美只有一件，再怎么无人问津都不回增加成本。 这里其实提到了重要的一点，处于长尾部分的商品，增加这些商品，是不会增加成本的。 虽然，我对是否有成本的增加，有一些疑虑，但是我想结合当前2020年，我对市场的一些观察来聊聊这个观点。卖东西，在哪卖，卖什么，其实背后都是做生意，做生意就要考虑两方面：收益、成本。从长远来看，当收益能cover掉成本之后，这个生意就是值得做的生意。所以，对于网店这个生意，仔细分析一下 收益侧： 当有物理空间束缚时候，一件物品，只能卖给方圆5公里的人群，方圆5公里的消费人群，有如下特点：基数小、需求分散，对于实体商家来说，能做的最划算的策略，就是挑选出能够卖的最多的商品。假设售卖每件商品，都是净利润都是10块，那肯定是卖的越多，赚越多。 任何一件商品都可以辐射到全国，乃至全世界，看看现在的全球购。也就是说，尽管有一些小众需求，但是叠加在一起，也就成了大的需求。 成本侧 当有物理空间时候，商店要多卖一件商品，多半是需要将这个商品放在店内，这样，占地面积和物品数量呈线性相关。商品多，成本越高。同时，这种店一般都是需要开在商业区，商业区的房价有什么特点吗？就一个贵。 当没有物理空间时候，商家可以把店开在任何地方，比如一个小县城，甚至可以就在自己家开一个淘宝店，自己家就可以是仓库。如果有很多商品，那么租赁一个偏远库房，有订单直接发货，这样也是可以直接将成本降低。 综上，从收益侧和成本侧两方面综合考虑，我们可以对长尾效应有更进一步的理解。 结合最近工作一些思考总结： 思考1：如何切入一个市场 提供AI SaaS，如果单纯是卖API，当下确实是无法赚钱的，但是不能只看当下，要看长远未来的发展，如果想切入一个行业的话，如何找一个口子切入？但是，如何来判断这个口子是否切对了？ 思考2 ：为什么百度、腾讯云卖API？他们赚钱吗？ 首先，百度他们只是将为内部提供的一些AI能力，进行了一层封装，提供给市场，从这一层来说，这就是一个顺手的工作；其次，百度这样的大厂，比如他们有1000台服务器在对外提供服务，如果某个服务（OCR）负载高了，但是机器总体资源空闲率还可以，那就可以通过动态调度，用空余资源来服务这些请求，比如使用k8s这种服务编排能力（这就是云的真谛）；最后对百度来说吧，其实百度云对外提供这种OCR能力，也不打算靠这种小B赚钱，所以，人家给用户提供多少次数以下调用免费的quota，但是别人背后肯定还是有考虑的，比如通过这种方式收集数据，fine tune 模型表现，然后将这个好的模型卖给大B，一单几千万上亿。 接下来思考方向： 为什么亚马逊、淘宝能通过长尾效应赚钱？ AI行业的长尾效应，其实还没写，所以这篇文章有点名不副实 &#x3D; &#x3D;","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"AI项目落地Pipeline","slug":"AI项目落地Pipeline","date":"2020-09-02T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/09/02/AI项目落地Pipeline/","link":"","permalink":"https://kerryli1007.github.io/2020/09/02/AI%E9%A1%B9%E7%9B%AE%E8%90%BD%E5%9C%B0Pipeline/","excerpt":"","text":"今天整理以前的笔记，发现了自己在一年前写的关于AI落地项目Pipeline。觉得还蛮有意思，因为，毕竟一年又过去了，这一年中，自己精进了不少，所以，将这些经验一并总结出来。希望看到这篇文章的人，也能从中有所收获。 本篇总结的目标：在未来的AI落地项目中，参考本Pipeline，提升效率，降低沟通成本。 Pipeline一共有 5 部分: 项目启动 数据采集、标注、管理 模型训练与调试 模型部署与测试 项目交付 一、项目启动1.1 定义项目目标“项目”是指有合同&#x2F;任务支撑(特殊情况下会没有合同，先做项目，比如一些需要走政府招标的项目)，明确了交付目标与交付时间的交付型项目。@2019年版本 项目目标如何定，做AI项目，定项目目标时候，技术方，只能定出来技术指标，但是技术实现这个指标，能带给业务方多少收益，但是如何将技术指标和业务收益映射起来，这就是一件很难的事，需要业务方和技术方的相互配合。@2020年版本 1.2 评估基线在明确了机器学习任务后，首要需要考虑的就是“baseline”的问题。Baseline是客户可以接受，同时我们也能做出的成绩。在双方达成Baseline的时候，需要和技术专家一起确定。@2019年版本 同时，是需要进行一个换算，就是Baseline到多少时候，带给客户的收益是能够cover掉我们的成本支出。这个指标是很难定的，在项目前期评估阶段，我们一定要知道客户业务流转，每个环节是什么，这些环节的业务逻辑是什么。同时，再大一点看，我们需要知道这个市场是怎么回事。最近和朋友沟通，他在一家百年造车企业，和我分享了他做市场研究的一些心得。@2020年版本 市场规模、发展趋势、市场特征、竞争者调研。主要是这4部分，其中，让我印象最深刻的是，在市场特征这块，是需要了解这个行业的value chain，从上游到下游，这个行业到底是如何转动。这个链条里面，客户所在的环节，扮演什么样的角色，他的上下游分别是什么。这些都是需要了解的，可以帮助我们作出更好的判断。@2020年版本 1.3 定义指标 负责人@销售 @项目经理 @ 算法@架构我们和客户的指标制定，除了模型的效果，还包括模型的性能。 1.3.1 模型指标 分类指标。用recall和precision，并且，一般会用“F1 score”评价算法整体表现。但在制定标准时候，需要结合实际业务场景，明白“查准优先”还是“查全优先”。关于查准和查全的详细分析，可以参考另一篇文章NLP相关文章，尚未发布，日后更新。 目标检测。CV项目，会用到 IOU(交并比)、或者ROI 1.3.2 模型性能 每秒查询率QPS： 每秒查询率是对一个特定的查询服务器在规定时间内所处理流量多少的 衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。@2019年版本 我目前其实是将QPS理解为，我们的算法能力，每秒能处理几个请求。这个其实是很根据场景来定的。比如，ML项目，客户是DSP，对QPS的要求，测试阶段就要上100。CV项目，OCR识别，测试阶段，可能客户对QPS没啥要求，能在一个时间段内跑完一个数据集即可。需要注意的是，如果是以SaaS的形式，提供OCR服务，QPS和卡数量的关系，是需要严格计算。但是这个问题对于大厂看比如百度、阿里，是没有问题的。这个问题，还是在另一篇文章中详细介绍。@2020年版本 响应时间(RT )： 响应时间是指系统对请求作出响应的时间。这个指标对人与软件性能的主管感受是非常一致的。@2019年版本 说白了，就是反应时间快慢。比如DSP项目，整个实时竞价的全流程只有100ms，那给我们算法模型的，能有多少毫秒，再加宽带传输时间加上。这些都是时间，上次和AWS的谈合作。他们和我们说，他们的价格和腾讯云相比，也是非常有竞争力的，但是机器是在宁夏。那这行吗？这就不行，我们给北京的广告客户做项目。服务器在宁夏，传来传去，那宽带传输耗时就很久了。比如，OCR识别，现在有一个很典型场景，很多商场，五彩城这种，是可以用吃饭发票换积分，流程就是这个图片传输给小程序后台，小程序后台给出结果。这种to c的，直接面向消费者的，一般也是需要不说实时，但是也是需要在短时间内能出结果的。 API调用成功率： 这个成功率 &#x3D; 分子(分子是调用成功的次数) &#x2F; 分母(分母是客户调用 API的次数)⚠影响是否调用成功的因素是服务器是否在线。@2019年版本 什么是API调用成功。一个API调用的全流程是什么样子的。客户端发起一个请求，服务器后端接到这个请求，后台完成处理并发出，这个时候会返回200。这是一个标准协议。一般我们是用这个来界定什么是API调用成功。@2020年版本 并发：并发是一个处理器同时处理多个任务。 模型性能指标的制定，一定是要和算法工程师、后端一起确认。 另外，对于生产部署，一定会有相关的技术指标，比如并发、速度，如果是实时视频的推理，还会有FPS的要求等。如果合同内明确了部署环境的说明，那么这些指标的可实现性就有明确的测算依据。如果，对于部署、推理环境没有明确说明，那么一定要提前沟通， 不一定一次沟通就能定下来，但是大方向要清晰。GPU还是CPU还是FPGA，具体型号，配 置。 如果是实时视频的推理，还要明确是1080还是720或者更高，结合并发要求，测算一下网 络环境的上行带宽够不够。不要等到交付部署了，前期测试也一切正常，正式使用了，发 现网络给你一个小水管，还要你大并发。 未完待续～（ &#x3D; &#x3D;","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"关于中台的一点思考","slug":"关于中台的一点思考","date":"2020-09-02T12:43:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/09/02/关于中台的一点思考/","link":"","permalink":"https://kerryli1007.github.io/2020/09/02/%E5%85%B3%E4%BA%8E%E4%B8%AD%E5%8F%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/","excerpt":"","text":"START WITH WHY | 最近和朋友在讨论中台，将大家的一些交流整理如下 什么是中台，我对中台的理解：在业务生产过程中重复使用到的组件，抽离出来，避免重复造轮子。 什么企业适合做中台呢？这个和业务量没有关系。判断标准是，看多条业务线的特征，其重合度。是否有非常多的基础性建设，是重复的。 再具体一点呢？ 比如做了O2O、社区团购、B2C商城。都需要用到购物车、支付、订单、售后、结算。那就可以考虑中台来统一支持，这些事核心且重复的模块。如果每个业务都自己搞这些模块，那就是浪费资源。 换句话说，如果，只有一个业务，也要做中台，那就没有必要了～ 分界线上面是今年5月份关于中台的思考，最近工作生活中，有了一些新的思考，总结整理出来。 最近在阅文做推荐策略的朋友聊他的工作。了解到他的工作主要是做中台，主要是给内容打分，给人做标签，然后将这一套东西给多个业务线使用。比如红袖、起点、QQ阅读、webnovie等等。 然后今天去和某上市集团公司聊业务（听起来很牛逼，就是一个很小的小单子）。客户主要是做房产相关的业务。 他们有两个部门，一个是做金融业务、一个是做二手房业务。两个部门业务开展的流程中，都有一个环节，是需要识别客户的身份证信息，以及房本信息，还有一些POS小票信息。原来这些信息都是人工录入。但是录入这些信息的人员觉得这个工作量很大，或者说做起来错误率很高，所以其实是希望由API来自动实现这个功能的。 经过ROI的评估，最后决定从外部采购这部分能力，然后集成到自己的系统。一般来说，需要哪些功能，是业务方提出。然后产品经理对这些进行抽象，提出需要哪些字段的ocr能力，最后由研发来实施集成。 其实客户他们有中台，一般来说，这个ocr能力的集成，应该是他们中台先集成，然后分发给各个部门使用，但是由于他们的中台建设还很早期，所以是他们的业务部门来自己集成。 这就是我对中台更近一步的理解。其实，结合我自己的日常工作。其实我司呢呢？最底层的隐去就相当于中台了吧，很多软件都是基于能力的开发等等。 不断更新自己的认知，还蛮有意思。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Q3_Week9_工作总结","slug":"Q3-W9-工作总结","date":"2020-09-01T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/09/01/Q3-W9-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/09/01/Q3-W9-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"关键词：SaaS、Docker、API 碎碎念：从这三个关键词，可以直接看出，上一周，我的工作内容，非常技术。 SaaSSaaS主要在这里是说，将OCR部署上云。 发生了一件什么事？我们将公司的OCR以API接口调用的方式，售卖给了客户。 客观现实是什么？公司的产品开发，支持的是私有化部署，也就是客户买一套，然后部署到自己的机房。但是，我们是将产品放在云上售卖，因此，原生的OCR就不能直接售卖。需要有一些二次开发。 目标是什么？需要我们做什么？目标是我们需要让ocr能够在云上，以saas服务的形式进行售卖。要实现这个目标，需要在ocr能力之外做一些开发。 ocr能力是什么？简单地说，就是将一些票证上的文字，识别出来，成为可编辑的文字。 在此能力之外具体是说什么？既然我们要将能力以调用次数的形式售卖给客户，因为是按次计费，所以，我们需要知道客户调用次数，这是其一；其二是我们为这个API接口进行验证，为什么呢？如果我们不加验证，提供了客户A这个接口，但是在交接过程中，接口不小心被一个第三方劫持了，那是不是说，这个第三方，就可以随意调用我们的接口了，在产品设计时候，我们就需要考虑这种情况；其三是来自客户的定制化需求，一个公司里面会有不同的BU，每个BU需要计算其ROI，使用我们的接口，是支出，那么当然需要计算成本。 上面都是业务需求，对应到产品需求，需要： 记录API调用的日志，这样我们可以计算每个客户调用了多少次 设置验证机制 区分不同部门的调用 定义好产品需求之后，接下来的就是研发的工作了。 API调用时候，客户必然关心的事有： 调用单价 QPS DockerOCR的交付是我负责。因为公司的HyperCycle OCR仍然在研发中，因此，需要在Terminal界面进行训练，所以需要进行一些命令行的工作。 API一些技术知识。 这周的总结感觉有点水，主要是Docker和API都是很技术的内容，考虑了一下，还是单独写吧。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"推荐系统实战 ｜ 第一章 好的推荐系统","slug":"推荐系统实战-｜第一章-好的推荐系统","date":"2020-08-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/08/22/推荐系统实战-｜第一章-好的推荐系统/","link":"","permalink":"https://kerryli1007.github.io/2020/08/22/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98-%EF%BD%9C%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%A5%BD%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"最近再次阅读《推荐系统实战》。第一次阅读《推荐系统实战》是一年前了。时隔一年，再次阅读本书，有了很多不一样的收获。一年前自己的思维，还是过于稚嫩，果真，只有在工作的捶打之下，方能快速成长。 个性化推荐系统的应用，作者从8个应用，分别列举了一些工业最佳实践。 每个细分场景，都涉及到蛮多的Domain Knowledge。我工作中接触最多的两部分是电子商务和个性化广告。 乘着重温书本的机会，将各个子领域进行一下认识，同时，侧重梳理分析【电子商务】和【个性化广告】。 电子商务说起推荐系统在电子商务的运用，就不得不提亚马逊。 为什么不得不提亚马逊呢？ 首先，亚马逊市值1.5万亿美元。全球一共有几家超过万亿美元的公司？ 如果我们要了解某个技术在工业界的落地，我们肯定是需要去了解和学习那些牛逼的公司是怎么应用这些技术的。 其次，亚马逊的前科学家Greg Linden在他的博客里面曾经说过，在他离开亚马逊的时候，亚马逊至少有20%（之后的一篇博客更为35%）的销售来自推荐算法。 并且，亚马逊CEO在接受采访时候曾经说过，亚马逊相对于其他电子商务网站的最大优势在于个性化推荐系统，该系统让每个用户都能又有一个自己的在线商店。 推荐算法对亚马逊营收的重要性由此可见一斑。 放眼国内，淘宝、京东、拼多多，无一例外，都在做个性化推荐。 对于电商推荐系统，都会遇到哪些问题呢？ 一个大的电商会有海量的数据，上亿的消费者和数以百万计的商品。 基本上所有的请求都要求实时返回高质量的请求结果。 一个来到网站上的新用户，其信息有限。 老的客户有过多的信息，他们有数以千计的购买和评分。 消费者的数据是变动的：每次交互都会提供珍贵的消费者数据，并且要求模型能实时将这些新的数据纳入，并作出回应。 针对这些通用的问题，一般有三种通用的解法： 传统的协同过滤 集群模型 基于搜索的方式 推荐算法大多数推荐算法最开始都是去寻找一大群有相似行为的用户。算法对这些有相同行为的用户购买的物品做聚类，清楚这些用户已经购买了的商品，给他们推荐尚未购买的商品。这种寻找人物相似性的方法有两个代表算法：协同过滤和聚类（cluster models）。而其他的算法，专注于寻找物品的相似性，代表性的算法有基于搜索的算法和亚马逊的item-to-item的协同过滤算法。 传统的协同过滤是什么？特点是什么？ 传统的协同过滤算法将每个消费者视为一个N维向量，这里的N是item的数量。 对于所有的消费者来说，这个向量都是非常稀疏的。这也非常好理解，比如在淘宝上，有那么多的商品，一个商品是一个维度，一个普通的用户，肯定只是购买了其中的很小一部分的商品。 协同过滤算法计算用户之间的相似度。计算方式是计算两个向量之间的cosine。 但是这又有另外一个问题，就是这样的计算耗费的时间是非常大的。如何解决这个耗费时间大的问题呢？减少数据量？我们可以随机抽样。但是，抽样的话是会减少推荐的效果的。 聚类算法为了发现相似的消费者，聚类模型可以将消费者分为很多segment，并且将任务视为一个分类问题。算法的目标是将消费者分到有最多相似消费者的组内，接着基于这个segment来产生推荐。 基于搜索的算法基于搜索或者基于内容的算法将推荐问题时为寻找相关item的问题。基于消费者的购买的活着相关的item，算法会生成一个query来寻找其他同一个作者、艺术家或者导演的受欢迎的item。 Item-to-Item 协同过滤item-to-item协同过滤将消费者购买的和评分的相似商品放在一个待推荐List中。 对于一个给定的item，为了找到和这个item最相似的商品。 参考论文：Amazon.com Recommendation Item-to-Item Collaborative Filtering 顺便补充一下，这篇论文发布于2003年，是电商推荐领域一篇非常经典的文章。 电影和视频网站NetflixNetflix在2006年举办了著名的Netflix Prize推荐系统比赛。希望参赛人员能将推荐算法的预测准确度提升10%。 Netflix宣称，有60%的用户是通过其推荐系统找到自己感兴趣的电影和视频的。 YouTubeWHY？ YouTube拥有大量用户上传的视频内容，由于视频库非常大，用户在YouTube中面临严重的信息过载问题。 HuluHulu也是一家美国著名的视频网站，也有自己的个性化推荐页面。 上述的3家企业都是外国的，放眼国内，我自己常用的视频网站，腾讯视频、B站，都也是在用推荐策略。 对于，视频类推荐，我了解还是蛮少的，不过还是有一点比较好奇，视频内容都是靠人工标签来做定义吗？会存在失真吗？ 个性化音乐网络电台 个性化推荐的成功应用需要两个条件。第一是存在信息过载，因为如果用户可以很容易在所有物品中找到喜欢的物品，就不需要个性化推荐了。第二是用户大部分时间没有特别明确的需求，因为如果用户有很明确的需求，可以直接通过搜索引擎找到感兴趣的物品。 我用过的做个性化音乐网络推荐的： 网易云音乐 QQ音乐 豆瓣FM 社交网络社交网络中的个性化推荐技术主要应用在3个方面： 利用用户的社交网络信息对用户进行个性化的物品推荐 信息流的会话推荐 给用户推荐好友 提起社交网络推荐，就不得不提微博，微博的推荐做得还是蛮好的。 基于位置的服务基于位置的服务，可以叫出名字的APP，大众点评、美团外卖，了解具体细节可以参考文章：美团DSP广告策略实践。 个性化邮件其实个性化邮件的本质，也是一个分类问题，将邮件的类别做分类。 之前给某公司做的项目，就是给他们收到的投诉邮件做分类，是基于NLP做的。 个性化广告广告是互联网公司生存的根本。很多公司都致力于广告定向投放（Ad Targeting）的研究，即如何将广告投放给它的潜在客户群。 推荐和广告的区别，个性化推荐着重于帮助用户找到可能令他们感兴趣的物品，而广告推荐着重于帮助广告找到对它们感兴趣的用户，即一个是以用户为核心，而另一个以广告为核心。目前的个性化广告投放技术主要分为3种： 上下文广告 通过分析用户正在浏览的网页内容，投放和网页内容相关的广告。代表系统是谷歌的Adsense 什么是上下文广告？ 参考文章 https://patents.google.com/patent/CN101079043A/zh https://cloud.tencent.com/developer/article/1138732 搜索广告 通过分析用户在当前会话中的搜索记录，判断用户的搜索目的，投放和用户目的相关的广告 这个代表的公司，就是百度。今天和朋友聊百度提升其整体流量价值，说到了精准投放，以及优化广告创意，但是没有谈到说准确理解用户意图，其实理解用户意图也是非常重要的一个模块。 对于搜索引擎来说，最重要的是两件事，第一是智能程度，指的是理解用户意图和文档，然后快速找出答案，这是智能部分；第二是自然程度（Naturalness），指的是根据用户输入的搜索请求，把搜索结果很自然地展现给用户，整体表现就是搜索非常流畅。自然语言从搜索引擎出现开始一直到今天为止，都对搜索引擎的智能和自然这两个方面起到了极为重要的作用。《微软亚洲研究院周明：NLP的进步将如何改变搜索体验？》 估计在如何理解用户意图这里，也是有专门的人在做。关于理解用户意图，可以参考上述文章。 个性化展示广告 个性化定向投放是很多互联网公司的核心技术，雅虎公司发表了大量个性化广告方面的论文。 雅虎有很多相关的论文吗？我还挺好奇的，如何搜索，他们都是什么内容？","categories":[{"name":"广告系统/推荐策略","slug":"广告系统-推荐策略","permalink":"https://kerryli1007.github.io/categories/%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F-%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5/"}],"tags":[]},{"title":"第二章 云服务模式","slug":"20200822-第二章-云服务模式","date":"2020-08-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/08/21/20200822-第二章-云服务模式/","link":"","permalink":"https://kerryli1007.github.io/2020/08/21/20200822-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"第二章 云服务模式2.1 基础设施即服务（IaaS） 有 3 种云服务模式：软件即服务（SaaS）、平台即服务（PaaS）、以及基础设施即服务（IaaS）。每种云服务模式都通过某种程度上的资源抽象，来减低消费者构建和部署系统的复杂性。 美国国家标准与技术研究院（NIST）对IaaS的定义如下： 消费者能够获得处理能力、存储、网络和其他基础计算资源，从而可以在其上部署和运行包括操作系统和应用在内的任意软件。消费者不对云基础设施进行管理或控制，但可以控制操作系统、存储、所部署的应用，或者对网络组件的选择有部分控制权。 在IaaS中，涉及管理和维护物理数据中心和物理基础设施（服务器、磁盘存储、网络等）的许多工作，都被抽象成一系列可用服务，可以通过基于代码和网页的管理控制台进行访问和自动化部署。 虚拟的基础设施是一种可计量的服务，只有在开启并使用的时候才会计费，关闭时便不再累计成本。 🤔 所以，IaaS是什么？为什么有IaaS？他解决了谁在什么场景下的什么问题？市场上有哪些有名的IaaS？他们为什么这么有名？我的工作和IaaS有交互吗？具体是怎么交互的？有了这些IaaS为我或者公司的公司带来便捷了吗？ IaaS，基础设施即服务。 西蓝花希望开始她的创业之旅，售卖健身服饰。她会设计一个网站，网站是运行在服务器上的，因此，她需要服务器。这个时候，她可以选择，去购买一些物理硬件，放在机房，并且聘请一个专业的人员来运维，因为西蓝花不懂如何运维机器。但是，她的好朋友告诉她，可以直接去阿里云租用云服务器。这样，她就不需要机房，也不需要聘请一个专业的人员来运维机器了。在阿里云上买云服务器。阿里云提供的云服务器，就是基础设施。将物理硬件抽象成可按量（多少、时间长短）售卖的资源。 这就是我对基础设施即服务的理解。但是为什么有IaaS呢？是市场需求催生了这样的产品吗？还是说现有产品，市场看到了，就采用了呢？ IaaS解决了谁在什么场景下的什么问题？ 传统使用服务器的方式 从供应商处订购硬件，然后等待发货、签收、拆封、组装、再进行配置。还需要专业的人，对硬件进行运维。耗时几周不等。 IaaS提供服务器的方式 直接打开浏览器，去阿里云、腾讯云购买云服务器。 IaaS提供服务的利弊分析 利： 可扩容 架构合理，成本降低 弊： 数据安全隐患 市场上有那些有名的IaaS？他们为什么这么有名？ 市场上最有名的IaaS莫过于亚马逊的AWS。 国内有名的阿里云、腾讯云。 他们为什么都这么有名呢？ 为了了解云计算的起源，我参考了吴军老师《浪潮之颠》第26章 云计算。 云计算的本质，最早提出云计算的三家公司因为他们的核心商业模式和利益不同而在看法上差异巨大。 B端巨头IBM。IBM服务的对象依然是企业级用户，直到2012年，它的商业模式主要是卖云计算的服务器，这是IBM对云计算的理解。因此，到目前为止，吴。它还没有像亚马逊一样提供对外服务的超级数据中心。但是，2012年依赖，它对云计算的认识也从卖机器上升到了对外提供各种并行计算和存储服务。 电子商务公司亚马逊。作为一家互联网公司或更准确地说是电子商务公司，亚马逊对云计算的理解和IBM完全不同。为了满足众多商家的网站托管需求，亚马逊开始自建数据中心。这时，亚马逊发现，它不仅可以为商家提供网站托管服务，还可以为任何需要建立网站的公司提供。这样，任何想通过互联网提供服务（包括电子商务）的公司和个人都无需自建网站，而只要租用亚马逊的计算资源即可。这就是亚马逊理解的云计算，和IBM理解的完全不一样，但并不矛盾。IBM可以作为亚马逊的服务器供应商，只要亚马逊觉得价钱合适。 Google。Google将逐渐原本在用户本地计算机上的各种应用软件搬到了服务器端。Google把本来运行在客户端的许多应用软件的主要功能，包括处理和分享图片的Picasa，类似Office的字处理、表格处理和讲稿演示（Presetation）搬到了服务器端，或者说云端。这些免费的替代品能完成Office90%以上的功能。其次，Google这些在线的应用团建分享数据和信息的功能要比PC上同类产品强得多。如果一个小组一同起草一份文档，用Google Docs比用微软的Office要方便很多，虽然前者排版不如后者漂亮。这个分享功能成了Google基于云端应用和服务的卖点。 综合IBM、亚马逊和Google，我们可以得出云计算的本质。 首先云计算保证用户可以随时随地访问和处理信息，非常方便地与他人共享信息。第二，云计算保证用户可以使用云端的大量计算资源，包括CPU处理器和存储器（内存和磁盘），而无须自己购买设备。 还挺有意思，在阅读吴军老师文章之前，我对云计算的理解，停留在阿里云、腾讯云上。读了之后，我好像又有了一些不一样的理解，怎么说呢？ 阿里云和腾讯云这种，是云计算中的IaaS。而，Google Docs，国内类似的有石墨文档，是云计算中的SaaS。看，这就是认识上，更进一步了。有一种，啊哈的感觉。 我的工作和IaaS有交互吗？具体是怎么交互的？ 有交互啊！最近SF模型上线。本来我们的模型是部署在公司自己的机房的，但是由于域名解析耗时过长，无法满足客户线上生产环境的要求，所以我们换到了腾讯云。腾讯云就是腾讯的机房，给我们提供了几台服务器，我们可以在这些服务器上部署模型、部署数据库。 具体的交互是如何的呢？ 我还记得，API刚在自己机房上线时候。在测试其性能时候，有两个主要特征： API响应时间长 API响应时长有抖动 造成上述两个结果的因素是带宽网络问题。虽然我们努力进行了优化，但是结果不理想，所以最后还是上云了。 2.2 平台即服务（PaaS） 再往上一层是PaaS。IaaS指基础设施层面的服务，PaaS是相对于应用。PaaS再IaaS的上面一层，将大部分标准化的应用栈的功能抽象出来，将之以服务的形式对外提供。 PaaS服务提供商管理应用平台，向开发者提供一套工具来加快开发流程；而开发者再使用PaaS服务时，由于受到这些工具和软件包的约束，再某种程度商要放弃一些灵活性。 先知就是一个PaaS平台，向开发者提供一套工具，来降低AI应用的开发以及上线成本。使用先知的用户，受到约束，比如必须使用强制数据管理功能，使用Jupyter的同时，只能使用平台内置的包，是不能自己安装包的。 所以到底什么是PaaS？为什么会有PaaS？PaaS是生产工具吗？我工作和PaaS的交集是什么？有我喜欢的PaaS吗？ 其实我对PaaS的理解就是一个工具。我的工作就是卖PaaS，卖这个平台。 emmmm，最后一个问题，好像暂时没有 &#x3D; &#x3D; 。 2.3 软件即服务 堆栈最上面的是SaaS。SaaS是一种以服务形式向消费者交付的完整应用。服务消费者要做的只是堆一些具体的应用参数进行配置和堆用户进行管理。服务提供上则负责处理所有的基础设施问题，所有的应用逻辑，部署以及所有与交付产品或服务相关的事宜。较常见的SaaS应用包括客户关系管理（CRM）、企业资源计划（ERP） 看了吴军老师对云计算的讲解后，我对SaaS的理解更深啦～SaaS分为To B或者To C的吧，不过市场上讲的更多的都是To B。比如上述摘录中的CRM、ERP啊，但是也有To C的，比如石墨文档、Process On。 我觉得这些都是非常有意思的概念。了解这些概念，然后和工作生活结合起来，非常有意思～","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"Q3_Week8_工作总结","slug":"Q3-Week8-工作总结","date":"2020-08-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/21/Q3-Week8-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/08/21/Q3-Week8-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"为什么每周都写总结？ 我越来越觉得，从每周的工作中，发现收获，是一件有趣的事，是一种，哇，原来在这里，我又进步了。 废话不多说，开始本周的总结啦。 本周关键词：抢资源、微服务、广告系统、以及思考。 抢资源仔细想了想，觉得这样表达更合适“抢资源”。 在公司里面，资源有限，大家都有需求，那么如何让自己的需求在项目ddl之前，完成研发，这就需要“抢资源”。 表明一下我对“抢资源”的态度。首先，我觉得这不是消极的表达；其次，不管是在大公司还是在小公司，资源总是紧张的，这是常态；最后，如何优雅地将自己的需求排进研发周期，这是每个PM需要在自己职业技能树上点亮的一个星星。 职场上一个常见的场景是，五六七八个需求方，都拿着自己的PRD和研发说，自己的需求很紧急。那如何合理地将自己的需求放进排期里面呢？ 梳理出四步： 知己知彼，百战不殆。 正反两个维度分析 人员分工是否合理 项目本身，是否有折中方案 知己知彼，百战不殆出自《孙子.谋攻》，意思是如果对敌我双方的情况能了解透彻，打起仗来就可以立于不败之地。 这一步是说，我们需要知道，和我们一起在需求池中排优先级的项目，他们都分别是什么项目，是产品GA，还是项目交付，分别是什么产品和项目，这些都要弄清楚。 要抢资源，就像要和其他需求打仗，如果PM自己都不知道，自己在和什么需求竞争，那还抢什么？不如打开电脑，看韩剧吧，起码可以收获傻白甜的快乐。 正反两个维度分析了解和一起抢需求的项目是什么，那么接下来我们需要知道，这些需求是否是必须按时完成，如果不按时完成，代价是什么？如果不按时完成，也没有后果，那是不是就可以delay？（虽然这种情况不常见，但是也不能从一开始就排除这种情况，所以一定要了解透彻 人员分工是否合理比如，现在有10个需求，都垒到了研发A这里，那明显A已经take 不过来了。这个时候，我们需要问一句？为什么都需要A来做？ 首先，从技术栈上来说，A是不是实现这个需求的最佳人选； 其次，从部门分工上来说，A是不是需要take 这10个需求。 项目本身，是否有折中方案如果上述几步分析下来，发现，我们还是没有办法优雅地将需求插进去，那么我们是不是可以看看我们自己的方案，是不是必须沿用当前的技术方案，有没有可以代替的技术方案，可以在更短时间内完成。 基本上，上述几步走下来，“优雅地抢资源”这件事就差不多啦～ 如果还不行，那就向上汇报吧，请老板们去协调资源。老板也是我们手里的资源，学会使用资源是很重要的一门职场技巧。 微服务微服务，中间件，拆解，可复用的组件（慧斌的推荐系统中有讲解） 什么是微服务？知乎有一篇解释，我觉得其讲述非常深入浅出，参考链接https://www.zhihu.com/question/65502802/answer/802678798 说一下，我对微服务的理解（对，在任何时候，都要梳理自己的看法，表达自己的观点） 我理解的微服务就是接耦。将一些模型拆解出来，单独构成一个独立自主的模块。这个独立自主的模块，就是微服务。 好处是这样的微服务，可以被重复使用。 广告系统关于广告系统的思考，整理在其他地方了。 思考每周一个思考：我的优势是什么？我的劣势是什么？如何最大化发挥自己的优势？ 优势： 有耐心。Hadoop监控。 劣势： 技术认知积累差。对Hadoop本质上是没有认知的，所以需要从0到1去了解这是什么。 最后：目前到了一个阶段，刻意练习自己的思考能力。反思自己优点、缺点的能力。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"脱不花的三盏明灯","slug":"脱不花的三盏明灯","date":"2020-08-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/08/21/脱不花的三盏明灯/","link":"","permalink":"https://kerryli1007.github.io/2020/08/21/%E8%84%B1%E4%B8%8D%E8%8A%B1%E7%9A%84%E4%B8%89%E7%9B%8F%E6%98%8E%E7%81%AF/","excerpt":"","text":"今天读了脱不花的自述《脱不花：我的前半生，三盏明灯》。 插一点题外话，我的阅读生涯，其实有点崎岖。 我是从小就爱阅读，至今我仍然记得对我阅读影响最大的两件事：第一件是小学3年级时候，阅读6年级的课本，其中一篇给我的印象最为深刻，叫做《喂，出来》；第二件事小学3年级，妈妈买了一本成语词典送给我。 《喂，出来》是一篇科幻微小学，开启了我看书的兴趣，妈妈送的成语词典，为我解答了大量年级尚小时候不认识的文字。 对阅读的热爱延续到初中，曾熬夜打着手电筒读过《威尼斯商人》、张爱玲的《半生缘》、《倾城之恋》、还有莎士比亚的一些作品。 后来上了高中，成绩一落千丈，作文也写得破烂不堪，遂放弃阅读。再然后上了大学，在迷惘无所适从的大学生涯，又将阅读的兴趣捡了回来，因为彼时一心专研情绪&amp;积极心理学，于是读遍了图书馆里能找到的所有相关书籍。不过在大学时代的阅读，我自己并未意识到，读书能带给我什么。毕业工作后的两年，一心工作，遂又将读书的习惯弃之一旁。接着，我认识了虾宝，她告诉了我关于读书的2个认知： 其一是读书的乐趣在于，了解世界的规律，本身就是一件有趣的书 其二是读有品味的书，读没有品味的书，就想吃屎，吃多了屎，味觉就不灵了。 这两点我都赞同，尤其是第二点。想来，高中时期，我也阅读了一些没有品味的垃圾书，想来，我那不怎么良好的阅读习惯，也有这些垃圾书脱不掉关系。 如今，我自认为是养成了好的读书习惯： 读有品味的书，有辨别书籍品味的能力 将书中的内容，融会贯通进自己的逻辑体系 讲完阅读生涯，记录一下我阅读脱不花这篇文章的零星感受。 第一次看到脱不花这3个字，是在虾宝的博客。她在博客里写到：想成为一个很牛的人，比如像脱不花那样的女强人。这是我对脱不花的第一次认知，她是一个女强人。（开智大会·一年记）第二次看到脱不花，是她关于有用的价值观。这是我对脱不花的第二次认知，她是一个非常追求自我价值感的人。第三次看到脱不花，则是这篇文章。女强人，追求自我价值感，这些都是独立的标签。阅读完这篇文章之后，对脱不花的职业成长道路，有了更深刻的认识。 下面是一些感受总结： 对自卑的感悟 对写作的感悟 对与人相处的感悟 自卑与超越 从我自己身上，我深深地体会到，所有的自大都是源于自卑，而那些最自卑的人身上往往会产生最强的攻击性。 脱不花对她第一次和湛祥国在三明治店会面时心理活动的描述，印象深刻，她刻画道： 我知道至少该由我来买吃的，但是说实话，关于快餐我只知道肯德基和麦当劳，我真的不知道该怎么在这样洋气的店里点一份三明治。湛先生看出我在柜台那儿磨蹭，轻轻走过来，非常自然的接管了点餐这件事。之后，就是我俩一人举着一个火鸡三明治，蹲坐在门口的小板凳上开始看材料。 我们每个人都在和自卑对抗，自卑会成为我们超越、追求优越的动力，但不要过度夸张的追求优越感，过度的追求容易成为炫耀。 写作与思考关于写作，方希给了脱不花这几点意见： 写作是件麻烦事，不过反正都很麻烦，干嘛不做点有难度的呢？有难度是有价值的前提，那些难度不大的事留给平庸的人做吧，费这个劲干什么。要写一本内容和形式天衣无缝的书，我的建议就这么几条儿：第一：一定是自己说话的德性，既不是S的，也不是B的，更不是SB的，只是自己的；第二：想想自己在干的事和价值目标，要全面匹配；第三：想想目标读者，他们都在你笔记本的对面，对着他们说话，掏心窝，捞干货，亮绝活。 我感觉写作是一个过程，这个过程有3个要素：输入，加工，输出。没有输入的话，脑子里空空如也，无话可说，无句好写。没有对输入进行加工，辅之以自己的认知，将其融汇贯通，那这个输入，还谈不上成为了自己的。没有输出的过程，我们也无法检验反思我们加工是否合情合理。 很长一段时间，这个很长是指，从我高中到毕业后两年的这段时间，对于写作这件事，我都感到非常痛苦。 高中时候痛苦，语文作文得分低，甚至很长一段时间，我都做噩梦，高考语文作文没有写完。大学时候痛苦，因为大学时候，荒废了学业，没有足够的输入，脑子空洞无物，好像只会说“卧槽”，“牛逼”。 毕业后亦是如此，信息过载的时代，注意力即经济，为了抓住我们广大消费者的注意力，各种文章遣词造句，都恨不得把一句话，拆成3句话，将里面的逻辑，嚼碎了，喂给读者。这样有两个影响，读者的注意力确实是被抓住了，不过长时间接受这样的营养，大脑就会习惯只对这种信息进行加工，而逻辑更复杂，需要我们读者自己去思考，去理解的文章，我们便再也没有能力去阅读。注意哦，是我们便再也没有能力去阅读需要我们思考其中逻辑的文章了。 我也是这样，大概半年前，我有下笔综合症，我记得我去年12月份刚开始写了一篇项目管理相关的文章，正沾沾自喜，拿给好友Reid看，他给了反馈 1. 你并没有大量的项目经验去支撑你体系化、结构化这个事情 2. 你并没有大量的工作正式书面文档的训练，让你具备快速写看起来专业度过关的文章 听完Reid的反馈，脸火辣辣的，觉得羞愧。他说的挺对的。不过，从此之后，我开始了持续不断地写，每一段话，每一句话，其背后的逻辑关系，都是我脑子里逻辑的体现。 经过半年，持续不断的写，终于，我不再每次写作时候，每个字都像需要从脑海中给挤出来一样。 这是关于写作，我第一阶段的感悟，就是多写。又过了一段时间，我有了关于写作的第二个感悟，那就是，写作要负责任，负责任的意思指自己明白自己说的每一句话的意思。 今天看到方希给脱不花关于写作的意见，觉得获益良多。尤其是第一点，一定要是自己说话的德性。 与他人相处 明海大和尚有一次看似无意地说道：“与人交往，要做好两个前提准备：一是要坚信对方是好人，二是要明了对方是凡人。是好人，就必然有向善、行善的需求，是凡人，他的情绪和意识就必然有善变、不稳定的一面。在这两个前提下与人交往，就必然会超脱和豁达，也会更具备与人方便的能力。” 与人交往这里，我就不添加赘言，明海大和尚这句话已经说得非常明了。 综上，是我阅读脱不花三盏明灯的感受。 如此这般精彩的文章，读一次，定不能尽兴。Mark一下，之后再重温～ 最后：其实这是3个月前写的文章，晚上翻阅到，遂重新阅读，分外有滋味，欣喜于3个月前的自己，竟然写出了这样有真情实感的文章。","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"我们为客户提供的价值是什么","slug":"我们为客户提供的价值是什么","date":"2020-08-18T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/08/18/我们为客户提供的价值是什么/","link":"","permalink":"https://kerryli1007.github.io/2020/08/18/%E6%88%91%E4%BB%AC%E4%B8%BA%E5%AE%A2%E6%88%B7%E6%8F%90%E4%BE%9B%E7%9A%84%E4%BB%B7%E5%80%BC%E6%98%AF%E4%BB%80%E4%B9%88/","excerpt":"","text":"最近在思考一个问题，我们对于客户的价值到底是什么？帮助客户赚更多的钱？或者帮助客户节约大笔的钱。既然是做生意，我们的价值肯定逃不出这两个点，要么是帮助客户赚更多的钱，要么是帮助客户节约更多的钱。脱离了这两点，我们的工作无意义。 了解客户业务 但是我们提供的服务，并非直接是和客户说，我们帮你下一个Q赚多少钱。我们通过了解客户的业务链条： 了解客户如何赚钱。 了解客户内部的运营工作如何开展。 从经营和运营2个角度来和客户一起思考。在特定的场景里，我们的技术如何产生价值。 经营层面上，始终思考：客户目前如何赚钱？我们如何帮助客户赚更多的钱？ 做推荐项目时候，客户说，我们想做product recommendation。 做广告项目时候，客户说，我们想将自己的DSP做起来。 为什么客户要做product recommendation？为什么客户想做自己的DSP。他们背后的利益考虑出发点是什么，这个利益出发点就是我们是否能成单的关键。 技术指标和商业价值 但是又有另外一个问题，我们提供的技术，我们和客户定的指标，一般是技术层面上的。 NLP OCR项目，我们定Recall 60, Precicision 90。但是，我们最后要将这个服务卖给客户，所以就必须量化该服务能产生的价值。如何量化呢？我们又需要回到客户的实际业务场景中，去了解这个工作的上下游如何完成。将我们的服务嵌入到客户原有流程中，能替换到多少重复的人力，从而节省多少开销。被节省的这一部分，就是我们技术产生的价值。所以，我们不能只看技术指标，看回到业务中，看商业价值。 商业价值的大小 同事有一个观点：价值的大小是商务关注的。客户成功关注的是帮助客户成功。 我的理解是，乙方为甲方提供服务，我们是在做生意，卖服务也好，卖纯产品也好，都需要明白，客户从我们这里获得的交付，产生的价值是什么，以及这个价值有多大。明白自己交付的价值有多大，才能好地衡量ROI。如果从短期来看ROI不合适，那么我们看长期ROI，是否这个单子可以做标杆客户，帮助我们未来用这个case去拿更多的客户，是否做这个单子，有战略层面上的意义。只有真的明白了，我们做这个项目的价值点到底在哪里，才有意义。 综上，是一些琐碎的思考。","categories":[{"name":"客户（用户）价值随想录","slug":"客户（用户）价值随想录","permalink":"https://kerryli1007.github.io/categories/%E5%AE%A2%E6%88%B7%EF%BC%88%E7%94%A8%E6%88%B7%EF%BC%89%E4%BB%B7%E5%80%BC%E9%9A%8F%E6%83%B3%E5%BD%95/"}],"tags":[]},{"title":"关于广告平台价值的思考","slug":"20200816-关于广告平台价值的思考","date":"2020-08-15T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/08/15/20200816-关于广告平台价值的思考/","link":"","permalink":"https://kerryli1007.github.io/2020/08/15/20200816-%E5%85%B3%E4%BA%8E%E5%B9%BF%E5%91%8A%E5%B9%B3%E5%8F%B0%E4%BB%B7%E5%80%BC%E7%9A%84%E6%80%9D%E8%80%83/","excerpt":"","text":"思考第一个问题： 广告平台的价值是什么？ 如何实现这些价值？ 往上一层思考，中国互联网广告市场最近5年的变化？ 中国互联网广告未来5年的机会？ 一、广告平台的价值是什么？对广告主，也就是广告平台的下游而言 最底层的价值，帮助广告主，完成一些对接工作。广告主对接流量平台毕竟不是专业的，广告平台可以提供对接层面的价值。 往上一层，business 业务价值，广告主对投放的经验少，广告平台有经验，可以提高投放效率。 除此之外，还有其他价值吗？在提供价值的过程中，这些平台都遇到了什么问题，他们都是如何解决的？ 其他价值，暂时无思路。 提供价值过程中，遇到的问题。数据质量差，无法构建自己的DSP，从而自己手里无流量，只有拿着广告主的预算，作为一个中介的角色，去渠道方投放，广告平台在这个中间的角色，成为了一个中介。造成这个情况的原因，数据质量差：字段维度少，数据条数少。如何解决，求助与第三方提供供应商。但是这样一来，又会遇到其他问题，数据泄漏用户隐私，涉及合规。如何解决这个问题，我所了解的，有两个解法：1是对撞，2是借助第三方独立平台。 二、如何实现这些价值？ 对接渠道多。渠道多，直接说明流量大，用户画像多，故而可以接更多的广告推广。 投放效率高。 广告优化师有效率，可以及时根据数据情况，调节CPM 系统（产品）给力，可以通过精准投放，CPC 三、往上一层思考，中国互联网广告市最近 5 年的变化？ 在信息流还没有起来的时候，百度是广告投放的大佬，掌握着搜索引擎入口，尽情地赚钱；字节跳动的信息流起来，从字节跳动、到抖音，广告投放的形态随之也发生了变化。但是本质是没有变化的，还是信息和人的最优匹配。 四、中国互联网广告未来5年的机会？暂时没有思路。","categories":[{"name":"广告系统/推荐策略","slug":"广告系统-推荐策略","permalink":"https://kerryli1007.github.io/categories/%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F-%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5/"}],"tags":[]},{"title":"Q3_W7_工作总结","slug":"Q3-Week7-工作总结","date":"2020-08-15T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/15/Q3-Week7-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/08/15/Q3-Week7-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：总结本周收获。 关键词：局部最优解，讨论命题还是讨论目标，个性化推荐营销？ 写在前面，转眼间，已经是Q2的第七周了，时间真的太快了。这一周，我成长了吗？ 这周的总结，从整体来看，分为两部分：一部分是思维层面；一部分是具体细节层面。 局部最优解 局部最优解，是指对于一个问题的解在一定范围或区域内最优，或者说解决问题或达成目标的手段在一定范围内或限制内最优。——百度百科 局部最优 VS. 全局最优，这是一种思维方式。 如何跳出当前的眼界，局限，尽量地思考全局最优，看到更大的图画。刻意练习？但是如何刻意练习？在做决定之前，问自己，这个解法是局部最优，还是全局最优？有什么上层的因素影响着当前这个情况，我是否可以找到上层的因素，做一些改变。 讨论命题还是讨论目标说实话，命题和目标的讨论，其实和上面的全局最优和局部最优，有一些相似之处。讨论命题的话，更像是局部最优，讨论目标更像是全局最优。 老板说，做项目时候，和科学家沟通时候，要避免陷入命题式讨论，不要提出很多条条框框，来和科学家讨论，在这些条条框框下，我们如何做。我们需要跳出这些条条框框，看到目标，看到如何我们才能实现目标，而不是看到条条框框。条条框框是可以打破的。 时刻盯着目标，如何approach目标，而不是关注当下的困难。但是这又会陷入另一个极端，缺乏脚踏实地。如今互联网容易赚的钱已经没有了，如果要把事做成，就需要干一些苦活、累活。 所以，如何balance这两者，需要在工作中不断调节，把握。 个性化推荐营销个性化营销方式，这算是很具体的细节了。 在营销场景，有两种营销方式：短信营销、邮件营销。 这两种营销方式的差别是什么： 短信只能展示一个链接，邮件可以在内容页展示推荐的item 要看到推荐内容，短信需要点击链接，进入landing page，才可以看到；而邮件的话，进入邮件内容页就可以看见。 短信营销的特点：点击率低，内容暴露层级深 邮件营销的特点：点击率低，内容暴露层级浅 总结： 短信营销是否做用户分层；邮件营销适合做个性化推荐 一句话送给本周：Zoom In &amp; Zoom Out。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"关于热情、量化价值的一点思考","slug":"20200809-关于热情的一点点思考","date":"2020-08-08T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/08/08/20200809-关于热情的一点点思考/","link":"","permalink":"https://kerryli1007.github.io/2020/08/08/20200809-%E5%85%B3%E4%BA%8E%E7%83%AD%E6%83%85%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E6%80%9D%E8%80%83/","excerpt":"","text":"最近看了一篇文章，原文找不到了，大意是一位产品经理分享她的经验，那就是如果通过热情，调动研发的积极性，让大家在同一战壕战斗。 让我想起了两件小事： BCG面试反馈 价值100万的Bug&#x2F;Feature你修不修，开发不开发？ BCG面试反馈这是很早之前啦，那个时候，我还在咨询公司实习。 去BCG面试，是的就是那个很洋气的BCG。面试完，照例是会要反馈，对那次的反馈，我印象非常深刻。 面试官希望你在面试过程中，展示出更多的热情。 前期沟通的时候，你的兴趣表达乏善可陈，到了后面，聊到PD1&#x2F;PD_L1时候，很明显，你有兴趣，沟通的过程中展示出了极大的兴趣。这也反应出，可能你对PD1&#x2F;PD_L1很熟悉。 但是我们更期望你，全程都有passion。因为，我们是乙方，我们需要通过passion来感染客户。 虽然，我现在已经不记得什么是PD1&#x2F;PD_L1了。但是这次反馈，对我来说，还是非常有意义。 时刻保持热情。 价值100万的Bug&#x2F;Feature创业公司，资源紧张。发现了一个Bug，扔进Bug池，不知道何年何月才能排到；想要新增一个feature，prd写好了，研发资源也不知道要排多久。这些都是司空见惯的事。 但是，如果这样说： “我发现了一个价值100万的Bug？有时间修一下吗？”或者 “我新增了一个feature，prd写好了，上线可以提升日活10%？能挤进下个版本的排期吗” YES。不单单表达要做什么，更要表达，做这件事的价值。量化价值，这很重要。 工作总结 用热情感染同事 用量化价值的方式，推进项目","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"云服务模式","slug":"云服务模式","date":"2020-08-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/07/云服务模式/","link":"","permalink":"https://kerryli1007.github.io/2020/08/07/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"说明：这是《让云落地 ｜ 云计算服务模式》中的第二章。好书～ 这就是我们客户一直想要的，能帮他们摆脱大型机和C&#x2F;S结构软件，更进一步的东西。——salesforce.com首席执行官马尔科.贝尼奥夫 2.1 基础设施即服务（IaaS） 有 3 种云服务模式：软件即服务（SaaS）、平台即服务（PaaS）、以及基础设施即服务（IaaS）。每种云服务模式都通过某种程度上的资源抽象，来减低消费者构建和部署系统的复杂性。 美国国家标准与技术研究院（NIST）对IaaS的定义如下： 消费者能够获得处理能力、存储、网络和其他基础计算资源，从而可以在其上部署和运行包括操作系统和应用在内的任意软件。消费者不对云基础设施进行管理或控制，但可以控制操作系统、存储、所部署的应用，或者对网络组件的选择有部分控制权。 在IaaS中，涉及管理和维护物理数据中心和物理基础设施（服务器、磁盘存储、网络等）的许多工作，都被抽象成一系列可用服务，可以通过基于代码和网页的管理控制台进行访问和自动化部署。 虚拟的基础设施是一种可计量的服务，只有在开启并使用的时候才会计费，关闭时便不再累计成本。 🤔 所以，IaaS是什么？为什么有IaaS？他解决了谁在什么场景下的什么问题？市场上有哪些有名的IaaS？他们为什么这么有名？我的工作和IaaS有交互吗？具体是怎么交互的？有了这些IaaS为我或者公司的公司带来便捷了吗？ IaaS，基础设施即服务。 西蓝花希望开始她的创业之旅，售卖健身服饰。她会设计一个网站，网站是运行在服务器上的，因此，她需要服务器。这个时候，她可以选择，去购买一些物理硬件，放在机房，并且聘请一个专业的人员来运维，因为西蓝花不懂如何运维机器。但是，她的好朋友告诉她，可以直接去阿里云租用云服务器。这样，她就不需要机房，也不需要聘请一个专业的人员来运维机器了。在阿里云上买云服务器。阿里云提供的云服务器，就是基础设施。将物理硬件抽象成可按量（多少、时间长短）售卖的资源。 这就是我对基础设施即服务的理解。但是为什么有IaaS呢？是市场需求催生了这样的产品吗？还是说现有产品，市场看到了，就采用了呢？ IaaS解决了谁在什么场景下的什么问题？ 传统使用服务器的方式 从供应商处订购硬件，然后等待发货、签收、拆封、组装、再进行配置。还需要专业的人，对硬件进行运维。耗时几周不等。 IaaS提供服务器的方式 直接打开浏览器，去阿里云、腾讯云购买云服务器。 IaaS提供服务的利弊分析 利： 可扩容 架构合理，成本降低 弊： 数据安全隐患 市场上有那些有名的IaaS？他们为什么这么有名？ 市场上最有名的IaaS莫过于亚马逊的AWS。 国内有名的阿里云、腾讯云。 他们为什么都这么有名呢？ 为了了解云计算的起源，我参考了吴军老师《浪潮之颠》第26章 云计算。 云计算的本质，最早提出云计算的三家公司因为他们的核心商业模式和利益不同而在看法上差异巨大。 B端巨头IBM。IBM服务的对象依然是企业级用户，直到2012年，它的商业模式主要是卖云计算的服务器，这是IBM对云计算的理解。因此，到目前为止，吴。它还没有像亚马逊一样提供对外服务的超级数据中心。但是，2012年依赖，它对云计算的认识也从卖机器上升到了对外提供各种并行计算和存储服务。 电子商务公司亚马逊。作为一家互联网公司或更准确地说是电子商务公司，亚马逊对云计算的理解和IBM完全不同。为了满足众多商家的网站托管需求，亚马逊开始自建数据中心。这时，亚马逊发现，它不仅可以为商家提供网站托管服务，还可以为任何需要建立网站的公司提供。这样，任何想通过互联网提供服务（包括电子商务）的公司和个人都无需自建网站，而只要租用亚马逊的计算资源即可。这就是亚马逊理解的云计算，和IBM理解的完全不一样，但并不矛盾。IBM可以作为亚马逊的服务器供应商，只要亚马逊觉得价钱合适。 Google。Google将逐渐原本在用户本地计算机上的各种应用软件搬到了服务器端。Google把本来运行在客户端的许多应用软件的主要功能，包括处理和分享图片的Picasa，类似Office的字处理、表格处理和讲稿演示（Presetation）搬到了服务器端，或者说云端。这些免费的替代品能完成Office90%以上的功能。其次，Google这些在线的应用团建分享数据和信息的功能要比PC上同类产品强得多。如果一个小组一同起草一份文档，用Google Docs比用微软的Office要方便很多，虽然前者排版不如后者漂亮。这个分享功能成了Google基于云端应用和服务的卖点。 综合IBM、亚马逊和Google，我们可以得出云计算的本质。 首先云计算保证用户可以随时随地访问和处理信息，非常方便地与他人共享信息。第二，云计算保证用户可以使用云端的大量计算资源，包括CPU处理器和存储器（内存和磁盘），而无须自己购买设备。 还挺有意思，在阅读吴军老师文章之前，我对云计算的理解，停留在阿里云、腾讯云上。读了之后，我好像又有了一些不一样的理解，怎么说呢？ 阿里云和腾讯云这种，是云计算中的IaaS。而，Google Docs，国内类似的有石墨文档，是云计算中的SaaS。看，这就是认识上，更进一步了。有一种，啊哈的感觉。 我的工作和IaaS有交互吗？具体是怎么交互的？ 有交互啊！最近SF模型上线。本来我们的模型是部署在公司自己的机房的，但是由于域名解析耗时过长，无法满足客户线上生产环境的要求，所以我们换到了腾讯云。腾讯云就是腾讯的机房，给我们提供了几台服务器，我们可以在这些服务器上部署模型、部署数据库。 具体的交互是如何的呢？ 我还记得，API刚在自己机房上线时候。在测试其性能时候，有两个主要特征： API响应时间长 API响应时长有抖动 造成上述两个结果的因素是带宽网络问题。虽然我们努力进行了优化，但是结果不理想，所以最后还是上云了。 2.2 平台即服务（PaaS） 再往上一层是PaaS。IaaS指基础设施层面的服务，PaaS是相对于应用。PaaS再IaaS的上面一层，将大部分标准化的应用栈的功能抽象出来，将之以服务的形式对外提供。 PaaS服务提供商管理应用平台，向开发者提供一套工具来加快开发流程；而开发者再使用PaaS服务时，由于受到这些工具和软件包的约束，再某种程度商要放弃一些灵活性。 先知就是一个PaaS平台，向开发者提供一套工具，来降低AI应用的开发以及上线成本。使用先知的用户，受到约束，比如必须使用强制数据管理功能，使用Jupyter的同时，只能使用平台内置的包，是不能自己安装包的。 所以到底什么是PaaS？为什么会有PaaS？PaaS是生产工具吗？我工作和PaaS的交集是什么？有我喜欢的PaaS吗？ 其实我对PaaS的理解就是一个工具。我的工作就是卖PaaS，卖这个平台。 emmmm，最后一个问题，好像暂时没有 &#x3D; &#x3D; 。 2.3 软件即服务 堆栈最上面的是SaaS。SaaS是一种以服务形式向消费者交付的完整应用。服务消费者要做的只是堆一些具体的应用参数进行配置和堆用户进行管理。服务提供上则负责处理所有的基础设施问题，所有的应用逻辑，部署以及所有与交付产品或服务相关的事宜。较常见的SaaS应用包括客户关系管理（CRM）、企业资源计划（ERP） 看了吴军老师对云计算的讲解后，我对SaaS的理解更深啦～SaaS分为To B或者To C的吧，不过市场上讲的更多的都是To B。比如上述摘录中的CRM、ERP啊，但是也有To C的，比如石墨文档、Process On。 我觉得这些都是非常有意思的概念。了解这些概念，然后和工作生活结合起来，非常有意思～","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"关于思维模型，以及元认知的思考","slug":"关于思维模型，以及元认知的思考","date":"2020-08-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/07/关于思维模型，以及元认知的思考/","link":"","permalink":"https://kerryli1007.github.io/2020/08/07/%E5%85%B3%E4%BA%8E%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%85%83%E8%AE%A4%E7%9F%A5%E7%9A%84%E6%80%9D%E8%80%83/","excerpt":"","text":"一、思维模型和元认知1.1 思维模型什么是思维模型？ 我理解的思维模型，是我们思考问题的方式。系统思维是一种思维模型，批判思维是一种思维模型，创新思维也是一种思维模型…… 掌握不同的思维模型，帮助我们处理工作生活中遇到的各种问题。 什么是多元思维模型？ 第一次看到“多元思维模型”在别人推荐《穷查理宝典》一书。 要想成为一个有智慧的人，你必须拥有多个模型。而且，你必须讲你的经验，无论是间接的，还是直接的，都放在构成这种模型的风格上。——查理.芒格 我们能通过这些思维模型，提高对事物的认识。 1.2 元认知元认知一词最早出现自美国儿童心理学家弗拉威尔（J.H.Flavell )在1976年出版的《认知发展》一书。所谓元认知就是对认知的认知，具体地说，是关于个人自己认知过程的知识和调节这些过程的能力，对思维和学习活动的知识和控制。 简单来说，元认知就是对自己思考过程的认知和理解。 1.3 思维模型和元认知要成为一位准备工作做得比较充分的思考者，能够使用各种思维模式来进行思考，这是认知，而且还要能够意识到自己当前使用的是哪一种思维模型，以及为什么要使用这种思维模型，这是元认知。 二、为什么谈思维模型和元认知2.1 为什么我们需要思维模型 一个不依靠理论指引而盲目热衷实践的人就向远航的船员失去船舵和罗盘一样，永远都不回知道他到底身在何处。莱昂纳多.达芬奇 思维模型对于我们而言，就是指导我们远航需要的船舵和罗盘。 《模型思维》一书介绍的模型分为三类：对世界进行简化的模型、用数学概率来类比的模型以及人工构造的探索性模型。 这些模型听起来都比较抽象，举一个我认为，不那么抽象，但是也可以称之为模型的思维结晶。比如，算法竞赛所用的模型。从数据处理、特征工程、到算法选择。高手们，都积累和沉淀了自己的方法论。这样的方法论，我认为也是一种模型。 再举一个例子，比如5W1H，也是一种模型。当有一个新的项目在谈时，我们需要了解：是谁（WHO）出于什么样的目标（WHY）想要解决什么样（WHAT）的问题，他们期望何时（WHEN）何地（WHERE），通过什么样的形式（HOW）来解决这个问题。这个模型是可以指导我们分析项目，更好地了解项目背景以及目标。 2.2 为什么我们需要元认知元认知可以帮助我们更好地调节在何种场景下，选择何种模型。 三、如何获得思维模型以及如何使用元认知3.1 如何获得思维模型总结经验如下： 阅读 总结自己的经验 阅读阅读和总结，是我理解的获得思维模型的两大途径。通过阅读，我们可以学习别人的思维模型，比如通过阅读《穷查理宝典》，我们可以向芒格学习，通过学习《模型思维》我们学习学习其中的一些有趣的思维模型。 摘录几个思维模型： 耐心 富有耐心，不耐烦地等待。 渴望证实和承认自己的错误 查理养成了一种异常罕见的性格——愿意甚至渴望去证实和承认他自己的错误，并从中吸取教训。他曾经说：“如果说伯克希尔取得了不错的发展，那主要是因为沃伦和我非常善于破坏我们自己最爱的观念。哪年你没有破坏一个你最爱的观念，那么你这年就白过了。” 查理喜欢把人们的观念和方法比喻为“工具”。“如果有了更好的工具，哪还有什么比用它来替代较为没用的旧工具更好的呢？ 上述两个模型是我摘录穷查理宝典中的模型。 总结自己的经验不断总结，不断复盘。这也是我一直都在践行的原则。 四、最后阅读、思考、总结，并从中获得无限乐趣。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Docker、K8S入门（小白篇）","slug":"Docker、K8S入门（小白篇）","date":"2020-08-05T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/05/Docker、K8S入门（小白篇）/","link":"","permalink":"https://kerryli1007.github.io/2020/08/05/Docker%E3%80%81K8S%E5%85%A5%E9%97%A8%EF%BC%88%E5%B0%8F%E7%99%BD%E7%AF%87%EF%BC%89/","excerpt":"","text":"背景：作为人工智能行业的弄潮儿，工作中基本上每天都能听到K8S系统、Docker交付等名词，虽然在技术上，我不是专业的，但是作为一名勤奋努力的人工智能交付先锋，我决定，还是把我对Docker、K8S的理解，整理出来。也希望看到这篇文章，同样也为小白的朋友，能从中学得一二。 怕什么真理无穷，进一寸有一寸的欢喜。《进一寸有一寸的欢喜：胡适谈读书》 Docker从虚拟机到容器虚拟机是什么？虚拟机背后的原理是什么？虚拟机是运行操作系统和应用程序的软件计算机。注意：虚拟机是软件计算机，这是虚拟机和硬件计算机，也就是你和我都在使用的电脑的本质区别。操作系统是Windows、Ubantu，应用程序就是我们日常用的，比如说QQ、Wechat。 要了解虚拟机，就需要了解虚拟机背后的技术 &gt;&gt; 虚拟化。 虚拟化是使用虚拟机管理程序软件从一台物理设备中创建出若干个虚拟机（VM）的过程。虚拟机的行为和运转方式与物理机一样，但是虚拟机会使用物理机的计算资源，比如CPU、内存和存储。虚拟管理程序会根据需要将这些计算资源分配给每个虚拟机。 虚拟机与物理机的对比 物理机：左边，原来如果我们需要3个操作系统，那么我们也需要 3 个硬件，比如说，我们需要3台电脑，来分别安装3个操作系统虚拟机：右边，现在我们需要3个操作系统，但是我们需要一个硬件就够了。 从容器到Docker容器与管理里的机器程序虚拟化（hypervisor virtualization, HV）有所不同，管理程序虚拟化通过中间层将一台或多台独立的机器虚拟运行于物理硬件之上，而容器则是直接运行在操作系统内核之上的用户空间。因此，容易虚拟化也被称为“操作系统级虚拟化”，容器技术可以让多个独立的用户空间运行在同一台宿主机上。容易并没有得到广泛的认可，一个很重要的原因就是容器技术的复杂性：容器本身就比较复杂，不容易安装，管理和自动化也很困难。而Docker就是为这一切而诞生。 从虚拟机到DockerDocker在虚拟化的容器执行环境中增加了一个应用程序部署引擎。该引擎的目标就是提供一个轻量、快速的环境，能够运行开发者的程序，并方便高效地将程序从开发者的笔记本部署到测试环境，然后再部署到生产环境。Docker极其简洁，它所需要的全部环境只是一台安装了兼容版本的Linux内核和二进制文件最小限的宿主机。Docker的目标是提供以下这些东西 提供一个简单、轻量的建模方式 职责的逻辑分离：使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。 快速、高效的开发生命周期：Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性、易于构建、并易于协作。 鼓励使用面向服务的架构贴几个Docker和虚拟机的对比 Docker的核心组件Docker的核心组件 Docker客户端和服务器，也称为Docker引擎 Docker镜像 Registry Docker镜像 K8S什么是KubernetesKubernetes，从官方网站上看到，它是一个工业级的容器编排平台。 K8S为什么用舵手来命名呢？参考下图这是一艘满载一堆集装箱的轮船，轮船在大海上运着集装箱奔波，把集装箱送到他们该去的地方。K8S的寓意就是称为运送集装箱的一个轮船，来帮助我们管理这些集装箱，也就是管理这些容器。 具体一点来说，K8S是一个自动化容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Q3_Week5_工作总结","slug":"Q3-Week5-工作总结","date":"2020-08-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/04/Q3-Week5-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/08/04/Q3-Week5-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论 本周关键词：绩效、项目管理、产品GTM 绩效本周聊了绩效。 老板给了一些反馈，归纳起来，是三点： 上半年的表现，达到预期。 最近1个月，成长特别明显。 下半年，部门的主要精力，都会花在跑客户，整个交付后端就交给我负责了。 短期目标和长远目标一晃眼，也到新部门半年多了。从开始的吃力，到现在处理项目得心应手，确实是有了一大段成长。 到新部门之后，给我印象很深刻的一点是，新部门会将一些行业解决方案，总结成可复用的材料，并且会在之后打客户的时候，有针对性的选择客户发力。2019年下半年，我们做众包时候，其实是有相同思路的。当时，我们做得多的主要在NLP和CV方向，NLP方向，我们当时做实体抽取，有了一套完整的方法论，但是出去打客户的时候，因为我们获取线索的渠道实在是太单一了，主要靠部门那几个人，所以，基本上这条道路没有怎么走通，但是其实思路是一致的。包括，2019年下半年底的时候，我们将一些CV解决方案，包装为成熟解决方案，比如说火灾识别、安全帽识别，我们其实都是有好的解决方案的。 目前部门，使用AutoML，对一些特定场景，做出了很成熟、且可复用的解决方案，场景包括营销场景、广告CTR场景。我觉得，这其实是算是短期目标和长期目标结合地比较好的一个真实case。短期是为了部门赚钱，我们要拿下这个case，长期是，如何让部门持续赚钱。上周末和NLP BU Leader聊天，他和我们分享说到，很多时候，老板看问题的角度，其实和我们是不一样的。我们看到的是，当下这个东西，做还是不做，是否能给部门赚钱。Leader看到的是，做这个东西，长远看来是否是有好处的，做了这个，会不会让手里的牌更好看，换句话说，就是是否有利于长远目标的实现。这其实是短期目标和长期目标之间的博弈，关于这个主题，我单独总结了一篇文章，叫做《Long Term Vision VS. Short Term Goal》。 人工智能交付先锋：从项目到交付后端老板说希望下半年，我将部门整个交付后端take过来。我就自信地将这个认为是对我能力的肯定吧（厚脸皮 交付人工智能项目，并不是一件简单的事。从底层资源，中间层算法，再到上层业务。作为交付先锋，每个环节都需要理解。说到这里，我还有一个印象异常深刻的点，在做项目时候，有时候，项目会进入我极度不熟悉的领域，比如API性能不达标，需要更新部署架构。这种时候，由于不熟悉，我难免会往后退一两步，不冲在那么前面。但是Leader和我说：“在一个项目中，你应该是最了解项目每个环节的人。算法工程师也好，架构也好，他们对项目的关注，都没有你高。他们对项目成功的渴求，也没有你高。所以，你一定一定是那个对项目最了解的人。”这句话，真的说到我心坎上了。在广告CTR项目中，调节部署架构时候，真的是在我知识盲区，所以我下意识就躲闪，但是后面，架构调整带来的问题，接二连三，我还是step ahead，开始将里面每个环节理顺，理清楚，最后解决了一系列的问题。所以，总结下来就是，作为人工智能交付先锋，一定要时刻站在项目中间。并且，当项目陷入困境时候，站出来，告诉大家“听我的，接下来我们这样做。” 负责整个交付后端，对我而言，一个心态上的改变，从如何做好手里的项目，到如何帮助部门交付所有的项目。 那么如何呢？ 总结。总结。总结。最近一次项目，明显感觉到，有很多东西，只有在实战中，才能积累经验，比如数据库的部署，产品的熟练使用。这些经验除了实战，没有别的办法可以获得。 思考。思考。思考。做一件事，是不是可以这样做。一个问题，解决方案，是不是真的就是这样的。虚心求教，多方确认。 项目管理产品GTM（Go To Market）最近公司有一款用AI方式做BI的产品，我是这款产品的负责人。所以，说一些我对这款产品GTM中的一些理解。 什么是BIBI，即Business Intelligence，中文称为商业智能。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"关于思考、关于编辑器、关于博客","slug":"关于思考、关于编辑器、关于博客","date":"2020-08-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/04/关于思考、关于编辑器、关于博客/","link":"","permalink":"https://kerryli1007.github.io/2020/08/04/%E5%85%B3%E4%BA%8E%E6%80%9D%E8%80%83%E3%80%81%E5%85%B3%E4%BA%8E%E7%BC%96%E8%BE%91%E5%99%A8%E3%80%81%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"我是在虾宝的一路鼓励之下，才开始写博客。虾宝于我，亦师亦友。 一开始，阅读她的博客时候，我心理满是敬佩：喜欢她的性格，敞亮；羡慕她对工作的热情，完全的投入；当然，也羡慕她的颜值，毕竟是“有内涵的花瓶”。后来，两人接触多了，开始熟悉。她鼓励我写，总结经验，表达自己。我一开始写的时候，总觉得，每个字像是蹦石字儿一样，从嘴里跳出来。写完之后，会发给虾宝。虾宝总是给予肯定，并且指点一二。一段时间的坚持之后，我也爱上了写作，总结。（小学生作文水平的肯定 在这个过程中，我开始热爱上思考这件事本身；同时为了选择一款最好的编辑器作为生产工具，我研究了Mac生态中，各种好玩的编辑器；也发现了好多让人拍案叫绝的博客，一个人的时候，我总是孜孜不倦地翻阅别人的博客，阅读他们的文字，感受别人的思考，我觉得这是一件很有趣的事。 思考关于思考，一句话总结如下：思考这个过程本身，充满了乐趣，以至于思考本身就是对我们的奖赏。 在这个过程中，我的思考有哪些沉淀呢？ 参考博客思考类别的文章。 编辑器我常用的编辑器有5款。Typora、MWeb、Notion、Bear、Ulyssess。 我在5月份时候，对这几款编辑器做了一次测评，当时的测评维度非常简单，只有2个维度：是否方便管理、是否高颜值。 现在过去了两月有余，我对编辑器的的认知，也有了更深刻的了解。因此，今天也一同整理回顾。 首先，我们需要明白，为什么我们需要编辑器。对于我来说，编辑器的作用，首先是生产工具，其次，需要颜值高。既然是生产工具，那么就需要这个工具：第一，好用；第二，稳定。这个好用的意思是，功能要足够，比如，起码得支持md语法，要有分类功能，要不然，写那么多文章，如何好的管理呢？稳定的意思，肯定不言而喻 了，既然是生产工具，那么肯定是每天都要用，要是今天用，明天崩，那可不行。至于颜值，好看又好用的编辑器，当然能俘获少女的心（啊喂我是少女好吗！！ 对上面几点展开说一下。 好用在好用这里，我选择了两个维度来分析，一是编辑器，二是管理。 编辑器在支持MD语法上，基本上上述编辑器都满足。 除了，MD语法，我觉得重要的还有目录，因为写5000字以上的文字，如果没有目录的话，会让人很崩溃，写到下面，会忘记上面的逻辑。在目录这里。我们分别看下这些软件 （1）Typora，Typora的目录在左侧展示，也是可以被切换为文档目录，同时目录支持多层级嵌套 （2）MWeb，Mweb的目录在右侧，点击右侧之后，会弹出一个下拉框，显示词数、字数、目录、以及图片附件、网站扩展，我觉得这个设计蛮不错 （2）MWeb，Mweb的目录在右侧，点击右侧之后，会弹出一个下拉框，显示词数、字数、目录、以及图片附件、网站扩展，我觉得这个设计蛮不错 （3）Ulysses，Ulysses的目录在右侧，点击后，会以MD形式，即#形式显示目录 （4）Notion，Notion完全是不支持目录的，Notion我觉得是不能拿目录拿出来和其余编辑器做比较的，因为比较特殊，具体特殊在哪里呢？我会专门写一篇文章，分析Notion！ （5）Bear，Bear不支持目录，这真是我心中的痛，我真的是Bear的忠实用户，我在Bear上，合计产出了919篇笔记，从这个数量，就可以看出，Bear就是我日常好帮手。上苹果商店看过Bear的评论区，大概在去年，便有人建议，希望给Bear加目录，当时官方的答复是，加目录需要更新整个编辑器，已经在安排中了，但是现在看起来，一年过去了，似乎依然在安排中啊（哭 管理上面说了编辑器的两个我关注点，MD语法和目录，接下来谈谈管理。 作为生产工具，生产了大量的文章，肯定是需要对这些文章进行分类、以及查找。 分类支持分类的编辑器有：Mweb、Bear、Ulysses、Notion 不支持分类的编辑器是：Typora 支持分类的编辑器，也是通过不同的形式来实现的，比如Bear和Mweb，是通过标签实现的。而Ulysses是通过直接的分组功能实现的。 对标签的使用，达到出神入化地步的产品，可以参考Stack Overflow。 查找查找功能简单粗暴，是否支持搜索。 支持派有：Bear、Mweb、Ulysses 不支持派有：Typora、Notion（哎，Typora，你咋回事！！！咋咋咋，啥都不支持，生气 稳定从稳定角度来说，基本上，上述编辑器稳定都没啥问题。（大拇指 最后，通过这一系列分析，基本上可以看出，Typora的定位就是编辑器。她不提供管理功能，而像Bear、Mweb、Ulysses，他们不单单是编辑器，也提供文章管理的功能！这就是差异。Notion的话，说实话，Notion和这些编辑器其实不是在同一个维度竞争，这个说起来比较复杂，如上述所言，之后会单独写。 最后说一下颜值，作为一个外貌党，颜值的话，肯定是Bear冠军了。毋庸置疑。 博客","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Q3_Week4_工作总结","slug":"Q3-Week4-工作总结","date":"2020-08-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/08/03/Q3-Week4-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/08/03/Q3-Week4-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：API上线测试、模型指标 API上线测试背景最近在做CTR预估项目，模型已经ready，并且也将模型部署成为了API服务，接着，就是将模型放在生产环境中进行测试。 实验Set Up上线一个新的模型，需要进行A &#x2F;B Test。目的是验证，模型在真实生产环境中的有效性。 流量切分实验设置实验组和对照组。 实验组，是接受实验变量处理的对象组； 对照组，也称为控制组，对实验假设而言，是不接受实验变量处理的对象组。 本次实验假设是：通过使用CTR预估模型，是否能够降低客户的平均获客成本？ 实验组：线上流量的1%，接受模型打分的流量。 控制组：线上流量的1%，不接受模型打分的流量。 效果追踪在制定指标时候，一定要和业务结合，因为我们的业务是广告投放，因此就涉及到一些诸如处理流量数量、竞价成功数量、点击数、注册用户数、以及CPA的指标。其中，最重要的指标是CPA。 数据回流影响模型效果三要素：数据、算力、模型。 当API上线生产环境后，会有新的生产数据产生。模型是有时序效应的，不断新的数据添加进去之后，模型效果会变好。因此，我们需要将生产环境中新产生的数据用来继续训练模型。 因为我们的模型参数在之前已经探索出来，所以，我们现在有三种选择： 选择1：直接将新的数据放进原来模型，重新训练 选择2：利用新的数据，重新训练探索脚本 选择3：将新的数据和旧的数据一起，重新训练探索脚本 具体上述三种情况，需要根据实际业务数据的情况来做决定。 遇到的问题模型上线后，遇到了性能相关的问题。 问题复现从SSP发出广告位提示，到DSP给出竞价，整个流程的时间在100ms以内。因为客户处，有很多处理逻辑，需要花费时间，因此留给我们的时间，只有30ms，所以，从客户发起api打分请求，到他们收到打分结果，需要限制在30ms以内。因为客户是从他们机房请求我们机房的服务，所以中间还有公网传输时间。 当客户前期，将流量控制地很小时候，因为每次请求，基本上就是一个api请求，这种情况下，请求直接超时。 原因分析，建立tcp连接时候超时，因为放量少，所以导致每隔比较长的时间才会去请求接口，这样就导致client每次请求接口都是新建立一次tcp连接，所以每次都出现超时。 解决思路整个用时由两部分组成：公网传输时间、后台服务器打分处理时间。 公网传输时间的影响因素有：网络质量，是否是同一家运营商 后台服务器打分处理时间的影响因素有：模型复杂度、服务器的稳定 总结&amp;复盘这周的工作内容，涉及到了我的大量知识盲区，所以疯狂地在补基础。 模型指标如何评估一个模型表现的好坏？PR、ROC。 参考论文： The Relationship Between Precision-Recall and ROC Curves Understanding receiver operating characteristic curves","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"产品设计经验积累","slug":"20200708-产品设计经验积累","date":"2020-07-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/07/07/20200708-产品设计经验积累/","link":"","permalink":"https://kerryli1007.github.io/2020/07/07/20200708-%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/","excerpt":"","text":"对于产品设计这件事，时刻抱着空杯心态，向同事学习更好的设计思路。 背景To B的官网为用户提供产品试用，试用的入口，一般在右上角，会有一个“控制台”，用户可以从这里看到自己已经申请试用的产品。 产品试用一般是有周期的，比如7天、12天、14天不等。 我们的官网A和产品试用环境B，是两个域名。因此，对用户体验来说，从A到B需要一个跳转。 以上是官网逻辑之间的大的背景。我遇到的问题是当用户西蓝花，她申请试用的产品已经过期了，这个时候，她的操作体验流程如下：点击控制台，来到试用环境，点击登录，被弹出。 很明显，这个流程非常的奇怪，需要被改善。在这种场景下，我的改善思路，和专业交互的改善思路，是今天复盘思考的重点，分析我们之间的差异，以及背后的原因，从中总结出可复制的方法论，以后复用。 我的思路我的思路是，既然用户是的试用环境登录时候被弹出，那么我们可以在这个页面，做一个弹框，提示用户“你的产品已过试用期，如需继续使用，请联系管理员”。这是我的思路，这个思路，和研发讨论了一下，也说明了一下，这里的问题是，这个登录界面是Prophet的，Prophet是不支持加这些弹框的。 总结一下： 我的思路是加弹框，提示用户 但是我的思路，有可能技术上无法实现，因为产品耦合的关系，Prophet的登录逻辑，我们是不能动的。 交互的思路了解背景之后，交互提出得解决方案是，在控制台界面，直接将控制台页面做调整 展示维度：将产品icon置灰，且可以加一个标签提示语，如“已过试用期” 交互维度：用户点击，无反应 听完交互的思路，我觉得这个方案好啊。好在哪里呢？ 首先，避免了用户做跳转的动作。如果让用户跳转了之后，再告诉用户，你已经过了试用期，用户也会不爽 其次，我们不用动Prophet的逻辑 最后，当我们上线的产品多了以后，就可以在这个页面，展示所有的产品状态，而不是，用户点击每个产品，都要跳转到对应页面，才能知道是否过了试用期 综上，这个方案非常好，从用户体验维度、技术实现难度、以及未来发展可复用性，都很好。 Lessons Learned 多向同事学习，虚心请教。 多复盘、总结，举一反三。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"时间序列项目经验积累","slug":"时间序列项目经验积累","date":"2020-07-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/07/07/时间序列项目经验积累/","link":"","permalink":"https://kerryli1007.github.io/2020/07/07/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/","excerpt":"","text":"最近做广告预估CTR优化，说起来，广告预估CTR优化，就是一句话的事，为客户通过优化CTR，提高其竞价时候的ROI，降低平均获客成本。但是，在实际操作中，会发现“坑”很多，事后的反思，这些所谓的“坑”是由于经验的缺乏，导致忽视了一些重点要素，现将其逐一记录下来。 API对接模型优化，从整个项目来看，分为两个阶段： - 阶段一：训练模型 - 阶段二：上线预估 训练模型模型训练阶段，用的数据集是线下数据集，这些数据一般是放在Hive里面，数据分析的同事，将这些数据从数据库中提取出来，拿给我们做训练。 当我们接到数据，需要做一些检查，主要检查如下部分： - 数据集大小（行、列） - 数据集字段（字段、字段类型） 数据集大小，在广告CTR里面，数据量级起码是需要上千万，如果拿到的数据行数之有几十万条，那我们需要确认一下，为什么只有这么多条。 在我们项目中，需要确认，客户的曝光原始数据一共有多少条？ 确认好数据集大小，我们需要确认数据集字段，字段类型是已经约定好了，需要注意的是在字段类型，因为我们拿到的数据，是从数据库中提取出来的，但是接着，我们训练出来的模型，是会被做成服务上线作为API被使用，在使用API时候，里面的字段以及字段类型就非常重要，当调用API时候，必须字段以及字段类型完全一致，才会调用成功。因此，这个时候，我们需要再次确认字段类型是否OK。 这里有一个小的坑，一般来说，公司里面，负责离线数据和负责线上数据的，是两个部分。当我们的数据，是从离线这个地方来的，我们会默认，这个字段类型和线上call api的字段类型是一致的，但是现实中由于这样或那样的原因，是会有出入的（具体原因我尚不清楚，但是在我做项目过程中，客户方确实存在这个问题）因此，最后字段类型的确认需要和在线流量负责部分做确认。 最后总结一下做需要上线服务的模型，最后要提供API接口服务，一定要和最后要使用这个接口的负责人，确认 字段 字段类型 时间序列字段在做项目之前，我一直都知道CTR预估是强烈的有时间序列规律的项目。 但是在项目中，还是发现，从了解到实际运用，差一点。 在确认字段时候，有一个字段叫做“eventtime”，含义是该事件的发生时间，在确认字段时候，这个字段为BigInt。这里是有问题的，但是当我第一眼看到这个的时候，并没有引起警惕。 那我是如何发现这个问题？又是如何处理这个问题的呢？下一次，遇到类似的问题，该如何，才能提前预警呢？ 如何发现这个问题将数据用来训练模型之前，我打算将数据进行一下拆分，比例为8:2。由于，知道，这个数据是有时间先后顺序的，为了避免穿越，所以，要按照时间维度做拆分。接着，我发现，时间维度字段，eventtime是BigInt。这下，我知道问题了。接着，我明白，需要将BitInt转为timestamp，然后按照时间维度进行拆分。 SQL如何将BigInt转为timestamp首先，了解一下我们eventtime字段的特征，首先，他是BigInt，接着，他是十位数。这是Unix编码的10位数。下一个问题，10位编码和13位编码的区别是什么？ 13位是毫秒级别 10位是秒级别 如何用SQL将10位UNIX时间戳，转为timestamp? 1select from_unixtime(eventtime) as eventtime from t1 按照时间维度拆分如果我们要按照时间维度拆分的话，需要首先知道，我们当前数据集的时间维度。 我用了一个比较“笨”的办法知道当前数据集的时间维度 1select * from t1 order by eventide asc 接着，看top10和bottom10。但是这样的操作，一共要写3行代码，有没有简单一点的方法呢？ 最后，发现我们的数据，时间跨度是2020-04-01至2020-06-30，接着我们按照时间维度拆分就好。 如何处理这个问题毫无疑问，eventtime是非常重要的时序特征，所以，尽管客户确认这个字段是BigInt，但是我们还是将该字段作为timestamp进行模型建设。 下次如何才能提前预警时间序列模型优化项目，一定要注意，找到时间序列字段。 最后，总结，思考。 我有大概2个月没有写SQL了，很多都忘了，但是翻了之前的笔记，就很快也上手了。所以，一定要及时复盘、认真思考。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"幕后产品（4）产品经理的基本功 | PART ONE","slug":"20200705-幕后产品（4）产品经理的基本功-PART-ONE","date":"2020-07-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/07/04/20200705-幕后产品（4）产品经理的基本功-PART-ONE/","link":"","permalink":"https://kerryli1007.github.io/2020/07/04/20200705-%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%884%EF%BC%89%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F-PART-ONE/","excerpt":"","text":"我相信很多产品经理在读到这章标题时候，都会觉得自己已经掌握了基本功，不管是否是事实，沉下心，阅读诗沐老师的分享，都是一定能从中获益匪浅。 很多在小创业公司的产品经理，都希望去大厂，有大神级别的老板带，学习系统的方法论。那像诗沐老师这样的大神，招产品经理，它的标准是什么呢？ 在面试产品经理，考察其能力的时，我会看中两个方面：一个是基本功，另一个是天赋。天赋包括洞察能力和商业嗅觉，这对一个出类拔萃的产品经理来说十分重要。 且先不说天赋了，这种东西可遇而不可求，我们先来看看诗沐老师定义的基本功，同时，在阅读的过程中，也要反省自己的基本功是否到位。 数据分析 交互设计和信息架构 UI设计和编程能力 审美能力 第 1 节 数据分析诗沐老师分享的数据分析的感悟： 不能只看大数据，需要精细化分析 需要看数据的变化、趋势。 需要对比数据，做到心中有谱 找到关键指标 数据约等于效率的意识 精细化分析 网易云音乐的评论非常受用户欢迎，数据表现也非常好：每天评论总数、点赞总数不断增加，领先竞争对手的优势很大。如果只看这个数据，是否就意味着评论系统已经非常好，不用进一步优化了呢？答案是否定的，我们应当更加深入地思考如何用数据评估评论系统。评论总数和点赞总数可以从宏观方面看到评论系统的量级和质量，但是我们还需要问如下问题： 超过 100 条评的歌曲数量占比是多少？ 评论、点赞数量的分布是怎么样的，大量点赞是否集中在少数评论上，还是有长尾效应？ 新的精彩评论数量占比是多少？被用户浏览过、点赞或回复的评论数量是多少？ 用户相互回复的比例有多少？类似这样的问题实际上是针对评论系统的真实运营状态提问的。如果大量的评论集中在热门歌曲上，那么这可能是虚假繁荣，即并没有形成一个真正热爱音乐的社区，用户更多的是跟风。如果大量点赞集中在少数评论上，那么只有少数评论生产者收益，也就是说我们常说的马太效应。新的精彩评论数量占比、被用户浏览过的评论数量占比则是为了看更长尾的评论社区是否形成。UGC的生产与互动覆盖率越高，这个社区的生命力越旺盛。 这段分析实在是精彩，首先，网易云音乐主打的是做UGC，对于UGC社区，有大量的内容生产者，这是非常重要的。那么如何才能做到这一点呢？我们可以看看其他的UGC社区，快手，抖音，一个体验，当我们上快手或者抖音，就算我们是新注册的用户，当我们发了第一个动态之后，我们总会收到几个点赞或评论？为什么？快手和抖音，通过他们的算法，将我们的内容分发了出去，对这类内容感兴趣的人（健身内容），就会看到这些内容。这几个赞几个评论的意义是什么？是对于我这样的长尾用户的正反馈。同理，在网易云社区，他们希望的是看评论社区是否形成。在这里，理解诗沐老师这段分析时候，刚好用到了诗沐老师讲到的，分析产品时候，我们可以借鉴类似产品。 看数据的变化、趋势字面意思，没有深入的内容。 对比数据，做到心中有谱对比数据。参照物的选择不同，数据对比的结论也各异。 网易云音乐的独立音乐人这一数据。2017年，有两万名音乐人在平台上活跃。如果把这一数据与竞争对手比较，那么无疑是比较高的。但是如果仔细思考音乐人的定义，是只有主流的民谣、电子、摇滚、嘻哈原创音乐人才是音乐人么？中国每年从音乐院校毕业的学生都不知这个数…….对于网易云音乐而言，服务好所有的音乐人，而不是两万名已经入驻的音乐人，才是服务音乐人这项业务最高的使命。 找到关键指标 在专门介绍用户增长的书籍里面，对找到衡量业务增长的关键数据指标有详细的描述，将其称为“北极星”指标。关于关键数据，有一些一般性的经验，例如，内容型产品多为内容消费人数、数量；电商产品多为订单量、客单价；社交产品多为关系数、互动数等。但具体的情况还需要分析和验证数据，例如，一个产品的互动行为有评论、点赞、分享等，究竟哪个最能衡量&#x2F;驱动业务，需要进行测试和验证。网易云音乐在最初发展歌单系统时，有好几个数据可以考虑：播放歌单率、下载歌单率、收藏歌单率、分享歌单率……..因为我们最希望提高用户留存率，不断增加DAU，所以就计算了这些数据哪一个是和用户留存率最相关的，最后分析出来是收藏行为，于是我们就利用推荐算法将歌单收藏率作为指标，来优化用户首页消费歌单的体验，从而不断地提高用户留存率，以驱动DAU增长。 最近研究工具，Slack发现用户忠诚度最高是对话框里面有2000条信息，我也对自己最近使用很多的产品，做一些猜测，Bear用户粘度，笔记数量？知识星球的用户粘度？有多少人在星球里面？比如说大于等于7人。（瞎猜，但是一定要有data driven mind 数据约等于效率的意识A&#x2F;B Test。关于A&#x2F;B Testing的总结，今晚晚点发～ 最后说了那么多，展示一下我的数据思维，我将自己每个月在知识星球写的笔记，在Hexo发布的博客，以及阅读的书籍数量也做了tracker～ 将数据思维贯彻到生活的方方面面。 最后，用我喜欢的一首歌的歌词来结束产品经理基本功第一部分 一步一拳意念要专心靠肘取中线标准熟记方得真","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（6）好的思维方式","slug":"幕后产品（6）好的思维方式","date":"2020-07-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/07/04/幕后产品（6）好的思维方式/","link":"","permalink":"https://kerryli1007.github.io/2020/07/04/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%886%EF%BC%89%E5%A5%BD%E7%9A%84%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/","excerpt":"","text":"为什么思维方式这么重要呢？ 思维方式从某种程度上讲，是做产品的人的核心竞争力。因为产品可以模仿，方法论可以学习、应用，而思维方式只能自己领悟。 那么如何培养好的思维方式呢？ 看书或者听别人的分享只能接触这些思维方式的门，真正要打开这些门，需要不断积累以及与高手交流学习，不断地提高自己深度思考的水平，从而在某个时间点突破自己思维的瓶颈，对这些好的思维方式应用自如。 同时，好的思维方式的培养，需要日积月累，从成为产品的第一天，就要刻意练习。 读到这里，我意识到这一篇章节，比较务虚。所以，在阅读时候，我需要尽量思考在真实工作场景中，这些思维可以如何指导我开展工作。两个方向，在过去的工作中，有哪些地方，我已经在这样思考，或者说，可以这样思考，但是我没有这样思考；在未来的工作中，什么样的场景中，这些思考方式可以被应用起来。 思维1 往重点思考 往重点思考，可以分为这么几个环节：思考关键目标、思考实现关键目标的关键行动、思考关键行动的关键依赖、然后加以权衡。如果思考来，思考去，关键东西还是很多，就需要考虑哪些是可以放弃的（放弃很重要）。 思考关键目标思考关键目标，即我们为什么要做这件事。关于为什么有一个非常好的TALK，推荐。Start with why – how great leaders inspire action | Simon Sinek | TEDxPugetSound(https://www.youtube.com/watch?v=u4ZoJKF_VuA) 在做项目时候，作为乙方，经常会接到甲方的一些需求。没有经验的项目经理，可能就直接答应了，好的，可以这样。有经验的项目经理，会告诉对方，我们支持这样的操作，我们想先了解一下，这样的需求是出于什么样的考虑。 最近做广告CTR项目，我们为客户优化算法，交付物是API接口，客户希望增加campaignid和creativeid，和客户确认为什么时候，发现原来是campaignid和creativeid和最终CTR的关系，也是客户在意的。所以，最后，同客户达成一致，我们支持加这两个字段。 客户提出一个需求，背后一定是有原因的，了解背后缘由，利于我们有针对性的想出解决方案。 还是关于API字段的沟通，上文提到了campaignid和creativeid，客户希望将这两个字段放在common feature里面，这样可以减少他们请求API接口时，传输的数据包的大小。最终目标，还是为了满足时间性能，即从他们机房发出请求，到我们服务器处理完成请求，传回他们服务器，整个流程耗时在30ms以内。客户的考虑是，如果campaignid和creaticveid放在commonfeature，这样可以减少数据包大小，加快传输时间。这个考虑出发点，完全合情合理，那我们是否是要答应呢？ 也不是。是否答应，我们还是要从目标来分析一下。 关键目标是什么？ 整个API请求时间在30ms以内。这30ms时间包含公网传输时间以及服务器对每个请求的处理时间。 测试阶段，会将每次请求的API控制在30个以内，在这个数量级，campaignid和creativeid放在哪里，其实影响不大。（况且，如果这两个字段是在common feature里面的话，传输到我们这里，我们也是需要重新解析的，解析也是需要时间） 生产阶段，每次API都在上万数量级，这个时候，campaignid和creativeid肯定是需要放在common feature啦。 所以，最终和客户的沟通，是上面那段分析，最终也得出一致结论，测试阶段，我们可以测试一下API的性能，如果需要，可以将这两个接口放在common feature，或者，我们会考虑将模型部署在其他地方。 以上，列举了两个项目管理中的case，那在产品设计中呢？ 最近同时也在优化官网设计。最近在优化官网两款产品的产品介绍页，A和B产品。 我们官网产品设计的产品经理，一起合作优化的，还有负责产品A&amp;B的产品经理Z。由于A&amp;B是两款非常Tech的产品，所以经过讨论，我们一致决定需要做一些图，来阐释产品的功能。 因为我们是就着A产品讨论，会议结束，大家总结了To Do和每个ToDo的Owner以及时间节点。和产品经理确认B产品的图，B产品解释到，我们AB两款产品的定位不同，A产品是针对开发者进行运营，因为最近会做很多活动，开发者来了，需要一个Landing Page，但是B产品，还是走客户方向，暂时对Landing Page的需求不是很大。 看见没有，这就是目标决定了产品设计的优先级。因为我没有关于这两款产品定位的preknowledge，所以在思考时候，我将这两款页面产品说明的优化优先级，放成同样重要了，但其实不是的。 思考关键行动明确关键目标之后，我们可以拆解关键行动。 以网易云音乐为例。关键目标是让用户发现喜欢听的歌曲，针对这个目标，可以做下面的拆解。首先，要拓展用户听音乐的范围，如果用户只能听已经知道的歌曲，那么范围十分有限，自然也谈不上发现，而拓展音乐内容范围最好的办法就是UGC系统；其次，无比要做到个性化推荐，因为全世界歌曲的数量可达数千万甚至上亿首；最后，要建造音乐在用户之间的传播网络。这就是一个关键目标拆解关键行动的案例。 在项目管理中，如何思考关键行动呢？还是举例最近在做的CTR预估项目，这样一个为甲方服务的项目，其中有3个关键行动，分别是甲方准备数据、乙方训练模型、乙方提供API接口。其中涉及双方对接的行动是甲方准备数据、以及一方提供API接口。因此，在处理这两个关键行动时候，一定要提前和对方约定好格式，否则会造成时间上的延误。这是项目管理中，思考关键行动。 思考关键依赖 明确了关键依赖之后，我们要思考实现这些行动的关键依赖，即思考我们需要的资源、我们的团队、我们的合作伙伴等等。 继续看网易云音乐的例子 我们要做UGC系统以拓展用户听音乐的方位，其中包含几个依赖。一是我们必须有足够大的曲库，这是发现音乐的基础；二是我们要有善于做UGC歌单的用户，在冷启动的时候我们要储备足够多的种子用户。 回到项目管理中，我们的关键行动是甲方准备数据，乙方提供接口，这两个关键行动，分别都需要谁的支持？需要他们具体什么样的支持呢？如何驱动他们配合工作呢？ 甲方准备数据客户方的算法工程师，按照约定的格式，准备数据。 乙方提供接口我方的架构师，协助测试API性能。 权衡每个阶段一个主要目标，这样利于聚焦。 学会放弃。 思维 2 往本质思考跳出思维惯性这个其实就是使用进程2，关于惯性思维更详细讲解的书籍，推荐《超越智商》《思考，快与慢》。 一层一层往下多提问作者分享了他在网易云音乐的一些思考 我们在做网易云音乐的时候回去想：音乐对用户到底意味着什么？音乐有哪些区别于其他内容形态的特点？为什么用户会喜欢一些音乐？是什么让网易云音乐和其他音乐产品不同的？几十年来流程风格为什么会发生变化？未来的因为会是什么样子？我们在其中会扮演什么角色？ 这一连串的提问，可以说是非常犀利了。 针对To B行业。我目前在To B行业，我对To B也有过一些思考，比如，To B的发展轨迹到底是什么样子的？美国的To B为什么发展这么好，为什么Salesforce这么赚钱？ 针对AI公司。AI公司的竞争力到底在哪里？未来3-5年，AI行业会有什么样的变化？我个人，在其中扮演什么角色，我能创造什么价值。 日常实践并与人交流 不同的人看问题的视角不一样，抛开对错心，我们会收获很多新的信息，学习到更多的思路。例如，在网易云音乐的平台化发展中，今日头条公司正处于突飞猛进之时，我会思考这家公司的增加逻辑到底是什么？在一层一层提问分析之后，我想今日头条的本质是一家运营力量的公司，在流量获取和获利3的两端用大数据运营，其拥有很高的ROI，驱动它增长的要素就在于不断地寻找大量符合ROI的流量，这也和今日头条公司短视频之后的一系列产品布局思路相匹配。 关于数据驱动，数据运营，推荐经典数据《精益数据分析》，这本书，是朋友在豆瓣上推荐，但是我还没有仔细学习，有时间仔细阅读。 思维3 往上层思考Think big, think different. 产品经理需要登高望远。一方面，在我们面对的问题越来越复杂的时候，在与问题相同的层面上可能很难梳理清。 往上层思考是让我们的战略眼光更好，能看到更大的机会。从一个局部功能，到一个系统，再到整个产品，是一层一层向上， 一脉相承的。譬如，我们做一个自动给用户的歌单生成封面的小功能，往上看一层是，我们希望用户生产歌单的成本尽可能低，让更多的“懒人”用户也能做歌单，同时在这一层里还有自动帮用户填歌单名称的功能；再往上一层是，我们希望打造一个歌单UGC系统，让用户通过UGC歌单互相分享、发现各式各样的音乐，同时在这一层里面有歌单的生产、展示、分发以及用户的互动、激励等围绕UGC系统的各种功能；再往上一层则到了战略层，问题变成了为什么我们要做歌单UGC系统。 这段话信息密度高，我们一点一点来理解一下。 表现一层是，做一个自动给用户的歌单生成封面的小功能；在这一层以上，出发点事为了让用户生产歌单的成本低，为了让用户生产歌单的成本低，同时，还做了的功能支持事自动帮用户填歌单。为什么要让用户生产歌单的成本低，是因为要打造一个UGC系统，再看下一层，为什么要做UGC系统，这就涉及到战略定位了。 因为要做UGC系统，所以要让用户生产的成本低，这个逻辑，不单单在网易云音乐中存在，在快手中也存在，我记得之前面试快手时候，他们关注两块，一块是内容，一块是工具，做工具的初衷就是为了让用户生产视频的门槛尽可能低。 最后，我感觉这个和《用户体验要素》这本书的一些逻辑思路相似，可以再温故一下。 总结一下往上层思考的几个部分： 看上层的格局和眼界 思考上层和本层之间的逻辑关系 想象未来的可能性 看上层的格局和眼界要做到登高望远，需要非常努力地累积和学习实践经验。 与自己的主管聊聊，多听听他们对产品、业务的思考和描述，这一定是和你不一样的思考层级，而且在绝大多数情况下是一个更高的层级——且不论这些思考对不对，至少是一个更高的层级、一个新角度，这些就会帮到你。 思考上层和本层之间的逻辑关系随着我们对产品、业务的思考层级不断提升，下面的思考也会越来越清晰和熟练 模块和系统的关系。也就是上层是一个完整的系统，而本层是系统中的一个模块，本层与其他模块组成了一个系统，互相配合，而整个系统能够运转。当层级越来越高时，就可以发现其与宏观和微观是想通。 商业&#x2F;经济上的驱动关系 想象未来的可能性畅想未来3-5年的可能性。3年之后工具如何演进？ 思维4 往不同思考Think different。 客观地思考不同 逆向思维 捕捉创新 形成自己独特的思维框架","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（5）在激烈的竞争中寻找产品定位 | PART ONE","slug":"幕后产品（5）在激烈的竞争中寻找产品定位-PART-ONE","date":"2020-07-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/07/03/幕后产品（5）在激烈的竞争中寻找产品定位-PART-ONE/","link":"","permalink":"https://kerryli1007.github.io/2020/07/03/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%885%EF%BC%89%E5%9C%A8%E6%BF%80%E7%83%88%E7%9A%84%E7%AB%9E%E4%BA%89%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BD%8D-PART-ONE/","excerpt":"","text":"互联网发展到现在，基本上已经没有蓝海。面对如此竞争激烈的市场，定位至关重要，因为它决定了： 产品能否在开始阶段活下来 产品今后发展的天花板 产品是否解决了用户真实存在的需求；选择的产品市场，是小而美还是有极大想象空间的市场，这些都是在产品定位时就决定了的。 第一节 看清楚一个行业 为什么视频APP能导致电影、电视行业发生变革？ 说到视频APP对电影、电视行业产生的影响，就不得不提2020年春节，今日头条买下了徐铮的新年贺岁片《囧妈》版权，并在今日头条APP家族，包括抖音、今日头条、西瓜视频、抖音火山版上免费播放。针对这一事件，浙江省电影行业发表了严厉的批评 电影行业顾全大局、识大体，但欢喜传媒却凭一己之私，置他人利益而不顾，在特殊时期，采取特殊方式，绑架民意，是背信弃义。 电影放映就像搭台唱戏，影院负责提供舞台，出品方负责找人演戏，发行方负责找人来看戏，然后三家共享成果。而徐铮将《囧妈》卖给影院，对影视行业来说，最担心的无疑是中游和下游。 对于中游的宣发来说，要是电影不在影院放，以后还要什么发行公司？甚至营销公司自己的业务也会受到冲击，因为流媒体对内容的宣传有自己的套路和打法，作品在流媒体平台之外的业务需求，可能并不会很多。 下游这次受损最为严重，因为这种至少15亿+体量的影片上线流媒体，那么下游一分钱都分不到。单部影片并不值得担忧，如果开了这个头，会不会有更多的影片来做这个事情？那到时候影院就更难活了。（流媒体指将一连串的媒体数据压缩后，在网上即时传输影音以供观赏的一种技术与过程） 美国影院和奈飞吵了那么多年，对于电影行业暂时还没有产生什么量变和质变的影响，内容越来越多地往线上走，是一个大势所趋又存在微妙平衡的事情。 美国影院和奈飞为什么吵？利益分歧。 美国不少保守派导演和斯皮尔伯格都电影流媒体播放的趋势可能会影响电影发展的方向。在他们看来，院线上映意味着电影的质量是优保证的，流媒体平台的门槛要低很多，因此网络电影可以把成本用在别的地方，而不是电影的制作上。 Netflix回应到：“我们爱电影院，但我们同时也在乎其他的事：让哪些无法负担电影票或者居住地没有电影院的人，能够得以接触电影；让不论身在何地的所有人，都能同时看到新的电影；让电影制作者有更多分享艺术的途径。这些并不相互排斥。“ 双方各执一词。 回顾一下，春节期间，徐铮的欢喜传媒将新年贺岁片卖给了今日头条，今日头条在旗下APP进行免费播放这件事，在朋友圈基本上是刷屏了，但是，那个时候的我，其实对这一切，没有兴趣，更深层次，应该是说，那个时候的我，看不懂这些争议是为什么。现在回过头来看，争议的背后，是利益。而那个时候看不懂的我，缺乏的是对大市场的把握，以及缺乏对市场中变革因素的敏感。 今天，当我在看诗沐老师的《幕后产品》一书，再回想起今年春节的故事，这才意识到，这次事件，对中国电影电视行业可能产生的深远影响。 同时，我也意识到，其实不同国家之间市场的变化，其实是可以有借鉴意义的，比如美国的奈飞，因此，如果，我要切入工具行业，我也可以深刻地去分析美国的工具行业，去了解1993年创建的Salesforce，2011年袁征创立的Zoom，以及2003年诞生的Slack等等。 视频App对电影行业可能产生的变革影响，暂时说到这里。 接下来，一起来看诗沐老师的书吧～ 中国的互联网视频产品出现距今也不过短短十年时间。在这十年里涌现的视频产品成百上千，用户观看电视、电影的习惯也随之发生了剧烈的变化。以往，电视台的竞争对手只有电视台，电影行业的玩家也一直是制片厂、发行方和院校。而如今，局面已经截然不同，互联网视频产品中的顶尖玩家称为引领行业变革的人，并且也加入了视频制作源头的竞争之中。 机会往往出现在未来会发生巨大变化的行业中。如果单看互联网本身，近几年最大的机会无疑会出现在 PC 互联网向移动互联网的发展变化中，社交、新闻、视频、音乐、工具等领域在这个过程中都有改朝换代的机会。而如果结合互联网和其他行业来看，机会则存在于互联网的作用和影响下发生变革的过程中，近几年火热的互联网医疗、教育、O2O等概念皆基于此，但每个像O2O这样的概念在目前并不一定都能实现。 近几年最大的机会无疑会出现在PC互联网向移动互联网的发展变化中。在分析一个行业时，问自己三个问题： 这个行业有哪些玩家？他们之间的关系是怎样的？ 未来几年，这个行业会发生什么变化？在这些变化中会产生什么机会？ 行业里的玩家会如何抓住变化中的机会？谈到行业分析，就这3个问题，但是实际执行起来，确实非常困难，考察的也是产品经理对整个市场的认知，对我而言，我也深知自己在这一方面能力的欠缺，因此，我有意识地在了解诗沐老师分析音乐行业的思路，并且希望能将这些思路，用起来，用在写作软件，一些对其他工具的分析上。 想要弄清楚这3个问题，除非自己刚好深处这个行业之中，特别熟悉、了解行业外，每个产品经理都需要进行大量的研究，翻阅大量的资料，与此同时，还需要具备国内外对比，不同行业类比等各种举一反三的能力。国内外对比，不同行业类比，这些说起来，都是很简单，但是做起来，实际上要求很高。但是，要做到的办法也只有一条，那就是practice makes perfect。 对比其他国家: 如果对比世界上的其他国家，他们同样受互联网的冲击，但音乐行业的情况则要好得多。最典型的是韩国，这个在流行文化输出方面居于世界前列的国家，音乐行业曾经也饱受互联网冲击、盗版横行的影响，但在政府整治盗版的决心之下，它们很快就止住了颓废。 对比不同行业： 和音乐行业最相似的是视频行业，视频行业同样也在互联网的影响之下开始出现大量盗版内容。而后经过正版化的洗牌，这个行业目前正处于蓬勃发展的时期，行业中的人才——无论是专业的导演、演员，还是业余的视频制作者，数量都远比以前多。这是诗沐老师提到的行业类比，他从视频行业的发展中，吸取经验，辅助分析音乐行业。我之前也看过一期财经博主将视频战争的内容，不过看过了，也就忘了，并没有从中收获什么，现在回过头来看看，举一反三也是一种需要刻意练习的能力。 在进行了一些调研，思考后，诗沐老师针对上述问题，得出了如下一些结论。 Q1:这个行业有哪些玩家？他们之间的关系是怎么样的？音乐行业的玩家可以分类三类：内容源部分、中间部分、听众部分。 内容源部分：词曲作者等幕后工作人员、艺人 中间部分：涉及音乐的发行、传播、产生营收等诸多环节，从经纪人、唱片公司到演出公司、在线音乐平台等都可以归为此部分 听众部分：听众 Q2:未来几年，这个行业会发生什么变化？在这些变化中会产生什么机会？作者在分析行业变化时候，对比了其他国家，韩国、美国，也参考了其他行业，视频行业，最后得出洞察。洞察1:音乐行业会往好的方向变化，移动互联网和正版化是音乐行业变化的最关键的两个因素。 洞察2:移动互联网会极大地影响听众关于音乐的体验，进而引发行业中间部分的变革。 听众随时随地都能听音乐 听众更愿意互动和分享 …… 洞察3:音乐传播的方式会发生变化，这也是互联网连接的本质。以前用户需要经过好几个中间环节（唱片公司、电台、排行榜、CD店等）才能接触到音乐，而现在音乐的传播更加直接、迅速、就像形成了一个音乐领域的社交网络。 洞察4:当音乐传播方式发生变化时，音乐行业的利润分配机制也会随之变化。 Q3:行业里的玩家会如何抓住变化中的机会？上面已经总结出来音乐行业在未来变化的三个方面：音乐传播、音乐互动、利润分配。这三个方面对每个玩家来说都有很大的变化。 （1）对内容部分的玩家（艺人、词曲作者等幕后工作人员）来说，变化如下 能获得更多来自互联网的流量，而且流量结构很扁平、直接。 能直接获得听众的互动反馈 能自主地营销、传播自己。 也许有新的营收方法，能让自己赚钱。 （2）对中间部分的玩家（经纪人、唱片公司、演出公司、互联网音乐平台等）来说，变化如下 向互联网的传播方式靠拢，更多地接入互联网公司 推广音乐和艺人时，逐渐加入了互联网的营销方法 加快音乐内容的推广节奏，加快对市场的反应速度，加快对年轻用户群体的获取速度 甚至将自己完全互联网化，或者互联网音乐平台开始有唱片公司的智能 开始利用互联网媒介，让自己的音乐营收更加多元化，而非仅依靠音乐版权、演出的销售盈利 （3）对听众部分来说，变化如下 可以听到全世界的音乐 可以更容易地找到音乐上的知己——相比于以前只能在现实生活中遇见 可以更近距离地与偶像互动——微博已经成功证明 可以对喜欢的音乐鞥有话语权，直接表达自己对音乐的喜恶 自主地选择自己的音乐兴趣，通过海量内容和数据，更容易地找到自己喜欢的音乐 可以看到音乐行业上游玩家们的一举一动。制作、传播、演出等过程对大众都变得透明 好精彩的对市场的分析，学习这个分析思路，我也可以尝试一下对AI行业的分析，我以前也在一些分析报告里面，看过AI行业的分析，但是看到的都是表层的内容，诗沐老师的分析不单只展示给我们他的分析结果，而是层层递进，向我们揭示了每一步如何分析，以及为什么这样分析。对于AI市场，我们也可以问自己如下三个问题： 这个行业有哪些玩家？他们之间的关系是怎么样？ 未来几年，这个行业会发生什么变化？在这些变化中会产生哪些机会？ 行业里的玩家会如何抓住变化中的机会？接下来，我来尝试分析一下。 Q1：这个行业有哪些玩家，他们之间的关系是什么？中国AI行业的玩家有下面这几类： 硬件供应商 软件供应商 AI公司 集成商 终端消费者 硬件供应商，提供物理服务器，用来进行数据库存储、网站服务器等；服务器是一般公司必须有的，除了物理服务器，AI行业，比较特殊，还需要有卡，CPU卡、GPU卡。当然，上面说的这些服务器，有物理形式的存在，也有软件形式的存在。 在这些硬件和软件的基础上，AI公司研究算法，创造出一些非常牛逼的算法，CV用于人脸识别，当下有名的一些公司，比如商汤、旷视他们都有很棒的CV算法。 单单算法是不能解决问题的，算法需要依靠硬件来解决问题，这就有了集成商，集成商将算法集成到自己的硬件中。最后，就是终端消费者，终端消费者有B端客户，也有C端客户。 Q2：未来几年，这个行业会发生什么变化？在这些变化中会产生哪些机会？ 最近的行业共识是，对于AI商业化这事，资本也更加理智了，不会盲目投资，除非是真的能看见商业化的成果。而对于这条链路上，扮演着重要角色的AI公司，在这种情况下，也开始努力向行业靠近，探索AI在各行各业的应用。只有AI公司证明，AI技术可以创造商业价值，上述的整个链路才是work的。 因此，对AI公司而言，更加关注行业，关注行业中的业务场景是未来的变化趋势，而非单打比赛或者单做学术研究。 对于硬件（软件）供应商而言，当下一个现状，对算力而言，他们提供的算力芯片并非是为AI计算打造的。陆奇在《AI时代创新机会》中讲到，今天的X86 ARM的系统架构的前提假定是Von Neumann假定数据维度是比较低，Cache Hit Ratio足够高。然而人工智能时代实际没有这些特征，人工智能时代都是高纬度的数据，必须要大规模低平行处理。 对于终端消费者而言，从开始AI热，盲目引进AI项目，到现在，更加冷静，更关注AI是否能在业务中创造真实价值，这一切，又将会倒逼AI公司关注产业。","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（5）在激烈的竞争中寻找产品定位 | PART THREE","slug":"幕后产品（5）在激烈的竞争中寻找产品定位-PART-THREE","date":"2020-07-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/07/03/幕后产品（5）在激烈的竞争中寻找产品定位-PART-THREE/","link":"","permalink":"https://kerryli1007.github.io/2020/07/03/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%885%EF%BC%89%E5%9C%A8%E6%BF%80%E7%83%88%E7%9A%84%E7%AB%9E%E4%BA%89%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BD%8D-PART-THREE/","excerpt":"","text":"接PART ONE和TWO，继续 第四节 寻找切入点在寻找产品的市场切入点时候，有最关键的两个词——细分、新兴。 - 细分：足够尖锐，切开一道口子 - 新兴：足够前瞻，未来改变现在 2013年，在线音乐市场的新兴方向是什么呢？未来会有什么样的变化呢？那时移动互联网快速发展的时期，越来越多的用户开始使用手机听音乐，同时音乐产品中App产品所占的比重越来越大，不管是活跃用户数量还是在线时长都是App产品优先。用手机听音乐和用PC听音乐，有很不一样的特点。 PC时代，用户要么坐在电脑前面听（一般是办公、学习状态、当作背景音乐），要么是从电脑上把歌曲下载下来传到音乐播放器里面听 手机时代，用户可以直接用手机听音乐，随时随地地听。 听音乐环境与设备的变化会带来很大的影响，产生连锁反应。这时我们需要抓住手机时代的特点，思考未来会有怎样的变化。 用户使用PC越来越少，在PC上下载歌曲然后传送到手机上听的行为越来越少，流媒体会越来越流行。国外的Spotfy正是流媒体播放器的代表，其发展迅速。下载减少，趋向在云端同步收藏的歌曲。 用户在手机上听音乐的频次相比PC上更高。因为打开App的成本远低于打开PC的成本，用户有更多的机会随时随地听听音乐 用户越来越懒 用户会用手机进行更多的社交互动。手机是用户的一种延伸，用户上网的时间大幅延长，有更多的时间接触互联网上各种各样的人。 移动互联网的快速发展，互联网音乐会出现新的变化：云同步、碎片化、用户越来越“懒”、更多的社交互动。 云同步：未来，不管是在那个设备上，用户在网易云音乐中收藏的音乐都应该是实时同步的，免去了在不i 个音乐播放器，同设备之间传输音乐的繁复步骤。我们观察到国外市场上，诸如Spotify、Rdio、Deezer等产品，已经有云同步音乐列表的发展趋势，这成为网易云音乐歌单想法的雏形（这里强调一下，为什么我一直说《幕后产品》这本书很好，仔细思考，会发现诗沐老师在讲网易云音乐的重要发展策略时候，他不会只说，我们做了这个，他会带领我们一起思考，思考市场有什么变化，在这种变化中，他通过观察趋势，研究和学习国外的优秀产品，从而衍生出了产品设计的idea，这一切，看起来水到渠成，但每个环节都是对产品经理学习、思考、决策功力的考验，就这样，诗沐老师将一切都这样展示给我们，从而让我们可以从中学习） 碎片化：碎片化意味着相比PC上的音乐软件，用户打开音乐App的频次更高了，而且每次打开应该看到不同的新内容。这对内容数量的要求高了非常多，传统的编辑推荐模式逐渐不再适用，拥有海量内容的产品才适合在碎片化的移动互联网上发展。网易云音乐之所以定位为一个音乐社区产品而非一个音乐播放器，正是瞄准了未来用户碎片化需求的特点，我们决定主打UGC。 这段话的信息密度也是非常高。 第一层信息，相比PC上的音乐软件，用户打开音乐App的频次更高了，PC时代，用户只能坐在电脑前听，App时代，用户可以坐地铁听，上卫生间听，逛超市听，上班听，anytime anywhere，用户打开App的次数更多； 第二层信息，拥有海量内容的产品才适合在碎片化的移动互联网上发展。这段话，顺着这个逻辑，一时间，还挺难理解，我举一个反面例子，来帮助大家理解为什么碎片化的移动互联网需要海量的内容。短视频App X（因为一些因素，隐去其名称），在2019年国庆期间，被友商举报存在低俗内容，被下架强制关闭了好几周，等该App终于可以重新运营上线后，基本上已经半死不活了，因为停运营的这段时间，没有新的内容产生，即使App又重新运营，但是由于没有新的内容，内容消费者觉得刷着刷着很无趣，也就都流失了，这从反面辅证了诗沐老师的观点，海量的内容才适合在碎片化的移动互联网上发展，不信的话，打开抖音、打开快手、打开微博，即使你关注的首页刷完了，你也会发现，你刷的每一条短视频、每一条文字，下面都会有类似推荐； 第三层信息，综合上述分析，网易云音乐最后是将自己定位为音乐社区产品而不是音乐播放器，对于这一层的理解，我觉得我个人理解还差一点。 用户越来越“懒”：人都是懒的。传统的音乐产品更偏重曲库型的体验，大部分用户通过搜索查找自己想听的歌曲。对于懒人而言，这是一件很麻烦的事情。最好的体验是打开App后，几秒内就可以听歌，甚至只需要一步操作就能听歌，而不同用户的音乐口味是不一样的，那么一款面向大众的音乐App如何做到所有用户都只用操作一步就能听歌呢？我们决定将个性化推荐作为产品最重要的发展方向之一（个性化推荐的发展起源到底是什么？个性化推荐是在什么时候被引入工业界，个性化推荐又是在什么时候被引入中国工业界？个性化推荐又是如何横扫各个领域，电商？泛娱乐？） 社交互动：大部分App或多或少都会带一些社交互动的成分 分析完市场后，再来看看当时的市场细分领域。 在2013年的互联网音乐行业中，占据领先地位的主要是酷狗音乐、酷我音乐、QQ音乐、天天动听等，他们占据了80%的在线音乐市场，主流市场的用户群是大众用户，那么细分市场在哪里？ 内容社区型的产品通常会考虑将某个领域的资深用户作为细分市场切入点，这主要是因为如下原因： 资深用户可以产生高质量的内容，高质量的内容才有好的消费价值。 聚集资深用户有利于做格调较高的品牌，品牌从高往低辐射比较容易发展，从低往高则困难得多。⚠️思考，内容型社区，即刻？即刻是怎么做的呢？这个需要我下来继续思考 需要注意的是，这里的资深的含义是一个相对说法：网易云音乐的歌单创建者相对于网易云音乐的听众来说，是听音乐这件事上的资深用户；GIF快手上的搞笑短视频作者，相对于GIF快手上的观众来说，是恶搞娱乐这件事上的资深用户。 作者对资深的定义，我认为可以倒过来反推，其实这些人就是生产高质量内容的生产者。同理，在手帐领域，也有这样的情况，一开始，一波手帐资深热爱用户在微博聚集，接着有人看到了机会，做了相关的APP。 在选择细分市场时候，需要重点考虑如下因素： 细分用户的关键需求是否没有很好地满足，而且他们的需求也是大众市场的需求，只是市场上目前没有很好的解决方案。例如，对于网易云音乐选择的资深音乐爱好者，发现好音乐的数量是他们的痛点，同时，这也是普通用户的痛点。 细分市场是否有足够的影响力，在之后产品扩张时能影响别的群体。这点在网络游戏行业是非常成熟、流水线式的操作方法了。（这又体现出产品经理眼界的重要性了，比如，对于这种操作，其实我并不了解，至于说到的游戏行业成熟、流水线式的操作方法，我也是第一次知道。这其中有一部分原因，是因为我本身不喜欢打游戏，所以，也不太关注这个行业领域）在过去十多年，几乎多有网络游戏在内测初期都会做好几轮邀请测试，并且邀请码的获取是有一定成本的，旨在吸引那些游戏爱好者——如果能获得他们的喜欢，他们可能会影响一起玩游戏的小伙伴。 产品是否能在细分市场上占据前三，甚至第一的位置。要么这个细分市场上还没有竞争者，要么竞争者还比较弱小，完全有机会赶超。产品需要在细分市场上占据领先位置、占据用户的心智模型，例如，资深音乐爱好者都用网易云音乐，网易云音乐上的电子音乐最全，哔哩哔哩上的弹幕中“吐槽”最多，高质量的问答多在知乎上 网易云音乐上的电子音乐最全：诗沐老师写这个还是带有偏见哈，我算是网易云的半个资深用户了，过去3年，我的音乐App只有网易云音乐，但是现在我已经不再使用这个款app了，完全转移到qq音乐，甚至成为了qq音乐的付费用户，原因很简单，qq音乐能听的歌曲更多 哔哩哔哩上的弹幕中“吐槽”最多：我以前不太接受弹幕，现在看电影什么的也会开弹幕，我经常看的是腾讯视频，腾讯视频的弹幕，给我一种感受，像是刷的，哔哩哔哩的弹幕还是更好一点点 高质量的问答多在知乎上：说实话，知乎上，确实是有很多高质量的内容，最近做广告优化项目，在百度搜索时候，刚好有知乎的搜索结果，百度确实是好的导流渠道，我发现的知乎的内容是非常好的，只是知乎的搜索结果差，往往不能展示好的内容，发现知乎上的好内容，在现在知乎体量已经很大的基础上，是需要运气的） 第五节 以切入点考虑产品架构 我们从产品切入点出发，在设计最初的产品架构时，需要考虑以下方面 产品瞄准的细分市场 产品的发展方向 产品的核心功能 信息架构 需要注意的是，产品架构并不只是用一张脑图画出的产品导航结构图，产品导航结构图只是产品架构的一部分。产品经理很容易忽略的是，用户在产品上的主要行为路径，这一点往往决定了我们头脑中设想的产品亮点能否真正成为产品的发力点。 产品经理应该思考核心功能点有哪些待选项，即研究能实现产品成功切入市场的可能路径有哪些。在满足比较资深的音乐爱好者发现音乐的需求上，我们面临的可选方式有：UGC（歌单）、标签、电台（豆瓣FM、Songza类似的形态）、MV（音悦台的形态）、音频直播聊天室（虾米音乐Loop的形态）。经过调研，我们首先排除了如下方式： 音频直播聊天室：产品受众太小，用户门槛过高（什么是音频直播聊天室？这种聊天室和斗鱼直播、陌陌直播的关系和区别是什么？为什么说受众小？那为什么陌陌的受众又能那么大？这几类产品的用户门槛有什么区别？所以，说要读完《幕后产品》并从中得到最大收获，一定要跟着作者的逻辑，一起去思考） 第六节 为未来发展设计接口 在本小节，我们主要讨论新产品在设计产品定位时，如何考虑未来发展而设计接口，避免中后期因变化太多，导致团队成本大幅增加，而影响产品的发展速度。 设计接口的理念是在最基础的产品架构上能与未来产品要做的功能、系统更好地衔接上。这其中有几个重要思路： 考虑占位，即在大方向上需要占位，以做积累，从而为以后的发展提供资源、数据、能力…….这就是所谓的厚积薄发，以网易云音乐为例，个性化推荐是我们的重要方向，针对这一点在产品设计初期如何考虑占位？这需要剖析个性化推荐包含的要素 给歌曲做标签。歌单UGC，做了歌单的分类标签。 用户丰富的行为数据，积累对用户的了解，因此做了默认歌单，做了收藏歌手，统计了用户每次播放音乐的实际时长，鼓励用户给歌单打标签，从而给用户计算标签偏好 用了各种手段，在用户之间建立了网状连接，积累用户之间的关系数据。 综上，在产品设计初期就做好一部分积累，有助于在真正发力时万事俱备，而不是在想做个性化推荐时发现缺乏必要的数据。（这真的是非常考察负责任的长远规划能力） 考虑高概率，在大方向，从多种可能性中选择高概率确定的策略。 考虑低成本，即思考接口的成本，如果成本低，就可以大胆尝试。例如，网易云音乐的歌曲评论功能。当产品上线两三个月时，我们讨论是否要做歌曲评论功能，最终决定要做的一个原因是，增加歌曲评论功能的成本并不高。（这个原因也是很简单了）在随后的两年中，网易云音乐歌曲评论功能最终成为火爆互联网的存在，也离不开当初设计了接口。 考虑扩展，如程序架构一样，要考虑代码的可扩展性，模块的可复用性，对于产品架构而言，需要考虑如何支撑产品的未来发展——功能会越来越丰富，系统会越来越复杂。优秀产品架构的主干会相对少而统一，分支围绕主干发展，这是最理想的状态。网易云音乐的私信功能，我们将艺人发布的新作品、个性化推送的音乐等都集成到私信中，这也减少了不必要的额外功能。私信这个可扩展的接口可以做很多事，最突出的案例就是微信的IM功能（发展出了公众号、服务号等高级形式），值得好好思考其中的产品设计理念。 哇塞，原来微信公众号、服务号是IM功能的高级形式，我之前对私信的了解，就是带管理属性，以前在赛事平台，也有私信功能，我们用这个私信接口，来答疑，或者，向平台注册用户推送赛事信息","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（5）在激烈的竞争中寻找产品定位 | PART TWO","slug":"幕后产品（5）在激烈的竞争中寻找产品定位-PART-TWO","date":"2020-07-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/07/03/幕后产品（5）在激烈的竞争中寻找产品定位-PART-TWO/","link":"","permalink":"https://kerryli1007.github.io/2020/07/03/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%885%EF%BC%89%E5%9C%A8%E6%BF%80%E7%83%88%E7%9A%84%E7%AB%9E%E4%BA%89%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BD%8D-PART-TWO/","excerpt":"","text":"接着PART ONE继续写。 第二节 分析市场的竞争局面 分析市场时，我会从如下三个方面考虑 这个市场的相关市场是什么？它的上下游游哪些？谁是平台，谁是应用？ 这是一个零和市场吗？有没有办法做非零和市场？ 这个市场未来的变化是怎样的？应该如何抓住机会？ 在2008年前后，互联网上最出名的电影网站是时光网。当时的时光网汇聚了大量的影迷，因为在中文互联网世界中，它将电影资料库做到了极致：丰富的电影信息、导演&#x2F;演员数据库、IMDB（互联网电影资料库）的评分、影迷的论坛。 但是几年之后豆瓣电影在用户量和知名度上就超过了时光网，其中的原因是什么？而如今电影购票App的用户量和知名度不断扩大和提升，原因又是什么？ 先从电影市场上下游的分析开始 电影的上游：制片商、发行商、拍摄团队、营销团队… 电影的中游：看片、字幕、电影院、电影票、爆米花… 电影的下游：电影资料库、下载网站、讨论社区、推荐引擎… Web 1.0 时代，时光网Mtime是做电影资料库的。如果仅在电影资料库这个市场上与时光网竞争，那进行的就是零和市场竞争。 所以豆瓣在切入电影市场时候，并没有直接和Mtime竞争。 Web 2.0 时代，电影市场上引人瞩目的网站是豆瓣电影、BT下载、字幕下载，这些产品主打的市场是电影资料库的相关市场，从而避免了最直接的竞争。而其中豆瓣电影以推荐引擎和影评社区为主，这两点吸引了大量的电影爱好者，从而反过来吃逐渐“吃掉”了原本时光网的市场份额。这里值得思考的是，推荐引擎和影评社区都是比电影资料库覆盖更广的市场，满足了更多用户的需求。 而在移动互联网时代，引人瞩目的产品变成了爱奇艺、腾讯视频、格瓦拉、淘票票、猫眼电影……过去的电影爱好者更多地在互联网上搜索并下载电影看，而现在中国电影市场成功地撬动了更广泛的大众用户——那些懒得搜索、下载的人，这些人呢可以直接在视频产品上看电影。 从移动互联网搜索和下载电影，再到在视频网站（PC或者APP）上在线看电影，我是身处其中的用户。我还记得高中时候，我迷上了看美剧电影，当时最常找种子的网站叫做电影天堂。整个观看电影的流程，在电影天堂找到种子，然后使用迅雷下载将种子资源下载到本地，最后使用暴风影音观看。 后来，不知道从什么时候开始，好像习惯就慢慢变化了，电影天堂这个网站我已经很多年都没有打开过了，如今看电影都是在腾讯视频，但是很多视频都是需要开通会员或者单独付费购买才可以观看，一开始，也很不习惯，会在网络上四处搜索资源，这个时间段的资源，也不是从电影天堂搜索，而绝大部份都来自百度网盘分享，但是基本上能够找到的资源，都被取消下载了，浪费了搜索查找的时间，后来，我也就索性开通了腾讯视频。 产品的变迁、市场的变迁，相互作用，最后我行为的变迁，这就是市场的变化规律。 互联网对行业的很多影响和渗透都是从下游开始逐渐往上走，从应用开始逐渐发展成为平台。这是因为越依赖互联网的部分，越容易在前期就受到互联网的影响——只需要一部手机和一个App就能连接千万用户。但这并不意味着这个市场就没机会了，这时需要分析市场的上下游、以及平台和垂直应用的关系。 分析市场的上下游。 分析平台和垂直应用。 探索非零和市场。 分析市场中的变化机会 第三节 比竞争对手还了解竞争对手要了解竞争对手，就要做竞品分析。基本上每个产品经理都会做竞品分析，但是很多产品经理做出来的都是“垃圾”。当然，诗沐老师在书中并没有这样称呼，只是我将某类符合某一特征的分析报告，称之为“垃圾”，因为，对于写的人来说，这类分析报告没有经过他的思考，对于读的人来讲，也无法有所收获。 那什么样的特征是“垃圾”分析报告所有的呢？ 通过脑图将一个产品的导航、功能画出来并加上自己的点评。 这件事是去年的我常做的，在App Store下载产品，然后画出其功能，最后加上自己的点评，就算是一份分析报告了，但其实不是的。 我们需要更多的客观的信息，其中最重要的就是数据和用户反馈。竞品做了很多功能，这些功能的数据表现如何？用户评价如何？通过足够多的客观信息，我们才能真正地了解竞争对手，甚至比他们自己更了解——因为不是每个团队对数据和用户反馈都有最高的重视程度。 作者和我们分享了他的分析方法，从产品、用户、数据三个角度来分析。（1）数据方面 竞品整体数据，了解竞品在市场中的体量和位置 竞品数据趋势，了解竞品整体数据的变化趋势 （2）用户方面 竞品核心用户，熟悉竞品最忠诚的用户群 竞品主流用户，熟悉竞品占比最大的主流用户群 用户构成，熟悉竞品各类用户群的构成比例 （3）产品方面 竞品核心竞争力，分析核心功能的特点、详细数据情况、用户评价。 竞品主要功能，分析竞品的主要功能特点、详细数据情况、用户评价。 竞品发展趋势，了解竞品过去、现在、未来的功能发展走向。 上述三个方面是一起的，并不是割裂的。 数据方面在获得数据方面，作为非行业内&#x2F;非app相关用户，我们如何获得可信数据？ 看行业报告？不推荐，因为行业报告一般来说都是公关软文，这些公关软文写给谁看？写给投资人，写给竞争对手看，一般都是宣传数据多漂亮。实际注册用户数3万，对外PR稿能吹上10万。（人有多大胆，地有多大产） 除了注册用户数，我们还要关注日活、周活、月活，以及使用时长和使用频次。 如果行业报告的数据不可信，那么我们可以通过一些更加公正、客观的第三方统计机构获得这些数据，如QuestMobile、联通沃指数。 我一直对市场上的数据，呈怀疑态度，产品数据这么隐私的数据，这些第三方机构如何获得，他们又能如何保证自己提供的数据的准确性，对于这两点的质疑，让我一直都不相信这些第三方数据。也导致，我做竞品分析时，都不看数据 TAT，有点因噎废食。这些第三方数据可以作为参考，帮助我们认识市场。 除了这些数据，我们还可以查看百度指数、微指数，从用户对一个产品的搜索频次、社交讨论频次来侧面揣摩产品的用户体量。另外，苹果应用商店和各大Android市场的应用排名和下载量也是可以参考的数据。总体上来说，整体数据能帮助我们在初期判断一个产品在市场中的体量和位置。 在分析整体数据时候，我们还应该看产品的变化趋势，如产品在过去一年中活跃用户的增长情况、使用时长的变化情况、各个重要产品迭代时间点前后的数据变化、重要的市场营销行为对产品知名度的影响等。只要结合数据和趋势一起看，就能挤掉大部分水分。 用户方面&amp;产品（1）了解产品的核心用户群，也就是最忠实的用户、粘性最高的用户。一个产品有很多功能，但大部分用户只用到其中20%左右的功能，而核心用户可能会用到一个产品80%的功能。 （2）了解产品的主流用户群，大部分用户是沉默的大多数，只使用产品20%左右的功能，似乎也无法获得他们对于功能的评价，但分析主流用户也同样重要。 （3）了解产品的不同用户群构成","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"Q3_Week1_工作总结","slug":"Q3-Week1-工作总结","date":"2020-07-02T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/07/02/Q3-Week1-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/07/02/Q3-Week1-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：ToB官网设计、未来发展、好的创业公司是什么样子 ToB官网设计最近排到了公司的设计资源，开始启动新一轮的产品设计，主题是“官网优化”。 本周有3个关键词，毫无疑问，ToB官网设计是本周的重点关键词。一是因为我投入的时间多，二是因为在整个过程中，我收获了很多，在整个过程中，我都收获了什么呢？我们一起来看一看吧～ 沉淀官网设计方法论最近研究了B端官网的设计，我才发现，之前自己设计官网，做的工作，都是“依样画葫芦”，颇有点知其然，而不知其所以然的意味。 学习了一下B端官网设计的思路，有一种醍醐灌顶的感觉。其实，所有的工作内容，都有逻辑可循，只是需要我们去了解背后分析问题的思路。 推荐理由 第一篇文章是网易UEDC出品，将官网设计，当做讲故事。那如何讲好一个故事呢？作者给出了参考的行文思路：言之有物、言之有序、言之有情。接着，作者，从上述3个维度展开，完美阐述了如何将思路与实践操作结合。每个正在为B端官网设计而头疼的PM，都可以从这篇文章有所收获。 第二篇文章是一篇复盘文章，其中有的思路与文章一相通。推荐第二篇的理由，第一篇是从0到1的通用方法论，第二篇则是从0到1，单个案例。第一篇是面，第二篇是点。面看整体思路，点看细节执行。 提炼总结第一篇文章方法论 言之有物 言之有序 言之有情 言之有物言之有物的意思就是说，在官网上，我们呈现给用户的所有内容，都是经过精心挑选的，我们知道为什么需要将这些内容展示在这里。这里就涉及到，我们需要挑选我们需要展示哪些内容在官网上。给出两个思考的角度 产品介绍 客户关心点 在实际思考过程中，我们会发现，其实这两者之间有重叠，所以，建议的一个思路是，总结产品介绍，在总结的时候，思考这些产品介绍点，是不是客户关心的。 （对于我自己对官网的设计思考，因为涉及一些产品细节，就不在博客中写了） 言之有序当我们总结出来了产品特征之后，我们需要有先后次序地展示这些内容，在梳理产品特征优先级时候，推荐一个“象限分析法”，这个名字是我自己取的，从上述推荐的第二篇文章中获得的灵感，我们可以将我们提供的产品从两个维度进行一下划分，一个是产品功能维度，一个是服务维度，同时，加入客户关注程度。最后的成品，如下图 言之有情我们上述总结了内容，并且为这些内容做了优先级排序，最后，我们要展现这些内容啦。 内容的展现，需要借助某种载体，载体有以下几类：文字、图片、视频。 选择何种形式传达内容，需要PM思考。 学习资深产品经理设计产品介绍页的思路“三人行，必有我师焉。” 最近设计官网时候，需要和同事B合作，B是资深产品经理啦，在和他工作过程中，收获颇丰，我也都整理下来。 在设计官网时候，因为我将注意力都放在了首页，所以做了很多关于首页设计的调研，包括经验分享贴，并且调研了市场上优秀To B产品的官网，比如钉钉、Teambition、Salesforce、Slack等等。因为，我们产品介绍页其实是有模版的，所以，我也没有花费太多心思在产品介绍页。 和B开会时候，我介绍了我的思路，希望大家补充对产品的文字介绍。接着，B向我们展示了memsql这款产品的官网设计，通过借鉴学习这个官网，得出的一个可执行的结论是，对于我们这款数据库产品的一些功能点，我们可以通过可视化的方式传达他的功能，可视化的方式包括，作图表达系统之间的关系，绘制表格将不同的数据库产品进行对比。（听到这里，我顿时，一拍大腿，对啊，我怎么没有想到呢？我被原来的模版限制住了思路，同时，我也没有找类似产品介绍页） 最后，这场讨论给我的启示： 耐心、谦虚听别人的建议（Again and Agian的提醒自己） 做好竞品调研，学习借鉴别人优秀的思路！！！ 未来发展这一部分是在谈职业发展啦～ 项目经理技能栈：客户全生命周期管理上周周会时候，老板说到，目前我都是在项目后端，希望未来介入到项目全生命周期管理，包括明白什么样的客户是我们能服务的，即我们能为其创造价值，以及，明白了我们能为其创造价值之后，我们要如何引导对方。这两者需要什么样的能力呢？ 沟通能力 对产品的理解能力 沟通能力，这是毫无疑问的，这两部分都涉及到项目非常前端，在前端需要不断和客户沟通，磨合需求。对产品的理解能力，只有了解自己产品，明确产品的边界和能力，我们方才能知道，我们产品能创造的价值是什么。以及，为何能为对方创造价值。 Focus行业这个涉及到业务情况，手动马赛克。 好的创业公司是什么样子今天读到一篇深度好文《好的创业公司是什么样子？》 这篇文章是GGV纪源资本执行董事于红的经验分享，于红加入GGV 7年时间，一共投了17家公司，这17家公司里，诞生了4家独角兽：作业帮、满帮集团、酷家乐、Musical.ly。GGV的文章，质量挺不错的，上一篇我强烈推荐的文章是《走访了十几家美国企业服务公司，我们写下了这篇万字文章》 先用一个思维导图总结一下这篇文章的主要内容，详细的思考，明天写文章总结。 🥦写在最后：每周写周总结的时候，这算是一周当中，我最开心的时候，翻阅上一周的工作笔记，梳理着自己又有哪些成长。工作内容基本上每周都会接触新的事物，一半觉得吃力，一半感到开心，吃力是因为，这些内容完全都是新的事物，我需要重新学习；开心是因为，自己又可以有所成长，技能又可以得到增长。 对自己的成长速度，我总是希望，快一点，再快一点，通过快速的成长，来弥补自己曾经走过的职业弯路，也可以让自己更接近自己的梦想。 我一直很排斥2017年下半年到2019年上半年，因为在这2年，我成长有限。2017年-2018年，从实习到毕业，我干过咨询，做过用户运营；2018年-2019年，我是算法赛事项目经理。回过头来看，我责备自己，在这2年，没有做好职业规划，浪费了时间，成长有限。最近开始接纳自己的不完美，我犯了错，很大的错误，而很多人在相同的阶段，没有犯错，所以他们成长地更快，我佩服这些从一开始就选择了正确道路的朋友，同时，也开始接纳过去我自己的不完美，不成熟。好在，不管在多么糟糕的环境，我都没有放弃过自己，不断努力，才有了最近1年，突飞猛进的成长。感谢团队、感谢一直帮助我的朋友，最后，也感谢一直努力，不放弃的我自己。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"项目经验沉淀之提前一步","slug":"项目经验沉淀之提前一步","date":"2020-06-27T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/06/27/项目经验沉淀之提前一步/","link":"","permalink":"https://kerryli1007.github.io/2020/06/27/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80%E4%B9%8B%E6%8F%90%E5%89%8D%E4%B8%80%E6%AD%A5/","excerpt":"","text":"最近在给一个营销公司做项目，帮助他们优化广告投放效果，整个项目中，有两个步骤，涉及到双方的对接，1是对方准备数据给我们，2是我们将训练好的模型的API提供给客户，做了越来越多的项目之后，发现涉及到双方交接的地方，是最容易出问题的，为了避免问题的发生，关于交接物，最好是有文字约定。回到项目中，目前项目进展，刚好卡在对方准备数据阶段，整个项目进程是非常紧张的。作为项目经理，因为项目暂时卡在对方数据准备，我也就在梳理这个阶段的工作，但是同事提醒了我一下，说可以将第2阶段，提前规划，不要等到模型训练好之后再对接API。我一下子反应过来，对哦，是可以这样，API对接这个部分，也是有很大可能出幺蛾子的。那么为什么我一开始没有想到，要提前做这一步，之前做NLP项目，也是提供接口给客户，但是在那个项目中，其实时间安排并未像这个项目这么紧张，那个项目，也出了幺蛾子，但是因为时间充足，所以我们及时花时间将问题fix了。在这个项目中，我也就忽略了这个因素。经过同事一提醒，我马上反应过来，是的，可以提前开始沟通API对接。接着，我和一直支持我们准备数据的客户方对接人A沟通，经过和A的沟通，我才意识到，幸亏提前沟通了，这事还挺麻烦，A和我解释了 A负责的线下数据，我需要任何用来训练模型的数据，他都可以帮我准备，但是，之后的模型测试，是线上流量，而线上流量，是另外一个部门负责，并且，另外一个部分的负责人和他所在部门的负责人，并非是同一个人。（到这里，我意识到，这件事可能会比较麻烦，因为还会涉及到客户方的跨部门沟通） 他接着和我说到，在线流量DSP平台，是一个非常庞大的系统，非常复杂，涉及到一些集成工作，也是需要对方开发。获知到这个信息后，一方面，我庆幸自己幸亏提前安排了API对接沟通，不然，到后面，又会耽误大把时间；另一方面，我也感慨，我同事给的建议，真的是太有用且及时了。 最后，对我来说，毫无疑问，这是一次宝贵经验的积累，项目进展是串行的，但是有时候，可以将后面需要做的，也提前安排上。要做到熟练地感知到潜在风险，且提前处理，需要经验积累，需要团队支持，也需要自己虚心学习。 热爱这个团队，热爱支持我的同事们，AI落地，长路漫漫，但是我们一定可以Empower AI Transformation。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"程序化广告交易","slug":"20200627-程序化广告交易","date":"2020-06-26T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/06/26/20200627-程序化广告交易/","link":"","permalink":"https://kerryli1007.github.io/2020/06/26/20200627-%E7%A8%8B%E5%BA%8F%E5%8C%96%E5%B9%BF%E5%91%8A%E4%BA%A4%E6%98%93/","excerpt":"","text":"一、从广告到程序化广告1.1 什么是广告？William F.Arens在《当代广告学》中给出定义 广告是由已确定的出资人通过各种媒介进行的有关产品（商品、服务和观点）的，通常是有偿的、有组织的、综合的、劝服性的非人员的信息传播活动。 回顾历史。 广告这个词汇，最早源于拉丁文“adventure”，意思是引起注意，进行诱导。公元1300-1475年间，中古英语里有了“advertise”，其含义为“某人注意到某事”，后演变为引起别人注意，通知别人某件事。 不难发现，广告的本质&#x2F;目标，是需要向目标消费者进行告知、诱导和说服，最终，促成购买。 广告有如下基本特征： 为广告主（出资人）服务 传递特定的信息内容 传播对象具有选择性 非人际传播方式 进行说服性沟通 分别理解一下这些特征，先说一下为什么要了解这些特征，从古至今，广告的发展历经变迁，但是其基本特征始终一致。 （一）为广告主（出资人）服务 所谓广告出资人，就是广告活动的发起人，也就是广告主。在商业广告中，广告主通常是企业。 （二）传递特定的信息内容 广告传播的内容具有一定的规定性，即具有营销的内涵。随着社会经济发展和市场营销活动的变化，广告的信息内容也在向深广开拓。 （三）传播对象具有选择性 广告传播活动不是以所有的消费大众为传播对象，而是向特定的目标市场进行的信息交流。这个目标市场是由企业根据营销目标来确定的，目标市场的消费者即是广告的传播对象。 （四）非人际传播广告 广告需要通过一定的媒体完成其传播过程，采用的是非人际的传播方式。严格意义上讲，广告的发展就是和媒体的进步联系在一起的。没有媒体的演变、进化，广告就失去了存续发展的根基。广告所借助的载体，从一般的媒介物，到大众传播媒体，再到媒体数字化时代的互联网，随着现代科学技术水平的提高，新的媒体还在增加，推动着当代广告活动翻天覆地的变化。 （五）进行说服性沟通 广告的最终目的，是使用目标消费者接受广告发出的信息，从而影响消费行为，促进销售。这样，就要运用各种各样的方式来表现广告信息。 （六）一种付费的传播 广告活动的整个过程，包括策划、制作广告作品，通过媒体发布信息，进行效果调查等每一个环节，都需要付出一定的费用。 广告一般分两种： 品牌广告：提升商家品牌影响力，促进大众的品牌认知，无需直接提升产品或服务的销售 促销广告：商家直接为了提升产品或服务的销售而做的广告，能够直接造成用户的转化（例如点击、购买等行为）或商品的销售 在本篇文章中，我们讨论的是促销广告。 1.2 程序化广告1.2.1 程序化交易广告为什么会出现程序化交易广告的兴起，是为了满足何种需求？ 需求方希望优化投放效果。 我的广告费用有一半都是被浪费了的，但是问题是，我不知道是哪一部分。我花两百万美元做广告，但是我不知道这刚够一半还是多一倍。 营销天才约翰.沃纳梅克曾说到。 广告投放效果的监控难题，一直存在。互联网的发展，使得大量投放数据得到了追踪。广告主对投放效果的要求也越来越高。因此，催生了程序化交易广告，允许广告主选择他们定义好的用户进行营销，同时，让广告主自行选择流量，以及对每次广告展示，进行独立出价。 这样的需求，要求询价、出价和竞价同时进行，这就产生了以实时竞价（RTB）为核心的程序化交易市场。 1.2.2 程序化广告交易的核心RTB(Real Time Bidding)RTB是指实时竞价广告模式，是一种高度程序化的广告购买与投放流程。RTB利用第三方技术在数以百计的网站或移动程序（App）上针对每一个用户的广告展示请求进行评估以及出价的竞价技术。与大量购买投放频次不同，实时竞价规避了无效的受众到达，针对有意义的用户进行购买。 RTB是售卖广告展示（impression），下图是一个典型的RTB流程 0：用户打开电脑（app）登陆网站，这个动作被传输给Ad Exchange广告交易所 1：广告交易向各需求方平台所发出竞价请求，用大白话来说，就是“诶，我这个用户，有向他展示广告的机会，你们要不要来？”为了方便各需求方平台做决策，Ad Exchange在发询问的时候，还会附带一些信息，包括用户信息，网页信息，以及上下文。 2：需求方平台看到Ad Exchange的询问，并且根据已知的信息，对该用户的商业价值以及点击广告可能性进行了预估，结束之后，给出了一个竞价，反馈给Ad Exchange。 3：Ad Exchange对多方需求平台给的竞价反馈进行综合评估，最后选择一家 4：Ad Exchange会在竞价中选择一家，选择依据有价格，也有Ad Exchange做的点击预估概率 5：Ad Exchange将相关广告信息展示给用户，这个用户展示信息里面是附带了用户行为追踪代码的 6：最终，等待用户的行为。 上述6个步骤，是一个典型的RTB流程，需要注意的是，整个流程是需要在100毫秒之内完成的。因此，对各个环节的性能要求都是极高的。 RTB的优点： 规避了无效的受众到达，针对有意义的用户进行购买 （对广告商和代理公司）最直接的好处就是提高了效果与投资回报率 （对媒体来说）带来了更多的广告销量、实现销售过程自动化以及减低各项费用的支出《互联网DSP广告揭秘：精准投放与高效转化之道》 RTB这种广告交易方式有一个相对完整的产业链，包括Ad Exchange、DSP、DMP、SSP等4个重要的技术环节。RTB的4个重要技术环节协同实现了广告实时竞价的流程化、程序化，而要实现人群的精准定向，还需要Cookie Mapping技术。 二、程序化广告交易的生态系统上文提到了RTB，由4个主要的技术环节组成，这4个环节，也构成了程序化广告交易的生态系统。 让我们来了解一下程序化广告交易的生态系统。 生态系统的定义是，一定的生物群体相互依赖和生存的生态环境。《批判性思维工具》 生态系统的中的生物群体，相互依赖和生存。程序化广告交易这个生态系统中的各个关键环节，相互依赖。 我们分别了解一下这4个技术环节。 2.1 DSP（Demand Side Platform，需求方平台）DSP（Demand Side Platform）需求方平台。 2.2 SSP SSP是供应方平台（Supply Side Platform），是面向publisher（媒体主，即站点或APP的开发者或所有人）的供应方管理平台，作用包括帮助媒体主进行流量分配管理、资源定价、广告请求筛选等，更好地进行自身资源的定价和管理，优化营收。 其实上述的这些定义，理解起来还是比较麻烦，举一个case来理解一下 2.3 Ad Exchange2.4 DMP 数据要发挥价值，就需要一个集中采集、存储、处理、分析、输出运用的系统平台，即大数据管理平台（Data Management Platform，DMP） DMP系统一般由4个功能模块：数据输入、标签制作、数据输出、数据报表 三、DMP系统的架构 3.1 广告系统架构流程 广告投放引擎的功能模块分为5个部分：客户系统、内部管理平台、基础架构和在此基础架构上工作的相关模块、广告投放引擎内部模块以及日常工作中会用到的一些工具和测试平台 2.4.1 客户系统 第一部分是面向广告主的客户系统。广告主主要投放广告，需要先注册账号，有一个自己的唯一识别。其实，上面一句知识讲解，往上抽象一层，就是一个to b的产品，需要用的账号系统。cess也有做。 不同广告主的营销目标会有差异，有些广告主的营销目标是让广告触达尽可能多的人群，而有些广告主的营销目标是提升某个店铺的访问量。一句话说，目标不同，方式各异。 在Facebook的客户系统中创建广告计划的一个截图，它将广告营销分为3大类：品牌认知、购买意向和行动转化。不同的营销目标适合不同类型的广告主，比如大型品牌广告主可能会比较适合选择品牌认知，将广告尽可能多的人群汇总，而小型广告主则更在一广告带来的行动转化。 再次感受真的是隔行如隔山，我以为所有广告都是转化为目标，万万没想到还有品牌广告。我近2年的从业经历，都是在创业公司，精打细算，投放都要计算arpu值，这也就难怪，我认知里都是转化广告，但是对于一些财大气粗的广告主，品牌广告还是很有必要的，上周和DSP的朋友沟通，他有强调到，DSP其实做的挺多的还是品牌广告，在这个市场，DSP能做到上市，市值还不差，这说明，真的是隔行如隔山。 2.4.2 内部管理平台 这个模块是供广告投放引擎内部的运营人员与研发人员使用的相关工具平台，主要包括用户管理、订单管理、权限控制、财务管理、效果监控、订单审核和黑白名单模块。 2.4.3 基础架构以及相关模块基础架构是完成大规模数据处理以及提供高性能服务的基础，主要包括两个部分： 第一部分，在线投放系统，当一个请求达到时候，能快速处理完所有逻辑，然后返回合适的广告结果。为了保障服务的稳定，一般需要跨机房、跨网络布置线上广告系统，做到在部分机房和网络服务出现故障的时候，在线投放系统仍然是可以提供正常的服务。 第二部分，需要计算和存储海量数据的大数据处理模块，日志存储、广告数据的实时或离线分析、计费等业务都是需要它的支持。如果广告系统是通过关键词或定向条件来触发的，还需要不断地对系统的合法广告建立索引。 2.4.4 广告投放引擎内部模块 当用户在搜索引擎搜索“西红柿”后，系统首先调用频次控制模块，假如系统限制每个用户每天最多只能浏览10次广告，频次控制模块会判断当前用户是否浏览广告已经达到10次，如果该用户还可以浏览广告，系统才会继续后面的流程。这一部分是非常细颗粒度的产品细节，设计一些产品架构、细节上的思考，这个可以参考。 四、程序化广告基础 程序化广告的核心重点，即通过技术手段管理广告展示的每次曝光机会。具体的广告处理流程机制如下：当用户浏览媒体某一内容页时，页面中若有某一广告位需要展示广告时，媒体系统将该广告曝光机会向程序化广告系统发起请求，索要需展示的广告创意。为了让程序化广告系统能够更好滴决定，即实现在合适的时间、合适的地点对合适的用户投放合适的广告创意，媒体放会将该用户浏览的页面URL、地理位置、用户的属性信息、浏览器信息、广告信息扽发给程序化广告系统。 受众一词是营销领域的关键词，指精准营销中需进行广告投放的重点目标人群，英文为Target Audience，缩写为TA。所以我我们首先需要定义哪些场景出现以及哪些典型行为是目标人群的典型数据，例如线上点击过广告的、线上浏览过广告主官网的、线下逛过实体店、购买过商品的&#x2F;然后对这些人群的各种行为数据进行收集以及分析，是程序化广告以及精准营销的核心所在 数据的来源，一般我们会从数据的拥有方，以及来源将数据分为3类：（哦那个广告主视觉） 第一方数据。数据的拥有方是广告主。 第二方数据。广告投放方（媒体方、DSP方） 第三方数据。同广告主舞任何关系，第三方数据供应商提供的数据，对于广告主而言就是第三方数据。","categories":[{"name":"广告系统/推荐策略","slug":"广告系统-推荐策略","permalink":"https://kerryli1007.github.io/categories/%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F-%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5/"}],"tags":[]},{"title":"How Complex Systems Fail","slug":"How-Complex-Systems-Fail","date":"2020-06-25T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/25/How-Complex-Systems-Fail/","link":"","permalink":"https://kerryli1007.github.io/2020/06/25/How-Complex-Systems-Fail/","excerpt":"","text":"James Hamilton谁是James Hamilton？James Hamilton负责亚马逊云计算技术的副总裁和杰出工程师，他曾经还是兰博基尼和法拉利的专业汽修工。 他的博客地址[https://perspectives.mvdirona.com/] 今天在他的博客上看到一篇论文：How Complex Systems Fail，因为现在我也在设计复杂系统，同时工作中也会接触一些复杂系统的产品，因此，阅读研究一下，并做一些笔记记录。 这篇论文一共讲了18个有可能让复杂系统崩溃的原因： Complex systems are intrinsically hazardous systems.复杂系统本身就是很危险的系统复杂系统本身就很复杂。云官网和FS大学用的是同一个登录系统。FS有一次对登录系统数据库进行了修改，直接导致我们整个官网所有用户无法登录，无法修改密码。复杂系统彼此之间相互影响，很可能有时候，不知道修改了什么，就会对其他的部分造成影响。 Complex systems are heavily and successfully defended against failure.复杂系统在很大程度上成功地防御了故障。为了规避复杂系统崩溃带来的严重后果，对于复杂系统会创造一些防御机制 技术层面，备份 人员操作层面，知识经验培训 组织层面，政策，操作流程这些措施在一定层度上可以规避失败。 Catastrophe requires multiple failures – single point failures are not enough.多重故障导致了灾难，不仅仅是单点故障。 Complex systems contain changing mixtures of failures latent within them.复杂系统包含潜在的多重故障。 Complex systems run in degraded mode.复杂系统以降级模式进行。 Catastrophe is always just around the corner. 灾难无处不在。 Post-accident attribution accident to a ‘root cause’ is fundamentally wrong.灾难事后归因分析错误。 Hindsight biases post-accident assessments of human performance.事后分析逻辑带有偏差。 Human operators have dual roles: as producers &amp; as defenders against failure.系统操作者有双重角色：他创造了系统也要防止系统的崩溃 All practitioner actions are gambles. 所有的实践操作者都是赌徒（hhhh，这一条好有意思，说白了，就是实践操作者在凭运气，感觉关于系统的失败，本篇论文的一些观点和《失败的逻辑》里面的部分逻辑一致，不过很久没看失败的逻辑了，也回忆不清楚了） Actions at the sharp end resolve all ambiguity.果断的行动结束所有的不确定性。 Human practitioners are the adaptable element of complex systems.人类是复杂系统的可适应元素。 Human expertise in complex systems is constantly changing.人类关于复杂系统的认知在不断变化。 Change introduces new forms of failure.改动会带来新的失败。 Views of “cause” limit the effectiveness of defenses against future events.看待原因的方式会局限我们设计防御失败事件的措施的有效性 Safety is a characteristic of systems and not of their components.安全是系统的特征，而并非系统的一部分。 People continuously create safety. 人类持续创造安全。 Failure free operations require experience with failure.要想无误的操作机器需要有丰富经验的操作者，而这个操作者肯定是有失败经历的。 最后，James Hamilton是一个非常有意思的Hacker，Wired写过一篇过于他的文章，称他为文艺复兴式黑客，黑掉生活、黑掉一切，然后寻求焕然一新。 对他有兴趣的同学，可以看Wired的报道：https://www.wired.com/2013/02/james-hamilton-amazon/","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Q2_Week8_工作总结","slug":"Q2-Week8-工作总结","date":"2020-06-25T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/25/Q2-Week8-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/06/25/Q2-Week8-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：复杂系统设计、进程1&amp;2、tools-for-thought 复杂系统设计最近在研究云系统，调研了市场上的其他云产品商家：阿里云、腾讯云、百度云、京东云。调研报告，正在撰写中，等完成之后整理出来。 进程1&amp;2关于进程1&amp;2，在另一篇文章，谈谈“不动脑子”这回事，做了复盘。 tools-for-thoughttools-for-thought是我本周发现的最让人激动的概念， tools-for-thought是Howard Raheingold在1995年发表的论文，该篇论文的全称叫做《Tools For Thought: The History and Future of Mind-Expanding Technology》 从全称可以看出，作者在关注能够扩展我们大脑的技术，也就是Doug说的augmenting human intelligence。 关于工具我自身对于工具是有一种热爱。我热爱使用各类个人工具来帮我更高效的学习、生活，并且，喜欢研究各类协同办公产品，在线文档、敏捷开发、范OA、视频会议。 我对工具的热爱，起源于熊掌记Bear。Bear是一款Markdown写作笔记软件，从我第一次下载他，我就喜欢上了这款软件。我喜欢上他的原因也非常简单，因为这款笔记很美。支持多种主题切换，每种主题的配色，都深得我心。感受一下截图除了主题配色，在类目管理，还支持icon刚下载Bear研究图标时候，设置的小黄鸭icon，因为那个时候，关于程序员用小黄鸭debug的段子非常火。 所以，我就先是这样“肤浅”地因为“美”喜欢上了这款笔记。同时，因为这款笔记非常的轻量级可以随意新开一个编辑文档，将其调节成合适的大小，就可以开始创作，因此，我爱上了这款软件，与此同时，我也爱上了写作。很难说，这两者之间的关系，如果没有一款这么好的写作软件，我也不知道，我是否会爱上写作，毕竟，一开始，写作确实是一件很枯燥的事。发现了Bear之后，我开始在写作软件的世界里探索，接着我发现了 MWeb、惊奇于其强大的标签管理体系，遂开始用MWeb来对我的输出文章，做管理 Ulysses，Ulysses支持的可以宽幅度输入，解决了强迫症的我，希望将页面占满的诉求 Typora，Typora的TOC功能，让我在写大篇大论时候，总会诉诸于他。 Notion，Notion的创始人Ivan Zhao重新定义了信息的组织形式我第一次知道，原来信息还可以被这样组织起来。在研究Notion的旅程，我发现了tools-for-thougt这个思想，当时的感受，就是一下子被击中了，原来，这就是我一直在寻找的思想。 对于每一款写作工具，我都了解他们的属性，并且知道，哪一款产品，适合哪个场景下的需求。在大量的使用中，我甚至感觉，和这些软件之间已经建立了某种合作关系。这一年多，我的输出量猛增，并且形成了坚持写作的习惯，很难说，是因为我形成了坚持写作的习惯，所以我不断地去探索和研究这些有趣的工具，还是因为有这些工具，我也乐得写作。不过，有一点是肯定的，这些工具在某种程度上，也塑造了我加工信息的方式。对于文章呢整理这件事，我向来的原则是，1周或者1个月整理一次，那么没有整理的时候，不可避免，这些文章会散落在各个地方。有了Mweb之后，我是会有意识地利用MWeb作为第二个大脑，协助我分类、归纳这些内容。 关于个人使用工具，暂且聊到这里。除了个人使用工具，我也关注协同办公，使用协同办公的时间都是上班时间，每个人肯定都希望提升上班时间的效率，增加ROI，但是工作中难免有一些流程上的事务工作需要解决，比如报销、比如审批，每次当我使用相关软件时候，都会觉得不可思议。 关于对报销产品的分析，参考《人月神话（3）》 关于职业发展我对工具是有执着和热爱，同时，我也想创造出好的工具，是Doug说的augmenting human intelligence，也是乔布斯说的 bicycle for our mind。 写在最后，我每次周总结，都是用MWeb写，今天发现可以直接生成Html，效果如下我在想，是不是可以直接将html文件部署上hexo，这样就方便很多，起码不需要，单个插图。不过暂时，还没有找到具体操作方式，慢慢研究一下～","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Tool Builder","slug":"Tool-Builder","date":"2020-06-24T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/24/Tool-Builder/","link":"","permalink":"https://kerryli1007.github.io/2020/06/24/Tool-Builder/","excerpt":"","text":"I think one of the thing that really separates us from the high primates is that we’re tool builders and I read a study that measured the efficiency of locomotion for various species on the planet . The Condor used the least energy to move a kilometer, and humans came in with a rather unimpressive showing about a third of the way down the list it was not too proud of a showing for the crown of creation so that didn’t look so good but then somebody at Scientific American had the insight to test the efficiency of locomotion for a man on a bicycle and human on a bicycle blew the Condor away completely off the top of the charts and that’s what a computer is to me what a computer is to me is the most remarkable tool that we’ve ever come up with and it’s the equivalent of a bicycle for our mind. Man is a tool maker, make a tool to amplify an inherent ability that yes and that’s exactly what we’re doing here. Scientific American做的这个研究，乔布斯在多次演讲中都提到，并且强调他正在做的一件事，那就是making a tool to amplify an inherent ability。 这是乔布斯在25岁提出的，出生于1955年的乔布斯，做上述演讲时候是1980年。 用工具来增强人类智能，这个观点也不是乔布斯第一次提出，Douglas Engelbart在1962年的论文《Augmenting Human Intellect: A Conceptual Framework》 从Doug到乔布斯，大家都在做同一件事，那就是making a tool to amplify an inherent ability。 这也是Ivan Zhao在解释他创造Notion时，说到2点： tools for thought我没有创造什么，我只是在复刻历史。 对于Notion，朋友说了一句话： Notion的交互逻辑和视觉风格都非常有Apple 早期的感觉，对「机构记忆」非常执着，很有趣。 最后，自己一直都痴迷于工具，如今研究这些思想的起源，格外有趣。","categories":[{"name":"工具","slug":"工具","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"怎样的软件才算是优秀软件","slug":"怎样的软件才算是优秀软件","date":"2020-06-24T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/06/24/怎样的软件才算是优秀软件/","link":"","permalink":"https://kerryli1007.github.io/2020/06/24/%E6%80%8E%E6%A0%B7%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%89%8D%E7%AE%97%E6%98%AF%E4%BC%98%E7%A7%80%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"大师访谈录：成就非凡的软件人生第二章节。 写在前面 从书本结构维度，本书一共有24个章节，每个章节由2个部分组成，部分1是作者的讲解，部分2是作者采访一些硅谷知名人士。 部分1对于部分1的讲解，我感觉，比较漂在空中，作者提出的一些议题，比如： 两类客户：现有用户和潜在用户； 用户需求：听还是不听 开始看到”两类客户”这个议题时候，我产生了非常强烈的共鸣，To B公司，特别是早期，在维护现有客户时候，是真的需要投入大量的资源，客户提出了定制化需求，做还是不做？做就有收入，员工下个月的工资就可以发出来，不做，就什么都没有。我是预期，作者是可以就这个角度，能有一些精彩且有例证的讲解，毕竟书名都讲的是大师访谈录，结果，作者给出的评论是： 只关注现有客户是十分短视的商业行为，这虽然能促进短期收益增加，但是却不可避免第导致长期收益受限，自我局限了产品的潜在收益。……..产品要想获得成功，就需要兼顾新老用户，而其中的关键在于保持平衡的投入。企业领导需要让整个企业意识到，在产品的成长期，工作重心应该是略微倾向于新用户，而随着市场份额的成熟，重点应该转移到老用户，如何来奠定企业发展基调，让自己的事业发展更上一层楼。 对于作者的评论，情绪强烈一点，我的认为这就是“正确的废话”。 我只看了两个章节，对于全书的风格不得而知。但是在前两个章节，作者的废话的风格可谓是贯彻地很彻底，比如上面提到的“用户需求：听还是不听”？作者讲述的就是，产品研发需要听市场需求。没错啦，这句话没错，很对。但是就是，你本来期待是一些软件大师，在商业战场上，真刀真枪拼搏的经验分享，没想到，最后讲的都是正确的已知的废话。今天，互联网行业的每个人，不管是产品经理，还是运营，大家都知道，产品研发要听市场需求。 部分2对于部分2，我感觉，有点故事会的感觉。是的，故事会，对大佬的采访不痛不痒，整个文章以对话的形式展开，列举一些 你认为研究生学位有价值吗？ 你如何实现工作和生活的平衡？ 你在软件行业有什么烦心事吗？ …….诸如此类的问题吧，知乎风格，而且，基本上，对每位大师的采访都是同样的问题。 最后，吐槽有点多，确实是太过于失望，对这本书，但是毕竟读了，也还是有一些收获的，记录下来，后面的章节暂时不会再读了。 当然，对于大学生，比如大一、大二的学生，读读还是可以的，这也是本书作者的定位。不过，大一、大二的学生，读部分1中的高谈阔论，还不如花这个时间，去学习硬技能，比如编程。 时机 若想在职的价值，业上所有发展，就要培养一种强大的直觉力，能够分辨什么才是真正优秀的软件，这一点相当重要。懂得什么是优秀的软件，就能觉察项目的价值，避免在注定无望的项目上白费功夫，而是为有前景的项目助力，使之更加成功。Robert Kahn博士是因特网的联合发明人，在我对他的一次采访中，他曾提到，在职业中感知事物的发展趋势是很关键的：“你必须在恰当的时机站在正确的位置…….冰球手 Wayne Gretzky说过一句非常有名的话：“冰球运动的精髓是要时时刻刻明白下一步该站在哪里。”我认为这就是你最应该懂得的道理，对事物发展的方向要有敏锐的洞察力。如果你清楚冰球下一步要滑到哪儿，自然就知道该站在哪个位置上接球。 这段也有一点废话啦，不过对我来说，还是有启发，就是对行业趋势的判断。类似梁宁老师在职业发展中讲的点、线、面，对我而言，我下一步的职业发展是要找到一个面，而这个面肯定是工具属性相关的，且在未来5 - 10年应该是呈发展趋势，但是具体是什么，我一时半会儿也无法回答，只有在不断的探索、研究、沉淀、抽象之后，才能得出最终的结论呢。 工作的优先级与思考这个话题，我觉得非常有意思。 工作优先级工作优先级这个肯定是必须的，对于互联网人来说，对工作进行优先级判断，应该是最底层的基本素养。搜狗CEO王小川最近发布的湖畔大学第一课笔记汇中，也写到了 有了优先级，就不会忙死。对于我们来说，优先级这3个字，一定要和日常工作习惯融入在一起。事事皆有他的优先级。 思考工作优先级的背后是什么？是思考。这意味着我们在思考，应该如何把有限的时间，花费在最重要的事上。而要做出这个判断，是基于我们对我们当下目标的理解，以及我们对任务的理解，什么样的任务对于目标来说，roi最高。 同时，思考，也意味着，我们会将一部分优先级不那么高的工作，移除我们的todolist，或者让这些待办一直都留在我们的todolist上，这都是没关系的。 思考帮助我们制定工作优先级。工作优先级不单是关于我们最应该做什么的管理，同时，也是关于我们不应该做什么的管理。 一个不会思考的人，和芦苇有什么区别？ 最后，端午节快乐呀～","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"关于思考、关于创作","slug":"关于思考、关于创作","date":"2020-06-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/23/关于思考、关于创作/","link":"","permalink":"https://kerryli1007.github.io/2020/06/23/%E5%85%B3%E4%BA%8E%E6%80%9D%E8%80%83%E3%80%81%E5%85%B3%E4%BA%8E%E5%88%9B%E4%BD%9C/","excerpt":"","text":"从思想先驱Doug说起 Doug是谁？ 他发明了鼠标。 Doug的推理Doug在25岁时候，推断出这样的想法： 他想将事业专注在让世界变得更好上面； 任何让世界变得更好的都是集体协作的结果 利用人类集体的智慧来找到有效的解决方法是问题的关键 若能大幅度的提高集体智慧（augment our collective intellect），就能推进每一个重要问题的解决 计算机可能作为大幅度的提高人类这一能力的工具 （同样都是25岁，这一对比，差距真是天壤之别，先哭一会） 读到Doug的推理，我是真的很震撼，思想先驱不愧为前去。1950年，Doug就意识到了协作的力量，上一次我意识到这个，是看凯文·凯利的书，凯莉在致读者中写道 我开始换一种方式思考。我开始领会到大型任务如何通过去中心化并借助最少的规则来完成。 对凯利书中所讲的去中心化，我理解就是Doug在25岁时候推理出来的，任何让世界变得更好的都是集体协作的结果。 读到这个思想，我其实也会有醍醐灌顶的感觉，原来是这样啊！但是，我深刻地意识到，我很难用这种思想来指导我的工作，思考。 基于思想上的创作 Ivan Zhao，Notion的创始人，出生于1987年，于2013年创立了Notion（再次感叹，也就是Ivan创立Notion时候，也就25、26岁，卒） Ivan有提到，对于创造Notion，他只是在复刻历史。而对于思想的灵感，Ivan指出，有一部分就是来自于Doug。 自我反思面对思想先驱Doug，极富创造力的Ivan Zhao，除了“自卑”，一时间也没有其他的词语可以描绘我的感受了。 对我而言，还是需要多看、积累沉淀、然后思考。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"从产品新手到专家","slug":"20200623-从产品新手到专家","date":"2020-06-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/06/22/20200623-从产品新手到专家/","link":"","permalink":"https://kerryli1007.github.io/2020/06/22/20200623-%E4%BB%8E%E4%BA%A7%E5%93%81%E6%96%B0%E6%89%8B%E5%88%B0%E4%B8%93%E5%AE%B6/","excerpt":"","text":"最近工作在准备云官网（官网+运营管理系统）的研发，发现一个事，对于云官网的研发，我心里明白，产品设计具有一定复杂性，同时，我也调研了市场上主流的云厂商，比如阿里云、腾讯云、百度云，同时，也做了竞品调研输出，但是我发现自己看到的都是一些碎片。最近看了同事写的研发讨论，这篇规划，结构清晰，细节完整。看到这篇研发讨论时候，我突然意识到差距，当然造成这种差距的其中一个原因是这位同事，工作经验丰富，有7年的工作经验，同时，他是架构师，对云产品的设计更加了解。 对我自身而言，我认识到了自己对产品设计的把控上的不足，并且制定了对应的改进策略。 不足 对于复杂系统的设计缺乏经验。 对复杂系统设计完整认知加工能力欠缺。调研竞品与系统设计时候，都只能描绘出局部，比如商品订单页，商品详情页，但是如何将这些部分连接组成一个大的系统，在我的思考里，原先是没有规划好的。（其实这里设计到的是产品架构能力 改进策略 刻意练习 情境学习 关于刻意练习 1973年，即将在1978年获得诺贝尔奖的赫伯特.西蒙（Herbert Simon）与合作者威廉.蔡斯（William Chase）发表了一篇关于国际象棋大师与新手的比较论文。在这篇论文中，西蒙他们发现，通过长期训练，虽然工作记忆容量相差不大，但是国际象棋大师在摆盘、复盘等实验上都显著强于一级棋手和新手。其中，国际象棋大师、一级棋手、新手三类人能记忆的组块分别是：7.7、5.7、与5.3。 长时记忆正是区分卓越者与一般人的一个重要能力，它才是刻意练习的指向和本质。 长时记忆的培养要点主要有以下几个： 赋予意义，精细编码：专家们能非常快地明白自己领域的单词与术语，在存储信息的时候，可以有意识地采取元认知的各项加工策略。 提取结构与模式：往往需要将专业领域的知识、提取结构或者模式以更好的方式存储。比如，专家级的开发者善用设计模式。 加快速度、增加连接：通过大量重复的刻意练习，专家在编码与提取过程方面比新手都快很多，增加了长时记忆与工作记忆之间的各种通路。 情境学习学习科学大量研究表明，成人的最佳学习方式并非独自练习，而是在情境中学习。 从“情境学习”出发，当一名“认知学徒”，它的要点有以下几个： 找到学习共同体：找到属于自己的学习小团队，对于复杂系统的设计，可以和pmcaff的同学们沟通 隐性知识显性化：继续学习设计复杂产品架构 模仿榜样：像诗沐老师学习 培养多样性：实践、输出prd文档 最后，刻意练习也好，情境学习也好，要做的事主要有以下3件 有意识地培养自己从系统层面思考 继续调研市场上的云产品，倒推他们的prd文档 在上述两个步骤的基础上，输出我们自己的prd文档","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"谈谈“不动脑子”这回事","slug":"谈谈“不动脑子”这回事","date":"2020-06-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/06/21/谈谈“不动脑子”这回事/","link":"","permalink":"https://kerryli1007.github.io/2020/06/21/%E8%B0%88%E8%B0%88%E2%80%9C%E4%B8%8D%E5%8A%A8%E8%84%91%E5%AD%90%E2%80%9D%E8%BF%99%E5%9B%9E%E4%BA%8B/","excerpt":"","text":"在创办小米之前，雷军进行了长达3年的思考，他是这样描述这3年 我在那段时间的思考几乎像是用手术刀解剖自己，虽然残酷，但非常真实。我先是总结了五点体会：1. 人欲即天理，是更现实的人生观；2.顺势而为，不要做逆天的事；3.颠覆创新，用真正的互联网精神重新思考；4.广结善缘，中国是人情社会；5.专注，少就是多。 雷军老师这段话，协同我最近对自己缺点的思考，两者产生共振。说实话，剖析自己，承认自己的不足，难事的，人的防御机制决定了，在面对消极反馈时候，我们会否认，这是自我保护的机制。 从人的大脑结构说起 人类存在两种信息加工机制：快与慢。快的类型一加工包括自主心智，慢的类型二加工包括算法心智和反省心智。算法心智就是传统的智力，而反省心智就是理性思维。 在快的心智处理进程，我们调用的认知资源非常少，像个猛张飞。猛张飞常常情绪化，依赖直觉，见多识广又很会联想，擅长编故事，经常下意识做过反应，但很容易被骗，以为亲眼所见就是事情全貌，任由损失厌恶和乐观偏见之类的错觉引导我们做出错误的选择。在慢的心智处理进程，我们想的多一些，调用的认知资源也更多，像个诸葛亮。诸葛亮动作比较慢，擅长逻辑分析，猛张飞搞不定的问题，都丢给他来处理。他虽然不易出错却很懒惰，经常走捷径，直接采纳猛张飞的判断结果。 这就是斯坦诺维奇提出的人类心智“双过程理论” 摘录自《超越智商：为什么聪明人也会做蠢事.斯坦诺维奇》 我的习惯对于生活中&#x2F;工作中遇到的一些问题，有时候，我也会下意识，就立刻做出决策。对于这个决策，我其实是没有考虑，是不是真的必须这样做，这样做了是否有什么后果。 立即决策，不常发生，但是时不时会出现，而且每次出现，基本上都在不该出现的时候。因为，对于一些问题，我总是下意识去节省我的认知资源，在短时间或者即时就做出决策，当然，这些决策往往都非最优解，有时候，还会给人一种“不动脑子”的错觉。（虽然出现的频率很低，但是也应该引起注意 如何对意识到的不足进行改进首先陈述一个认知，认识到了不足，这是好事。 接着，需要思考一下，如何有意识地进行改进。 改进之路，刻意练习做出决策之前，等一等，问一下自己： 现在的决策是进程1还是进程2决定的？这是最优解吗？这样的决策对结果有什么影响？抛开所有的情绪，还会这样决策吗？ 在成长的道路上，希望自己永远能直面自己的缺点，不回避。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"2020年上半年复盘","slug":"2020年上半年复盘","date":"2020-06-20T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/06/20/2020年上半年复盘/","link":"","permalink":"https://kerryli1007.github.io/2020/06/20/2020%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%A4%8D%E7%9B%98/","excerpt":"","text":"转眼，2020过去一半。 对我而言，加入范式也快1年。纵向看，1年很短；但是横向看，这1年厚度很深。 2019年下半年，我成为了范式一员，在这里开启我职业生涯的光速成长。工作内容上，我是AI项目的交付先锋，从NLP到CV，从帮助客户分析业务需求，业务价值，到和算法一起，测试模型变现，分析Bad Case，优化模型；2020年，由于组织架构调整，我的工作内容，也有了相对应的微调。仍然是AI项目的交付先锋，但是，不一样的是，所交付的项目，大体上集中在了ML类，再缩小一点范围，在零售推荐这一块。除了承担交付先锋的工作内容，另一方面，我也负责部门官网的建设，从前端到后台，在产品设计上，也有了一些心得体会，并将其整理，发布在了人人都是产品经理，以及Hexo上。所以，其实这半年，我的工作由两部分组成：项目管理，产品管理，因此复盘会同时包含这两部分，那就先从产品管理开始吧～ 先从产品管理展开吧～ 一、产品管理1.1 复盘在产品经理这件事上，历经1年半，我也完成了一次蜕变，从开始抓瞎的状态，到现在，能梳理明白其中的脉络肌理。 2019年3年，彼时的我，是AI算法竞赛的项目经理。我报名三节课的产品经理P2，当时是不屑于上P1，同时觉得要学就从中级课程开始学。接着，我就开始学了。当时底子薄，学起来吃力，很多其他产品经理学起来驾轻就熟的内容，对我而言，如啃天书。但是Google是万能的，每次遇到不懂的地方，我都耐心琢磨，在各大产品论坛看别人的文章，作业改了又改，周末在图书馆查资料，做作业，晚上在家里查资料，做作业。3个月下来，我优秀学员毕业了，还顺利成为了三节课产品P2的助教。这段经历，为我勾勒出了做产品的骨架，但在我运用这些招式套路时候，感觉非常不顺手，现在回想起来，只是因为，那时我尚未将这些方法套路纳入自身认知结构的体现。 2020年初，我开始正式接手产品经理的工作。三节课带给我的理论积累，工作实战场景，以及我自身有意识进行的大量的输入（阅读书籍，和朋友交流，看别人的prd文档）和输出（工作的心得体会，每周做复盘总结；生活中，充满好奇，观察身边产品的设计，思考，写成文章，发布在各大产品社区），让我总算摆脱了抓瞎的状态，开始能梳理清产品设计的脉络肌理。 关于这段时间的产品精进心得，总结如下： 保持一颗好奇心。观察身边的事物产品，他们是如何解决用户的问题，为什么要这样设计。在这段时间，我观察了青桔单车的保修流程，明白了虽然当前的报修流程对于用户而言，体验并非最佳，但是这是产品设计在权衡ROI后的最优抉择；观察了自己经常爱使用的Simple Antones，明白了她设计理念来源于工作学习中随处可见的便利贴；我对写作软件有偏执的热爱，Bear、Notion、MWeb、Typora，我对比分析了他们的优劣势…… 热爱思考本身。这句话挺抽象，讲出来有装逼的嫌疑orz。我真正表达的意思是，鼓励大家，去发现，思考问题本身就是一件有意思的事。 输入-纳入认知体系-输出。这个的意思是说，没有被输出的知识，基本上就没有被真正掌握。因此，要想真的掌握一个知识，需要强迫自己输出。（对这个感兴趣的朋友，建议阅读《刻意学习》） 了解大脑，认识到大脑认知模式的弊端。人的大脑分为思考脑和反射脑。反射脑是思考脑最重要的朋友和敌人。反射脑的反应速度很快，可以极大地帮助行动缓慢的思考脑，但是反射脑给出的回答，没有经过思考脑，也会导致一个问题，即该解答措施，经常是欠妥的。因此，在工作中，思考产品解答方案也好，应对同事的需求也好，都要仔细思考一下，不要着急着给答复。（其实在这一点上，我做得不够好，现在在有意识地做调整）《慢思考：大脑超载时代的思考学》 综上，是这段时间的一些心得体会。一些方法论的总结，就不在本复盘中展开了，方法论的总结，都沉淀在了每周的周总结。 最后，在产品这件事上，我还是一个入门者，开始懂了大体的脉络肌理，接下来，要更加努力。 1.2 未来规划努力的目标是什么呢？如何努力实现目标？这两个问题是产品管理复盘的第二部分，即未来6个月的产品精进规划。 在产品经理这件事上，我的目标是什么？因为，目前我负责的是共有云平台的产品设计，所以我就结合这两个部分谈一下目标和计划。 我的目标，在未来6个月，完成下列目标： 从各方需求中抽象出通用功能以及标准组件，比如现在很多产品要上云，对云产品的使用需求来自于各方，公司内部其他部门，以及外部客户，如何好的梳理这些需求的主次，以及从中抽象出通用功能，并且设计出标准组件，增加产品设计的可复用性，是目标之一。 根据产品定位，完成云平台的演进迭代，确保高标准、高质量的交付，不同的阶段，需要对云产品的发展做好规划，同时，协调前端架构，完成产品设计的交付。 增加自己对大型复杂系统的设计把控能力，比如，接下来要做云订单系统，订单系统本身有其复杂性，因为现在要做的是云订单，所以复杂性其实是增加了。 其实这些目标往上抽象一层，就是产品上云系统的设计。再往下一层，评估是否顺利开发交付的判断标准，就是在规定时间内，是否完成了整个云系统的研发。 为了要达到上述目标，我需要做些什么呢？ 研究行业的其他云产品， 如阿里云、腾讯云、百度云等 研究复杂系统的产品设计，最近在阅读《电商产品经理》 增加自己对系统架构的掌握，在努力阅读《系统架构：复杂系统的产品设计与开发》 我在日程计划上将上述计划再拆细一点，便于追踪完成进展。大概规划就是这样，之后也会随时调整的。 二、项目管理2.1 复盘做了半年的ML项目，主要是两类项目，营销、广告。营销和广告的本质都是CTR预估，但是由于业务场景的差异，在实际操作中，也有蛮大的区别。 营销对于零售个性化推荐来说，整个流程有两部分，召回，精排。在每部分，都会加入一些运营逻辑。 广告对于广告来说，除了了解一些工程层面的内容，比如一个RTB的全流程，还要考虑如何什么样的竞价机制，以及如何权衡三方权益。 对于营销和广告，我都有单独复盘，就不在本文展开。 在这里想讲的是，其实在项目管理上，我算是野路子。就是没有受过正规的培训，因此最近也在考虑是否要考一个PMP。 2.2 未来规划判断是否需要考一个PMP吧～ 综上，是我2020年上半年的复盘了","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"重新理解创业","slug":"重新理解创业","date":"2020-06-20T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/06/20/重新理解创业/","link":"","permalink":"https://kerryli1007.github.io/2020/06/20/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%88%9B%E4%B8%9A/","excerpt":"","text":"我们战胜的，都是渺小的，结果本身也使我们渺小，永恒与非凡之物，不欲被我们弯曲。胜利不会对你发出邀请。他的成长乃是：成为卑微的战败者，败于越来越大之物。 ——里尔克《观看的男人》 这本书是易到用车CEO对易到这段创业旅途的复盘，价值过亿的复盘。他在前言概述了易到用车从无到有，再到失败的过程。对这段描述，我有一些零碎感想： 经历与视野彼时的周航，将近而立之年。曾鸣教授在雅虎中国任职CEO，他邀请周航去做兼职顾问。 周航这样回忆这段经历： 这一段经历对我非常有价值，就像开了一扇窗。过去我虽然知道互联网，知道阿里巴巴，知道雅虎，但只是从一个网络用户的角度，这一次真正从内部了解到一个互联网公司是怎么回事。人心就这样，被视野一点点撑大了。 从一个更宏大的视角，看到当前社会所发生的一切，并意识到自己有机会参与到这一切中，成为改变历史走向的一份子，这一刻，我想，每个人都会沸腾，且再也无法平静，因为，渴望创造出新事物的种子已经在心里被播下了种子。 周航这样的大佬，可以认识其他的大佬，而像我这样的小菜鸡，自然是无法有渠道接触到这里大佬。那我如何提升视野，精进认知呢？读书！读书！读书！ 比如阅读周航的这本书～ 想和做 任何事情，光想是不会有结论的，因为没有压力。我也萌发了做一些小的有趣事物的念头，大概是讲解名人传记，最近刚拜读完上海锦江饭店创始人董竹君女士的自传《我的一个世纪》。上海锦江饭店，这坐落在上海市中心，开业至今已接待了一百多个国家的近三百位国家元首和政府首脑，以及众多商贾巨富的第一家上海国宾馆，给人的印象是，金光闪闪。而她的创始人，董竹君女士的一生，可谓是历经种种磨难。两者之间的巨大差异，更让人感叹不已。 我认为董竹君女士这千磨万击还坚韧的品质，以及她传奇的一生，应该被更多的人知晓，从而也可以砥砺更多像我一样身处迷惘之中的人，因此，我打算做一个视频栏目，讲解她的一身。但我目前进展仍在脚本阶段，发现自己写的脚本，无法梳理出主干线，想加入的内容太多，导致脚本无法被推进。加上看了CCTV专业视频讲解人员的讲解，更是自惭形秽，甚至萌发了退缩的念头。 不过，光这样想的话，这件事是自然不会有结论了，还是应该珍惜光阴做。 荆棘密布的创业道路在创业道路的选择上，周航这样总结 什么是可做的？一定是符合未来发展趋势，且巨头不会介入的行业。读到这里，一拍大腿。我和大佬居然想到一块去了，最近一直在考虑，自己应该深入行业，而不应该一直呆在AI行业。在考虑行业的时候，我的第一个原则就是，这个行业一定是要符合未来发展趋势！ 接下来是易到用车发展阶段的几个关键转折点： 转折点一：形成完整的交易闭环在书中，周航这样写到 2012年痛定思痛后，易到调整了方向，重新起步，抛弃了早起的POS（销售点）机，采用了App绑定信用卡，从时间计费改为时间&#x2F;路程计费直接面向C段。这次变革让易到形成了完整的交易闭环。从这段描述，无法对从POS机到App绑定信用卡转变除了支付方式的改变，还有什么变化，有了解。这也是一个疑点，暂且保留在这里。 转折点二：2014年，巨头加盟的打车市场 2014年，移动支付把打车当作前沿阵地，巨头的加盟让打车市场迅猛加速。即使这样，公司C轮融资的时候，我们本有机会拿到非上市融资里面最大的钱，但我们没要。没过几个月，那笔钱就到了竞争对手手中，这导致易到在之后的补贴大战中过得很悲惨。一年后，O2O行业迎来史无前例的补贴大战，早期我们的做法是决不参战。那时候，我们不喜抄袭，不好价格战，对手做我们就不做，觉得政策不会允许这样打下去，结果教训很惨痛，彼时已经跌倒到DD之后。回归头来看，在互联网的世界里，差异化服务、会员体系、强有力的资源，这些都不如流量和价格战。 对于最后的结论，我觉得还是过于笼统。 我倒是想从一个用户的角度，谈谈我对那场补贴战的印象。14、15年，我还在念大学，是一个贫穷的女大学生，是真的很穷那种。周末，去姐姐家里玩，姐姐会带我去附近的购物广场逛街。每次出门，都是打车，我当时在想，好奢侈啊，为什么不坐公交，公交的话，两个人才3块钱。后来，我终于忍不住问了她（我真的很穷，而且非常有节约意识），她和我说，因为我们是拼车，而且有折扣券，所以最后算下来，其实也就支付4块或者5块。炎炎夏日，我们也不用等车，还可以享受空调，为什么不打车呢？ 周航不喜抄袭，不好价格战。在那个时间段，对于像我和我姐姐这样的普通用户，我们没有对服务的刚性需求，我们只想更便捷，更舒适地在逛完街后回家。 周航的不喜与不好，我觉得，在那个时间点，是没有真正去看到用户的需求，对于你的用户而言，你所谓的服务，到底是不是刚需，这两者的差异，有多少比例的用户，他们到底有多在意。到今天，我自己也能负担打车了。滴滴的专业和快车，对我来说，我选什么？我选快车。除非在滴滴给了补贴，专车价格和快车一样的时候，我会选择专车，其余时候，快车即可。 最后，在互联网，对于一些产品，会员体系是非常很重要，比如社区，像Kaggle。但是，对于打车，这样的工具，会员体系的重要性，又有多大呢？或者说，对哪部分用户，会员体系的影响大？起码对于我这样的用户，会员体系其实并无意义，既不能返现，又不能满足我的虚荣心。（🙄️ 转折点三：选择LS2015年，乐视7亿美金并购乐易到用车。周航这样回忆 仗已经打不下去乐，那会儿我还带着团队坐火车去乐延安，寻找精神的力量。但精神无法在短期内转换为物质。在这场200亿的烧钱大战中，形势急转直下，这才有了乐视与易到的结盟。 好像还有蛮多创始人都喜欢去延安寻找精神力量的，神策的创始人也是。“精神无法在短期内转换为物质”，这句话真是绝望。 读完前言，开始读正文，学习周航的复盘经验～ 附录：《读书》 董竹君 《我的一个世纪》 董竹君传奇https://www.youtube.com/watch?v=7f5ZnJ6NVhs","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"Q2_Week7_工作总结","slug":"Q2-Week7-工作总结","date":"2020-06-19T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/19/Q2-Week7-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/06/19/Q2-Week7-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：电商产品经理，断舍离 关键词1： 断舍离本周生病了，周二和周三都躺在床上，工作上的沉淀有限，不过关于人际交往，有了一些新的认知。 朋友不要多，真心朋友，不可能很多的。 需要断舍离，把时间花在更重要的地方，比如关注家人、关注自我发展、锻炼、思考。 关键词2:电商产品经理阅读了《电商产品经理》一书，有很多思考，也做了笔记，笔记单独发。 总体上是病怏怏的一周，对断离舍有了更多认知。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"程序化广告交易（上）","slug":"20200619-程序化广告交易（上）","date":"2020-06-18T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/06/18/20200619-程序化广告交易（上）/","link":"","permalink":"https://kerryli1007.github.io/2020/06/18/20200619-%E7%A8%8B%E5%BA%8F%E5%8C%96%E5%B9%BF%E5%91%8A%E4%BA%A4%E6%98%93%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"目录： 从广告到程序化广告 程序化广告交易的生态系统 程序化广告基础 点击率预估与推荐算法 案例 因为文章较长，所以分为上下两部分，上部分，覆盖目录1和目录2，下部分覆盖接下来的。 一、从广告到程序化广告1.1 什么是广告？William F.Arens在《当代广告学》中给出定义 广告是由已确定的出资人通过各种媒介进行的有关产品（商品、服务和观点）的，通常是有偿的、有组织的、综合的、劝服性的非人员的信息传播活动。 回顾历史。 广告这个词汇，最早源于拉丁文“adventure”，意思是引起注意，进行诱导。公元1300-1475年间，中古英语里有了“advertise”，其含义为“某人注意到某事”，后演变为引起别人注意，通知别人某件事。 不难发现，广告的本质&#x2F;目标，是需要向目标消费者进行告知、诱导和说服，最终，促成购买。 广告有如下基本特征： 为广告主（出资人）服务 传递特定的信息内容 传播对象具有选择性 非人际传播方式 进行说服性沟通 分别理解一下这些特征，先说一下为什么要了解这些特征，从古至今，广告的发展历经变迁，但是其基本特征始终一致。 （一）为广告主（出资人）服务 所谓广告出资人，就是广告活动的发起人，也就是广告主。在商业广告中，广告主通常是企业。 （二）传递特定的信息内容 广告传播的内容具有一定的规定性，即具有营销的内涵。随着社会经济发展和市场营销活动的变化，广告的信息内容也在向深广开拓。 （三）传播对象具有选择性 广告传播活动不是以所有的消费大众为传播对象，而是向特定的目标市场进行的信息交流。这个目标市场是由企业根据营销目标来确定的，目标市场的消费者即是广告的传播对象。 （四）非人际传播广告 广告需要通过一定的媒体完成其传播过程，采用的是非人际的传播方式。严格意义上讲，广告的发展就是和媒体的进步联系在一起的。没有媒体的演变、进化，广告就失去了存续发展的根基。广告所借助的载体，从一般的媒介物，到大众传播媒体，再到媒体数字化时代的互联网，随着现代科学技术水平的提高，新的媒体还在增加，推动着当代广告活动翻天覆地的变化。 （五）进行说服性沟通 广告的最终目的，是使用目标消费者接受广告发出的信息，从而影响消费行为，促进销售。这样，就要运用各种各样的方式来表现广告信息。 （六）一种付费的传播 广告活动的整个过程，包括策划、制作广告作品，通过媒体发布信息，进行效果调查等每一个环节，都需要付出一定的费用。 广告一般分两种： 品牌广告：提升商家品牌影响力，促进大众的品牌认知，无需直接提升产品或服务的销售 促销广告：商家直接为了提升产品或服务的销售而做的广告，能够直接造成用户的转化（例如点击、购买等行为）或商品的销售 在本篇文章中，我们讨论的是促销广告。 1.2 程序化广告1.2.1 程序化交易广告为什么会出现程序化交易广告的兴起，是为了满足何种需求？ 需求方希望优化投放效果。 我的广告费用有一半都是被浪费了的，但是问题是，我不知道是哪一部分。我花两百万美元做广告，但是我不知道这刚够一半还是多一倍。 营销天才约翰.沃纳梅克曾说到。 广告投放效果的监控难题，一直存在。互联网的发展，使得大量投放数据得到了追踪。广告主对投放效果的要求也越来越高。因此，催生了程序化交易广告，允许广告主选择他们定义好的用户进行营销，同时，让广告主自行选择流量，以及对每次广告展示，进行独立出价。 这样的需求，要求询价、出价和竞价同时进行，这就产生了以实时竞价（RTB）为核心的程序化交易市场。 1.2.2 程序化广告交易的核心RTB(Real Time Bidding)RTB是指实时竞价广告模式，是一种高度程序化的广告购买与投放流程。RTB利用第三方技术在数以百计的网站或移动程序（App）上针对每一个用户的广告展示请求进行评估以及出价的竞价技术。与大量购买投放频次不同，实时竞价规避了无效的受众到达，针对有意义的用户进行购买。 RTB是售卖广告展示（impression），下图是一个典型的RTB流程 0：用户打开电脑（app）登陆网站，这个动作被传输给Ad Exchange广告交易所 1：广告交易向各需求方平台所发出竞价请求，用大白话来说，就是“诶，我这个用户，有向他展示广告的机会，你们要不要来？”为了方便各需求方平台做决策，Ad Exchange在发询问的时候，还会附带一些信息，包括用户信息，网页信息，以及上下文。 2：需求方平台看到Ad Exchange的询问，并且根据已知的信息，对该用户的商业价值以及点击广告可能性进行了预估，结束之后，给出了一个竞价，反馈给Ad Exchange。 3：Ad Exchange对多方需求平台给的竞价反馈进行综合评估，最后选择一家 4：Ad Exchange会在竞价中选择一家，选择依据有价格，也有Ad Exchange做的点击预估概率 5：Ad Exchange将相关广告信息展示给用户，这个用户展示信息里面是附带了用户行为追踪代码的 6：最终，等待用户的行为。 上述6个步骤，是一个典型的RTB流程，需要注意的是，整个流程是需要在100毫秒之内完成的。因此，对各个环节的性能要求都是极高的。 RTB的优点： 规避了无效的受众到达，针对有意义的用户进行购买 （对广告商和代理公司）最直接的好处就是提高了效果与投资回报率 （对媒体来说）带来了更多的广告销量、实现销售过程自动化以及减低各项费用的支出《互联网DSP广告揭秘：精准投放与高效转化之道》 RTB这种广告交易方式有一个相对完整的产业链，包括Ad Exchange、DSP、DMP、SSP等4个重要的技术环节。RTB的4个重要技术环节协同实现了广告实时竞价的流程化、程序化，而要实现人群的精准定向，还需要Cookie Mapping技术。 二、程序化广告交易的生态系统上文提到了RTB，由4个主要的技术环节组成，这4个环节，也构成了程序化广告交易的生态系统。 让我们来了解一下程序化广告交易的生态系统。 生态系统的定义是，一定的生物群体相互依赖和生存的生态环境。《批判性思维工具》 生态系统的中的生物群体，相互依赖和生存。程序化广告交易这个生态系统中的各个关键环节，相互依赖。 我们分别了解一下这4个技术环节。 1.2.2.1 DSP（Demand Side Platform，需求方平台）DSP（Demand Side Platform）需求方平台。 1.2.2.2 SSP SSP是供应方平台（Supply Side Platform），是面向publisher（媒体主，即站点或APP的开发者或所有人）的供应方管理平台，作用包括帮助媒体主进行流量分配管理、资源定价、广告请求筛选等，更好地进行自身资源的定价和管理，优化营收。 其实上述的这些定义，理解起来还是比较麻烦，举一个case来理解一下 1.2.2.3 Ad Exchange1.2.2.4 DMP 数据要发挥价值，就需要一个集中采集、存储、处理、分析、输出运用的系统平台，即大数据管理平台（Data Management Platform，DMP） DMP系统一般由4个功能模块：数据输入、标签制作、数据输出、数据报表 未完待续～","categories":[{"name":"广告系统/推荐策略","slug":"广告系统-推荐策略","permalink":"https://kerryli1007.github.io/categories/%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F-%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5/"}],"tags":[]},{"title":"《Facebook效应》读书笔记（1）","slug":"Facebook效应（1）","date":"2020-06-17T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/17/Facebook效应（1）/","link":"","permalink":"https://kerryli1007.github.io/2020/06/17/Facebook%E6%95%88%E5%BA%94%EF%BC%881%EF%BC%89/","excerpt":"","text":"最近在重温《Facebook效应》，发现阅读的书籍，过了一段时间之后，就忘记了，遂起念开始强制性地要求自己，每完成一章节的阅读，都要有记录，有输出。这么一来，阅读的速度肯定是会降下来，但是没有输出的阅读对我而言，是无意义的。 产品天才扎克伯格是一位产品天才，他有着极强的做社交产品的天赋。今天我们所了解到的，皆是他是Facebook的创始人。通过阅读《Facebook效应》，了解到扎克伯克一直都有做一些有趣的项目，一些新奇的产品。 课程搭配（Course Match）课程搭配是为了帮助学生们根据别人的选课来确定课程表。只要点击一门课程，就能发现谁报名了这门课程，或者只要点击一个学生的名字，就能知道他报名了哪些课程。扎克伯克对这个项目的评价是：“通过事物就能把人联系起来。” 这个创意，在今天看来，都是十分有趣的。在大学这样一个封闭的环境，你的所有社交都是围绕同学展开，有这样一个工具的帮助，可以去认识其他你有兴趣的朋友。我当初为了追前男友，也有偷偷跟踪他，最后发现他喜爱在某教学楼的一楼自习室自习，然后一周五天，都去和他偶遇。最后，才谈上了恋爱。 Facemash这个项目旨在标记出校园内最炙手可热的人物。扎克伯克邀请用户比较两位同性同学的相片，指出谁的人气更高。假如一位同学的评分等级更高些，那么此人的相片就会用来与其他更受欢迎的学生相比较。 扎克伯克做了很多小项目，这些项目都是关于”发现人们如何通过相互参照建立联系“。 FacebookFacebook核心理念：开通一条帮助哈佛人分享更多信息的道路，这样一来，大家就能更多地了解到校园里发生了什么。扎克想做到这一点，所以建立了能得到所有人信息的渠道，而且每个人也都能与人分享自己希望共享的一切信息。 在这个网站上注册需要一张单人照和少量个人信息以创建个人简介。注册过程中要明确自己的相关状况，会从下拉式菜单中选择：单身或者未确定伴侣关系，还要确定自己的电话号码、AIM用户名、邮箱；说明自己选修的课程；最喜欢的书、电影和音乐；参加的团体；政治立场；态度以及最爱的名言。Facebook自身没有内容，它不过是一个程序，是为满足客户需要而提供的一个平台。 在Facebook上，可以“桶一下”其他用户，对方的主页上就会显示出被“捅”的迹象。这意味着什么，扎克伯克的解释是：“我们认为这是有趣的做法，是一种没有特别意义的特别……那么就随意运用这个功能吧，因为你不会从我们这里得到解释。” 哈哈，今天重温这段读书笔记，看到这里，突然想起来，微信最近新上线的拍拍功能。 总之，其实很多产品设计，在理念上，都是有传承的，多看，多体验，就像张诗沐老师说的，只有多体验，多感受，才能眼界高。 第 2 章 | 锋芒微露Facebook第一批客户中有MasterCard，这家公司为大学生提供特别的信用卡服务。MasterCard的管理者们对 Facebook 是否拥有大流量表示怀疑。因此，MasterCard没有直接支付广告费用，只有在出现第一名学生提交了办卡申请才会同意付费。（对比当下，去公众号投广告，roi好多都为0了～这个现象是值得反省的。）最后，MasterCard收到的信用卡申请数比他们这场4个月的广告活动预计得到的数量多一倍。Facebook凭借正逢其时的客户——就读于顶级学府的富有本科生而赢得广告。MasterCard于是继续在这里投放。 在扎克伯格看来，以广告获得尽可能多的收入还没有让用户始终开心重要。 Wirehog在将大部分时间用于Facebook的同时，他和另一位大二的编程天才安德鲁.麦科勒伦开始着手设计一款被他们称为Wirehog的新软件，创造它的灵感部分是来自当年声名狼藉的音乐分享网站Napster。 2003年秋，硅谷的风险投资者们将总金额3,500万美元的资金投向四家刚成立的当红社交网络公司——Friendster、LinkedIn、Spoke、Tribe。(原来LinkedIn已经有17年的历史，而我认识这家公司不过4年。当年四家当红网络公司，如今也只有LinkedIn一家了） 总结一下今天的阅读收获： 视野，多看，多看，多学习别人怎么做的，别人如何思考的 coding，编程真的蛮重要的，可以创造事物 To Be Continued～","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（9）产品负责人的3个能力（上） | 商业嗅觉及推理能力","slug":"幕后产品（9）产品负责人的3个能力（上）-商业嗅觉及推理能力","date":"2020-06-17T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/06/17/幕后产品（9）产品负责人的3个能力（上）-商业嗅觉及推理能力/","link":"","permalink":"https://kerryli1007.github.io/2020/06/17/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%889%EF%BC%89%E4%BA%A7%E5%93%81%E8%B4%9F%E8%B4%A3%E4%BA%BA%E7%9A%843%E4%B8%AA%E8%83%BD%E5%8A%9B%EF%BC%88%E4%B8%8A%EF%BC%89-%E5%95%86%E4%B8%9A%E5%97%85%E8%A7%89%E5%8F%8A%E6%8E%A8%E7%90%86%E8%83%BD%E5%8A%9B/","excerpt":"","text":"最近看了《幕后产品》第九章，这一章节介绍了产品负责人需要具备的3个能力，产品能力如下： 商业嗅觉及推理能力：对产品扩张、商业化的敏锐感觉，以及推导出为何能获得更大的发展、如何能发展壮大。 业务架构以及创新能力：规划、实施复杂的业务架构，通过产品、运营、市场的多维度布局来打通用户对产品特性的认知。 善于沟通以及领导能力：鼓舞、带领团队向战略方向前进，克服非常之困难，完成非常之突破。 我本来打算将这3个能力，写在一篇读书笔记中，但在实际撰写的过程中发现，随着最近半年的积累，我的输出能力明显提高，在构思读书笔记的时候，将一些额外的对产品的认知心得，也掺杂揉合了进来，故而越写越多，写完第一个能力字数就1万加了，因此，将这三个能力拆分为上中下三篇文章，每篇文章分别按顺序对应不同的能力。 本篇主要关注“商业嗅觉以及推理能力”。 阅读门槛 - 时间：本篇读书笔记真的比较长了，1万字+，这还是我将文章拆分成上中下三部分。因此，对时间会有要求。 可读性：说实话，这篇文章中的很多内容，比如认知状态，商业模式，工具型产品，如果不能带着思考阅读，基本上读不懂，如果没有耐心，就还是别读了～不如刷抖音 适合人群：产品经理，对产品感兴趣的同学 一、从人的4种认知模式谈起商业嗅觉是什么意思，我的理解商业嗅觉即是对潜在商业模式的察觉。 那什么是商业模式？ 为什么要将什么是商业模式，单独拿出来分析其定义，因为要想理解商业嗅觉离不开对商业模式的洞察，如果我们尚未真正了解什么是商业模式，那么对于商业嗅觉的分析，也无法理解透彻。 什么叫做“尚未真正了解什么是商业模式”呢？在阅读书籍时候，我们很容易，陷入一种状态，这种状态就是，我们自以为自己知道某个概念的含义。但是我们压根没有理解其含义，也无法讲给别人听。这种状态是很可怕的。想到这里，我突然想起猎豹CEO傅盛在他的认知三部曲中有过极为精辟的讲解与总结，遂将其摘录 这是一个人认知的四种状态，也是人的四种境界，可被翻译为： 不知道自己不知道 —— 以为自己什么都知道，自以为是的认知状态。 知道自己不知道——有敬畏之心，开始空杯心态，准备丰富自己的认知。 知道自己知道——抓住了事情的规律，提升了自己的认知。 不知道自己知道——永远保持空杯心态，认知的最高境界。 95%的人都在第一阶段，绝大多数人在谈及一个概念时候，很容易出现这种状态，自己以为自己知道。关于其原因，傅盛解释到“自以为是，是自我认知升级的死敌”，这种说法有一定道理，但是我想从另一个角度来谈谈，为什么我们会迈入自己以及自己知道的误区。 人学习知识并且将其掌握过程，遵循输入-加工-输出这3个步骤，很多时候，我们以为的掌握了某个知识，只是停留在输入这个阶段，或许是在某堂课上听老师讲过某个概念，又或是在某本书、某篇文章中，看到过相关的解读分析。但是，知识的掌握其需要一个内化的过程，单单的知识输入——没有经过知识加工以及独立输出，并不等于掌握了知识，也就是说，我们自以为的知识掌握，其实并不是真正的知识掌握。我们所处在状态，只是我们接受过这个概念的输入，但是我们并未对这个概念进行过加工以及输出。 那么，如何自我检查，我们是否真的掌握了某个概念呢？讲给别人听。 爱因斯坦曾说：如果你不能把一件事解释给你祖母听的话，说明你还没有真正理解它。 当我们知道，我们其实并未掌握某概念之后，我们便会开始尝试去了解这个概念。 二、到底什么是商业模式说回商业模式，我们现在来讲讲到底什么是商业模式？ 商业模式回答了一个重要的问题，即“竞争优势的持续性”。也可以简单地理解为，商业模式回答的是，企业如何持续性赚钱。 不同的时期，商业模式这个术语的用途有所不同，如下图所示。如果希望对商业模式有进一步了解，可以阅读书籍《商业模式全史》。 三、网易云音乐的商业模式了解了商业模式，我们回到网易云音乐的商业模式。 商业模式回答的是如何可持续化赚钱。 互联网的一个重要特征在于规模化，商业嗅觉是一种对扩张和盈利的敏锐直觉。如果按照一般营收业务和用户规模业务来区分，扩张是包含了这两者，无论是做用户规模业务，还是营收业务，都应该对扩张有敏锐的直觉，能够谋求更大的发展。 什么是用户规模业务，我的理解是To C，如微博、微信、王者荣耀。什么是营收业务，我的理解是To B，如SAP，Salesforce，Oracle这一类。 不管是To B还是To C，MVP经过了市场检验（关于MVP，可以参考相关数据《精益创业》，这本书是一本非常好的书，很多创业者，对里面的一些建议都极佳推崇），都要追求扩张，谋求更大的发展。 诗沐老师讲到一个产品的广告价值等于展现广告总时长与单位时长价格（这个价格通常与用户群、购买力、算法精准度等相关）的乘积。 关于广告单位时长价格的影响因素，用户群、购买力、算法精准度。这3个因素，作者并没有展开来讲，因为最近我也正好在研究程序化广告投放，因此，在这一部分做一些补充说明： 用户群，用户群，是男是女，比如美图秀秀，其女性用户占据绝大部分。 购买力，这个和用户群有较大关系。 算法精准度，算法精准度的本质是CTR预估，向某用户展示某广告，预估该用户有多大概率点击该广告。 产品的广告价值 &#x3D; 展示广告总时长 * 单位时长价格 公式我们知道了，如果说，现在你是这款产品的商业化负责人，现在需要提升产品的广告价值，你的思路是什么？暂停一下，想一下，我一直提倡带着思考的阅读，没有思考的阅读，本质上，毫无意义，单纯浪费时间而已。 好了，思考结束。我们会想着从产品的广告价值的两个直接影响因素切入，比如提高展示广告总时长，同时，增加单位时长价格。 我们再看看诗沐老师是如何做的呢？（在我们读书时候，读到关键的节点，我们可以将书合上，推演在这种情景下，我们会如何决策，接着我们再看书中的主人公如何决策，对比两者的差异，思考，总结） 对于一个用来听音乐的App，用户听歌的时间肯定占大头，大部分音乐产品的这个时间都会占据90%以上。听音乐 是一件很随性的事情，可以边听音乐边刷微信、微博、看资讯、看书….这一方面是音乐App获得足够多用户的优势（与其他类型的App在用户时间层面竞争小），另一方面也是因为App获取用户眼球的劣势——用户习惯在后台运行App来听音乐，而不是盯着一个音乐App来听音乐。 3.1 用户使用产品的方式对商业化的影响从诗沐老师这段话，我们也可以得知，用户使用产品的方式，真的是对产品的商业化，有着非常大的影响。举个例子，“下厨房”这款App，是一款非常优秀的工具产品，日活过百万。 据QuestMobile数据显示，2020年春节前后，下厨房日均DAU为106万。 但商业化做得并不好。我为什么这样说这款产品的商业化做的不好呢？？ 受疫情影响，我这个外卖党，也开始下厨了，当然是需要下厨房这样专业的食谱工具的支持。但是，下厨房的开屏广告让我惊呆了，几个截图，感受一下这是开屏广告哦？用户打开App，很明显，这个动作是有明显意图的，下厨房不是娱乐类产品，不像抖音、快手，这两者是用户无聊、寂寞了会打开看看，但是打开下厨房的用户，只有一个目标，就是要做饭。这样的开屏广告，而且是直接将用户链接到第三方页面，其用户体验可想而知，十分糟糕。除了开屏广告是跳转到第三方网页这个形式，还有的是，这些广告内容，“本社区交友，喜欢大叔型男友，可视频“，这是社交类产品，而且这个文案，也不太正经的样子，从这里可以看出，下厨房的广告选择丝毫没有边界。 为什么会出现这个现象呢？因为使用下厨房的人，就是将下厨房当作纯粹的工具来使用，用完即走，虽然，下厨房也有尝试一些商业化的操作，比如销售一些商品，不过我测试过，这些商品，下单就会显示，没有库存。（摊手.jpg） 这就是用户使用产品方式和产品商业化之间的关系，下厨房的分析到此结束，有时间再对下厨房展开更多分析。 3.2 网易云音乐商业化之路回到网易云音乐，上文诗沐老师的分析，已经说到了，用户在使用网易云音乐时候，习惯在后台运行App听音乐。要增加产品的广告营收，就需要增加用户视觉停留在App上的时长。 如果按照听歌前、听歌时、听歌后来划分的话，听歌前在大多数情况下是不行的。如果让用户在听歌前花费很多时间，这将与用户需求相悖。而在听歌时，听歌后，其实有空间可以挖掘。发现没有，诗沐老师在分析问题的时候，是将一个大的议题，根据某种规则，将其分解为小的组成部分，然后对每个部分进行依次分析。同样的，在我们分析大的问题时候，我们也可以从某个维度将其拆解为小的部分。 音乐评论恰恰是能够扩展这个空间的功能。如前面的章节所述，网易云音乐成功地让用户养成了边听音乐边看评论的习惯，大大地增加了用户眼球停留在App上的时长：一首歌接一首地听下去，一条评论接一条地看下去。这样就给网易云音乐的营收业务拓展了新的土壤，而非像许多其他音乐产品那样在音频上加广告——这必然会伤害用户体验。有了不断增加的用户视觉的停留时长，网易云音乐就有了更多的想象空间，在营收业务上也有了更多的结合点，最简单、粗暴的方法就是在评论区放置演唱会门票的售卖链接，这都是以前纯音频App所不可想象的。诗沐老师的这本书首次发版时间是2019年4月。2020年6月，QQ音乐一则相关新闻出现在人们眼球，“QQ音乐开始在歌曲之间自动插播广告了，时长约15秒，如果不想听广告，就开VIP会员“ 这个举措，毫无疑问，为qq音乐招致骂声一片。写到这里，我方才回过神来，诗沐老师对行业商业化，用户的了解，真的是洞若观火。 他首先是深刻地了解到在音频上加广告，伤害用户体验，同时，他在很早就开始规划，深耕评论，增加用户的视觉停留时长，这一招，真的是太高了，高手～截图是网易云音乐的直播广告位～ 整个思考过程就是在营收业务扩张上的商业嗅觉，敏锐地觉察到商业机会在哪里，这些机会往往也是当下没有被充分挖掘的，因此，商业嗅觉才如此重要。 敏锐地觉察到商业机会在哪里。我觉得这里还有一点，就是，在别人还没有觉察到的时候，去觉察到接下来的商业机会。有点像我司，觉察到未来AI行业重要的竞争是算力。 到上面为止，在商业嗅觉这里，网易云音乐的case分析结束。不过，作者非常给力，除了和我们分享了他亲自操盘的网易云音乐，还分享了他对两个国民应用的观察与分析，今日头条和微信。 四、今日头条和微信的扩张案例 今日头条在用户量飞速增长时做了什么？剖析它每一个阶段的策略，其实会发现打法很有规律：它在用户规模扩张时最强的一个手段是扩展领域。 今日头条的发展经历了：资讯个性化 &gt; 视频 &gt; 头条号（泛内容平台）&gt; 社交。每一个阶段其实都是在打造不同的引擎，与不同的竞争对手抢用户时间。这里有一个很重要的商业嗅觉，即利用资讯个性化 + 视频与其他新闻资讯产品竞争，这是高一个段位的打法。也就是说，当其他竞争对手在追逐今日头条的资讯个性化优势时，今日头条又增加了一个视频的引擎，双引擎打单引擎。这就在大局上占据了上风，对于原有的资讯产品的用户，吸引力非常大，而对于视频产品，今日头条则能很好地避开直接竞争，因为视频产品现在用户需求大量集中在电视剧、综艺节目、电影、而今日头条上更多的是轻松、搞笑的段视频。 在这里，一共讲了两个关键点：第一个是双引擎打单引擎，我认为在双引擎打单引擎这个维度，作者的分析，其实是泛善可陈，从读者的角度来看，作者并没有讲清楚，为什么双引擎打单引擎就是更好的，只是概括了一句，这就在大局上占据了上风。换个角度，如果字节当时失败了，是不是也可以说，是因为字节对自己的业务没有聚焦；第二点是字节头条的视频产品和当时市面上的产品，其实是错位竞争，并没有直接硬碰硬，这个点，我认为非常具有启发意义，如果有对字节段视频如何火起来，感兴趣的朋友，可以认真去研究一下西瓜视频和抖音。 同样，在通过视频增加了引擎发展之后，今日头条瞄准了新的方向——叫做头条号，把自己变成了一个泛内容平台。这个动作其实是瞄准了微博和微信的定位，它在扩张时通过涉足更广泛的领域，吸引用户更多的碎片时间。当然，当字节头条的边界不断扩张的时，总会和竞争对手发生交集，这样更激烈的竞争就产生了，也就必然意味着今日头条要在内容和设社交领域有所拓展——接连推出好几个短视频产品。上面这一段话，其实内容密度是非常大。短视频作为发展引擎，接着做泛内容平台，瞄准微信和微博，碎片化时间，边界扩张，与竞争对手发生碰撞。一小段，作者写了大量的内容，里面的逻辑道理，是需要读者去细细品味，读一段下来，我感觉是非常烧脑，但是我最近看了一些公众号主，大概3～3天就能读完一本书，然后写出读书笔记，我真的是羡慕！！！读完上面一段话，我脑海里接二连三冒出来了如下问题。 1. 头条号和今日头条的关系是什么？ 2. 为什么说微博和微信是泛内容平台，什么是泛内容平台？ 3. 字节跳动和哪些竞争对手发生了哪些碰撞？ 4. 为什么发生竞争后字节跳动需要在内容和社交领域有所拓展——接连推出好几个短视频产品？这里说的这几个短视频产品都是什么？我了解到的只有西瓜视频和抖音，西瓜视频因为内容低俗的问题，已经被强制封了。所以，我了解到的，目前字节跳动其实只有一款短视频产品，就是抖音。 有问题，不要害怕，我们一个一个来解决。问题一：头条号和今日头条的关系是什么？ 头条号是今日头条旗下媒体&#x2F;自媒体平台，致力于帮助企业、机构、媒体和自媒体在移动端获得更多曝光和关注，在移动互联网时代持续扩大影响力，同时实现品牌传播和内容变现。另一方面也为今日头条这个用户量众多的平台输出更优质的内容，创造更好的用户体验。头条号的作用类似于微信公众账号。 关于字节头条这家公司，如果希望有更深的了解，参考移动猎豹傅盛的文章《我的商业新思考：八位大咖详解商业暗知识 | 案例，为什么今日头条能崛起》 配图是张一鸣在会议上，描述的他关于头条号的vision。 问题二：什么是泛内容平台，为什么说微博和微信是泛内容平台？ UGC是相对于PGC的一种内容来源，简单来说，由专业的个人，机构针对输出的较为传也、权威的内容都属于PGC，例如电影、电视剧、娱乐节目、书籍刊物、专业媒体资讯等；反之，朋友圈的图文、微博、知乎的答文、唱吧音乐，大都属于UGC。UGC是随着互联网2.0的兴趣而诞生的一种“大众生产内容”的模式，可以说，UGC平台本身就是互联网2.0的精髓的巨象化体现：它本身完全不产生内容，仅为用户提供一个自由的内容提交发布平台，却彻底改变了人们与世界的沟通的方式，满足了用户表达自我的心理需求。UGC是一种泛内容组织以及生产模式，它本身就可以作为一个产品的核心组成结构，如Facebook、QQ空间、微博。 《进化式运营：从互联网菜鸟到决定高手》 我理解的泛内容平台，就是提供一个平台，让用户来创造内容，这些内容就是UGC。这个也不难理解，就是在头条号，字节跳动都是鼓励用户自己来创作，“千人万元计划”就是为了鼓励UGC。 问题三：字节跳动和哪些竞争对手发生了哪些碰撞？关于这个问题，我有一个很有意思的分享，说的是，字节跳动抢夺了阿里的大量市场。但是，其实阿里本质上是一个To B的企业。字节跳动的产品，都属于泛娱乐，其实其影响最大的对手是腾讯。稍微对这个有点了解的朋友，应该都知道腾讯微视，一句话概括，腾讯是希望微视能够制衡抖音，但是现实确实非常残酷（说实话，这段分析，其实没啥含金量，其中我的思考质量也不高，哎，没有思考沉淀的文字不想写 问题四：为什么发生竞争后，字节跳动要推出好几款短视频产品？字节跳动旗下的短视频有抖音、快手、火山、西瓜视频、Buzz Video、Vigo Video。 要了解为什么字节跳动旗下有这么多款短视频产品，我们首先需要了解短视频市场。思考了一下，决定将整个问题在单篇文章中写，一是因为，将这个内容掺杂在本篇文章中，容易让本文主次不清，二是内容太多，对阅读的人，也是极大的考验。 作者分享了3个产品商业化case：1. 网易云音乐2. 今日头条3. 微信 五、关于扩张的两个问题分析了两家国民应用的扩张，最后作者收敛回来，引导我们思考关于扩张中的两个问题： 1. 为何我能获得更大的发展 2. 我如何能发展壮大 第一个问题可以拆解为我们的产品核心是什么、产品的边界在哪里两个问题。 作者用网易云音乐的case来帮助我们理解关于扩张的这两个问题： 产品核心。产品发展初期，产品的核心是让用户听到全世界的好音乐；经过了很多年之后，产品的核心扩展到了：与有趣的灵魂一起享受精神共鸣。 产品边界。在精神共鸣这个核心点，内容形态的扩张是很可能在网易云音乐产品边界之内的。而超出了精神共鸣，比如电商促销、财经要闻，则显然是在产品边界之外。 关于扩张最重要的就是要明确产品的核心和边界。在回答如何能够获得更大的发展时，就是在核心之上设计用户与营收增长的发展策略，也就是知道起点和终点并逐渐明确中间路径的过程。 在关于扩张的思考与解决问题，有2个需要注意的事项： 要在发现问题之上的层面来解决问题（The significant problems we face can not be solved at the same level of thinking we were at when we created them） 如何在复杂的业务架构上打造新的增长引擎 于是，作者设计了以精神共鸣为核心的内容流与音乐结合，从更高的层面去获得新的发展，一些思考结论如下： 在内容消费、泛娱乐、精神消费等领域，音乐都与视频、图片、社交等类型的产品在用户的使用时间上有竞争。 网易云音乐活跃用户量级的下一个大规模的增长，很可能不是与愈发同质化的音乐产品竞争，而是寻求新的增长引擎。 网易云音乐目前用户使用时间内虽长，但其中看的比重不高。人均每天听的时长已经达到业内顶级水平，但在看的时长上仍有很大的发展空间。 网易云音乐与很多视频、娱乐、社交产品的用户重合度较高，用户属性较为接近。 对于绝大部份的互联网产品的广告业务而言，流量是更头疼的问题——头部寡头集中了绝大多数的流量，能以此发展广告交易平台，而琉璃那个欠缺的产品则很少有这样的机会。对于商业流量的挖掘，一样需要好的商业嗅觉，即便在现有功能上开广告位也需要一定功底（如何在保证流量充足同事不影响用户体验）。例如，网易云音乐的评论区广告对用户的影响显著低于在播放页上开放广告，另外这其中最好的例子是信息流中的原声广告。传统的广告展示原则是，希望在页面背景中突出广告，以达到吸引用户注目、点击的目的，而原生广告则恰恰反其道而行之，广告的展示和原生内容一样。究其原因在于，信息流非常适合手机屏幕，也培养了用户在流中持续、快速地消费多个任务的习惯，如果广告是突出的，那么用户反而会很快地略过广告，因为继续浏览后面内容的成本非常低；而原生广告则更符合用户的内容消费习惯——快速而沉浸式的体验，当然广告本身的内容也要吸引用户，让用户看下去，从而引发进一步点击的兴趣。 在运用用户注意力时间来形成商业模式的时候，有以下几点需要考虑 注意力时间的价值。这个模式让不愿意付费的用户花时间，让愿意付费的用户花钱。核心在于让用户付出的时间产生价值，并且这个价值能获得花时间和花钱用户的认可。 价值货币化。在我们设计用户花时间产生价值的策略的时候，请务必将货币化考虑进去。货币化可以大大提高用户对价值的认知，降低未来真正付费的门槛。在游戏、直播产品中都有免费道具，而这些免费道具也是用“货币”标价的——这些“货币”可以免费获得。 消费场景。用货币来衡量用户投入的时间价值，最关键的是货币需要有消费场景。 二八原则。在注意力时间的商业价值成形之前，绝大部份用户是不会愿意为其付费的。在思考哪些用户为此付费的时候，我们只需要思考整体用户中的一小部分即可。实际上，在游戏、直播、QQ等社交产品的收入分布中，也是少数“土豪”玩家贡献了大部分营收。 最后，商业嗅觉一方面来自天赋，但是我们绝大多数人都不具备；一方面也可以后天锻炼、培养。（多看，开眼界）","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"Q2_Week6_工作总结","slug":"Q2-Week6-工作总结","date":"2020-06-12T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/12/Q2-Week6-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/06/12/Q2-Week6-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：绩效、Hadoop监控Dashboard、gitlab 一周又过去了，这周的关键词，一共有3个，从上周的的4个关键词，降回到了3个关键词，感动。 关键词1：绩效&#x2F;OKR关于绩效，主要想讲3个收获，分别是心态的改变、OKR工作法、以及工具。 1.1 心态说实话，以前，我很不喜欢绩效考评这事，我觉得这是形式主义的体现，对员工本质上没有益处，倒是会花费员工大量的时间，做这件事。况且，每个员工的表现，到底如何，有没有偷懒，这不是一件显而易见的事吗。 但是对于上述两点： OKR&#x2F;绩效考评对员工的影响 员工的表现是否是显而易见 我都有了不一样的认识。因此，如果正在阅读这篇文章的你，现在也是之前与我一样的心态的话，建议你，静下心，阅读一下这篇文章。 OKR&#x2F;绩效考评对员工的影响OKR对员工的好处，在今天看来，主要有三个方面 设置好的目标 符合PDCA工作方法论 有利于和Leader&#x2F;团队沟通 目标为什么重要？ 如果你不知道目的地在哪里，你可能永远无法到达。 目标的重要性不言而喻，而设置一个好的目标，也同样重要。 1968年，在英特尔公司创立的同一年，马里兰大学的一位心理学教授埃德温.洛克（Edwin Locke）提出了一个理论，对安迪.格鲁夫产生了很大的影响。埃德温.洛克指出:首先，“困难目标”往往比简单目标更能有效提升绩效；其次，具体的、困难的目标往往比含糊其辞的目标“带来更高的产出”。 Edwin Locke,”Toward a Theory of Task Motivation and Incentives,”Organizational Behavior and Human Performance, May 1968 绩效考察&#x2F;OKR工作法，会push大家设定一个好的目标。 符合PDCA工作法关于PDCA工作法，可以参考文章https://kerryli1007.github.io/2020/05/05/%E6%8E%A5%E4%B8%8B%E6%9D%A53%E4%B8%AA%E6%9C%88%E7%9A%84%E6%88%90%E9%95%BF%E8%A7%84%E5%88%92/ 有利于和Leader&#x2F;团队沟通在职场中，和Leader的沟通，有利于了解Leader对自己的预期，也有利于在执行一段okr之后，看看Leader的反馈，有哪些地方是自己做的好的，哪些地方尚有提升的空间。 1.2 OKR工作法 启动一个人的变化，开始并结束于人们头脑中的心智地图——他们如何看待组织和他们的工作。正如真实的地图引导人们徒步跋涉穿过喜马拉雅山脉那样，心智地图则引导人们在日常组织生活的各种行为。 在了解了绩效&#x2F;OKR对工作大有裨益的原因后，让我们来看看OKR是什么，以及如何执行OKR工作法。 1.2.1 OKR是什么OKR，Objective and Key Results，目标与关键结果。 1.2.2 执行OKR的步骤 制定目标每个季度团队可以设置一个有挑战的，方向明确的目标，同时设置三四个明确且具体的结果指标，并且这些指标能确保目标的完成。思考一下未来三个月团队的目标是什么？有哪些重要的事情看起来很棘手？三个月的时间能否齐心协力把它们解决掉？ 讨论关键结果关键结果一定是需要量化，并且，如果关键结果实现了，那么也就意味着目标的实现。 复盘复盘，复盘，再复盘。 ⚠️⚠️⚠️一些会团队无法完成OKR的因素 因素1:没有给目标设置优先级设定一个单一的目标，用三个关键结果来衡量它。 因素2:缺乏充分沟通，导致没有能准确理解目标 当你说得不想再说了，人们就开始听进去了。——领英首席执行官 杰夫.韦纳 因素3:没有做好计划一旦必须要完成一些事情的时候，很多人认为只要有意志就没问题，坚持执行就会有好结果。但是这种观点不正确。我们需要一个目标管理系统来帮助我们一直记得更重要的事情。 因素4:没有把时间花在重要的事情上 重要的事通常不紧急，紧急的事通常不重要。——德怀特.艾森豪威尔 OKR所需要的是什么，极致聚焦! 因素5:轻易放弃成功实施OKR的企业都有相同的特点：失败后不断尝试。成功为宜的希望是反复尝试，这并不是一味盲目地尝试同样的事情，而是应该密切追踪哪些事情对目标的推进是有效的、哪些是无效的；要多做有效的事情、少做无效的事情；要不断地学习，吸取教训，最后一定能成功。 最后，欲望让我们起航，但只有专注、规划和学习才能到达成功的彼岸。 1.3 工具写了1个小时了，终于来到了工具篇～嘿嘿，这也是我最喜欢的part，因为，试想一下，我们刚才说的这些好的方法论，如果再辅以一个完美的工具，那是不是，就会执行地更好呢？ 那目前市场上，是否有好的OKR管理工具呢？我们来探索一下吧。 说起OKR管理工具，首先说SAP的SuccessFactor。说这款产品，有两个原因： SAP是To B行业的巨兽，这样跨国企业麾下的产品体验，自然我也抱有极高的预期 我本周刚刚用了SAP的Success Factor，用同事的两句话，来表达我们对这款产品的感受 垃圾傻逼系统 这个页面怎么出来的？我从来没有看见过是的，这两句话，直观地表现了我们的产品体验，糟糕。加上，原来对SAP产品的极高预期。让我觉得，这一切，不可思议。情绪归情绪，还是回来继续说产品。 介绍一下SAP的Success Factor。 SAP SuccessFactors （SAP HR云，SFSF）是市场上最早模块最全的云端人力资本管理套件，涵盖招聘（Recruiting）、入职（Onboarding)、员工中心（ Employee Central）、目标绩效（PMGM）、发展继任（Succession Management）、薪酬奖金(Compensation)、薪酬核算（Variable Pay）、学习(Learning Managemen)、报表（Reporting）、人力分析（Workforce Analytics）、人力规划（Career Development Planning and Mentoring）等。2001年, SuccessFactors成立于美国硅谷，2003年即斩获超过100家客户、覆盖30万用户。随后，SuccessFactors 一路高速成长，2007年成功在美国纳斯达克上市。2011年，在一阵传统企业软件大厂收购云端应用新厂的风潮中，SAP宣布以34亿美金收购SuccessFactors。自收购后，SAP将其视为亲儿子，大力推广，并将其融入SAP 企业解决方案大家族，使其成为了SAP主推的云HR解决方案。根据SAP官方的数据显示，200 多个国家&#x2F;地区和 60 多个行业的 6,700 多家客户及超过 1 亿位用户受益于SAP SuccessFactors 解决方案，而这个数字仍在不断增长 https://blog.csdn.net/qq_42288853/article/details/96108936Success Factor居然是一家这么牛逼的公司，我下巴都惊得要掉地上了。大概SF也有很多值得借鉴的地方，但是今天的分析，只站在我作为一个用户的角度，描述我的感受。 奇葩的交互效果 场景，当用户输入了上面一段文字，然后出现了下面这段红色的提示文字，是个用户的真实感受都是，诶？我哪里输入不对吗？字符个数没有在[1,500]这个范围吗？日期格式错了吗？用户，会把下面的提示，当作是错误操作提示，但是实际上，这个只是一个提示，并不是操作错误提示。（厉害吧，这个设计，我们还专门去问了HR，哪里填错了？orz，把膝盖献给SF 奇葩的目标和绩效Tab这一部分的截图，涉及太多公司信息，暂时不展开，等以后有时间，再来自己画原型展示。 再看看其他的OKR管理工具，经过筛选，选择 workday worktile tita 明道云 通过几个维度，来筛选出来，值得我研究的okr管理工具。先分别了解一下，上述几款产品， 登陆，操作。 关键词2:Hadoop监控Dashboard比较开心，Hadoop的监控Dashboard终于交付了。 背景 | 为什么做Hadoop监控Dashboard？要清楚明白的说明，为什么要做Hadoop监控Dsahboard，就需要知道，Hadoop到底解决了什么问题。 问题 | 遇到了哪些问题？解决 | 都是如何解决的？得失 | 在这个整个过程中，有哪些得失？重来 | 如果重来一次，是否可以做得更好？给Hadoop监控做Dashboard的复盘，在文章《给Hadoop做监控》中，按照上述逻辑，进行了完整的复盘。文章链接 关键词3:Gitlab背景 | 为什么要用Gitlab问题 | 都遇到了哪些问题解决 | 都是如何解决的得失 | 在这个过程中，有哪些得失重来 | 如果重来一次，是否可以做得更好。关于Gitlab使用的复盘，也在《Gitlab工作实战》中，做了复盘，文章链接 参考资料： 《这就是OKR：让谷歌、亚马逊实现爆炸式增长的工作方法》 推荐指数 4星，讲述了谷歌是如何采纳OKR，并付诸实践 《OKR：源于英特尔和谷歌的目标管理利器》 推荐指数 3星，这本书作为了解OKR的入门书籍，整本书，通过故事展开，对刚了解OKR的人比较友好，但是通过故事展开，有利也有弊，弊端就是“废话太多”，作者使用了大量的形容词，来描述书中主人翁的心理状态，读起来还是比较难受，同时，不推荐没有任何工作经验的人阅读，因为读不懂，或读不透。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Q2_Week5_工作总结","slug":"Q2-Week5-工作总结","date":"2020-06-05T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/06/05/Q2-Week5-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/06/05/Q2-Week5-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：以周为粒度，总结工作，从中提炼规律，沉淀属于自己的方法论。 本周关键词：风险管理。 风险管理风险定义对特定事件而言，风险包含两个要素： 该事件发生的概率 该事件发生所带来的后果（风险程度） （整体风险是其组成要素的函数） 从概念上说，每个事件的风险都是“可能性”以及“影响”的函数，即风险 &#x3D; f(可能性， 影响）当“可能性”以及“影响”两个自变量有任何一个增加时，风险也会增加。因此，风险管理中必须考虑到“可能性”以及“影响”因素。通常，风险也意味着对未来某个事件的无知。一般来说，未来可能出现好的结果被成为“机会”，而不好的结果则被称为“风险” 结合实际例子理解这段话的含义，项目进展中，开始和客户约定好15天之后给予模型预测结果，由于一些原因，可以reschedule，调到了30天后，因为本来15天是一个非常紧急的时间，这样的调整，无疑就算是“机会”，相反，如果客户将15天，缩短成了7天，那就是“风险”。 不过，最开始和客户约定的时间，是双方一起约定的。我们作为项目负责人既然同客户约定了这个时间，就意味着我们对这个时间已经做过评估，我们认为在这个时间内是可以按时保质保量地完成任务的。 风险的另一个重要组成部分是风险产生的原因。理想状况下，进行风险检查就可以知道引起风险的根本原因。然而，因为风险与未来的项目相关，因而引起风险的根本原因很难被发现，或者永远不会被发现。某种事物的匮乏通常会导致风险。我们将产生风险的因素称为“危险因素”（hazard）。人们了解“危险因素”并采取相应的行动办法，可以在相当大的程度上克服这种引起风险的因素。举例来说，路面上有一个树洞对于这条路毫无了解的驾驶员来讲可能会引起风险，但对于一个天天在这里行走的行人来说并非如此，他可能通过绕路或减速的办法来降低风险。这就引出了对于风险的另一个表达公式：风险 &#x3D; f（危险，保险）风险随“危险因素”的增加而增大，但是随“保险因素”的增加而降低。 如果我们能知道产生风险的原因，那么我们就可以提前避免风险，经验在这种情况下扮演着重要的作用。作为一个AI项目经验丰富的交付先锋，提前预判可能出现问题的地方，然后对这些点进行检查，可避免项目风险发生。 风险容忍度 项目经理应对风险时，必须依赖合理的判断和可用的工具。而关于应对风险的决策则取决于以项目经理本身对风险的容忍度、合同需求以及相关方的偏好。 风险管理的定义 所谓风险管理，是指处理风险的行为或实践活动，包括制定风险计划、识别风险、分析风险、制定风险应对计划以及风险监控。合理的风险管理是主动的而非被动的，是积极的而非消极的，它的目的是提高项目成功的概率。举例来讲，某一项网络工程需要发展一种新技术，该工程所要求的进度为6个月，但项目设计者却认为9个月的时间才是接近实际情况。如果项目经理是主动反应类型的，它会马上拟定一份处理风险计划。如果项目经理是被动反应型（如“问题解决型”），他可能无动于衷，直至有事发生。那时，项目经理再做出反应，但是可能已经因此丢掉了大量宝贵的时间。 这样看来，我是主动反应类型项目经理。在做项目时候，我经常会意识到我自己对风险的强烈的感知，但是别人可能会觉得，为什么这里会这样？有时候，我会觉得，是不是自己总是想太多，别人会劝我说，等事情发生了，咱们再想办法，现在看来，是大家应对风险的策略不同，主动 VS.被动。“凡事预则立，不预则废。”这是老祖宗留给我们的教训，凡事一定要事先有准备，不打没有准备的仗。 确定性、风险以及不确定性 决策过程可归结为3个范畴：确定性、风险及不确定性。 确定状态下的决策 所谓确定状态下的决策，意味着我们能百分之百地了解事件的状态以及每种状态的结果。从数学上来看，这可以通过支付矩阵来表达。基于确定状态下进行决策所建立的决策模型具有两个主要特征 无论事物以何种状态出现，我们都能获得一种主要的，具有支配作用的策略 事物的各种状态之间没有发生概率的分布机制 风险状态下的决策在非确定状态下进行决策风险与不确定性之间的区别在于，风险状态中，各种形态的发生有一定概率；而在不确定状态中，各种形态的发生概率无法得知。 风险管理过程 风险管理应在项目期初制定并贯穿于项目的整个生命周期。风险管理过程包括以下几个互相关联的部分：规划、识别、分析、处理、监控。 风险规划。在该阶段，管理者应制定并记录一些易掌握、条理性强、具有互动性的战略和方法。这些战略和方法主要用来识别并追踪风险，制定风险应对计划，并监控风险如何变更的。 识别风险。风险的识别过程实际上是对各个领域以及关键技术的检查，以便识别并记录相关的风险。 进行风险分析。风险的分析过程是对每一项已识别出的风险事件进行检查，以估计风险发生的概率和对项目的影响程度，包括定性风险分析和定量风险分析。 风险应对计划。这是一个识别、评估、选择、执行各种处理方法以将风险控制在项目本身的约束和目标范围之内的过程，包括该做什么、什么时间完成，谁负责以及相关的成本和进度。 监控风险。 诶，我得到了启发，既然我也知道在AI项目的管理中，有这么多坑，我心里知道，因为我有经验，我为何不以AI项目中的风险为主题，将这些经验教训都沉淀下来。（说干就干，等我将周总结补充完整，我就来写） 在AI项目的管理里面，除了上面这些我从研读《项目管理：计划、进度和控制的系统方法》中摘录下来的这些关于风险管理的“套路”之外，还对业务现状的分析，有较高要求。 还是用真实案例来辅佐上述空洞的描述。 CSS项目在POC阶段，客户提出了要用串行流量进行POC。解释串行流量在这里的含义。 用户群A，合计2万5千人，客户在5月初的时候，对这部分客户进行了营销。截止5月30号，将用户群A中没有产生购买行为的客户筛选出来，进行个性化推荐营销。最终，客户会将5月初的结果和5月30日的营销结果进行对比。 这是对串行流量的解释。为了加深上面说的“对业务现状分析，有较高要求”，我决定，继续讲解这个case。 首先，在这场营销活动中，需要选择被营销的客户群，客户选择了群体A，群体A我们可以将其理解为last member，就是不那么活跃的用户，量化“不那么活跃用户”定义： 只购买一次的会员且6个月内未购物 一年以上没有消费的客人 作为项目经理，首先，我对为什么要这样选择客户群提出了质疑。 在我们训练模型时候，用的是正负样本1:10的比例，构造的模型，但是到实际应用场所，相差巨大，这样肯定是不合适的。 客户的反馈是 他们使用个性化推荐的初衷就是为了卖得更多，而对于那部分，已经很活跃的用户，其实是没有推荐必要的。 接着，我们提出要改为并行流量，严格控制实验组和对照组，客户的反馈是（说明一下，在这个项目里面，我们是丙方，客户是乙方，业务方是甲方，我们是没有直接和甲方对话的） 首先，甲方无法理解并行和串行；其次，我们认为，这个影响不会那么大。并且，所有的POC方式都是有风险的，我们认为可以take 这个risk。 还有一些其他的沟通，暂且不展开 这就是典型的一个，在我们控制之外的风险，客户对风险的评估为0，但是我方对风险的评估为5（0 - 10打分机制）。且客户方非常强势。在这种情况下，我提出了一个折中的解决方案，那就是我们可以额外选择一个地方，进行严格实验组和对照组。 这个案例暂且讲到这里，还有一些细节，就不一一展开，复盘这个case，主要是为了说明，在项目管理里面，除了通用的项目管理手段，还需要对业务有清晰的了解掌控，","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"在线广告之DSP","slug":"在线广告之DSP","date":"2020-05-30T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/30/在线广告之DSP/","link":"","permalink":"https://kerryli1007.github.io/2020/05/30/%E5%9C%A8%E7%BA%BF%E5%B9%BF%E5%91%8A%E4%B9%8BDSP/","excerpt":"","text":"最近工作，开始做广告系统，做了一些这个方面的研究，整理出来。 目标读者：广告系统产品经理、广告系统运营人员 一、在线广告概览一笔在线广告，有两个主体：需求方和供给方。前者可以是广告主、代表广告主利益的代理商或其他技术形态的采买方；后者可以是媒体，也可以是其他技术形态的变现平台。广告中还有一个被动的参与方，即受众。出资人、媒体和受众这三者的利益博弈关系是广告活动的主线 一笔在线广告的流程如下，（首先，广告主已经决定了要在什么媒体平台上投放广告，以微博为例，在微博这样的大流量平台上进行广告投放 流量产生：微博资深用户西蓝花同学，早上醒来，拿起手机，点击微博图标，进入微博，微博信息流首页，会有广告位产生，这个时候，微博会发起询问，发送的信息大概如下 12345userid:00000001gender:femaleinterest:exercisetime:2020-05-30....... 微博发给广告平台的信息，大致如上。主要包含了用户的一些基础属性。平台收到这些信息，系统会自动判断，微博上报的这位用户，是否是自己产品的目标用户。平台1目前主要在投放游戏，平台2目前在投放家电，比如戴森吹风机，平台3在投放运动装备，比如lululemon。上述3个平台，基于我的信息和他们所投放的产品，做了一个关联性分析，判断出我有多大几率购买&#x2F;下载他们投放的产品，基于这些几率，他们会为获得展示在我手机信息流中的广告位竞价，比如平台1出价5块，平台2出价3块，平台3出价7块。毫无疑问，这个广告位归平台3了。（需要注意的是，这些竞价都是实时完成的，因此也叫Real-Time Bidding）接着，用户的首页便会出现lululemon的广告。 这就是一个完整的竞价广告流程。上述广告平台的操作，判断微博上报用户与自己在投产品的匹配度，推测广告投放后的成功几率，并给出竞价，做这件事的平台，叫做DSP(Demand Side Platform)，这是一门专门为广告主提供精准投放的平台。也是我们今天文章的主题。 二、走近DSPDSP，全称Demand Side Platform，中文叫需求方平台。在上面关于在线广告主体的介绍时候，我们说过一个在线广告，有两个重要的组成部分，一个是需求方，即需求方平台，一个是供给方，供给方在这里又被叫做Publisher，而Publisher的供给也是基于一个平台，这个平台叫做SSPs（Supply Side Platform）。 我们目前学习了两个重要概念，DSP和SSP。我们回顾一下，他们分别是什么，以及其作用。 在线广告，本质是交易，交易就势必有需求方，也有供给方。供给方可以是上文说的微博媒体，这样的平台又被叫做Publisher，他们是有一个SSP，即需求管理平台，来对微博上可以被展示的广告位进行管理。微博的广告管理平台，叫做WAX(Weibo AdeXchange) ，是新浪微博提供给各类广告主的程序化广告交易平台。 供给方了解之后，再来看看需求方，上文我们讲的是DSP，可能有的读者会有疑问，DSP的作用，说白了，就是精准投放，为什么这件事需求主，不自己做呢？这是一个非常好的问题。 做这样一件事，是需要投入较大的资源，有些时候，需求主只有一款产品要做推广，为了这一款产品，单独打造一个平台，这事也忒不划算了，还不如外包给专业的人做，这个时候，DSP就产生了。 到这里，我们基本上梳理清楚了三件事 一个在线广告的最小运转流程，上下游 DSP是什么，为什么会产生 SSP是什么，为什么会产生 也就对DSP有了大致了解，接下来，我们会围绕DSP深入讲解DSP如何提高投放的效率。 三、总结“如何学习一个商业新概念？“ zoom out 了解这个新概念被牵涉进的商业流转，上下游分别是什么 zoom in 看这个新概念在整个流程中，扮演什么角色，产生什么价值 哇🤩，和客户开了一次会，然后花费了1个早上的研究成果，我还是比较满意，认知总体上来说还是比较浅显，不过我很享受，从一开始，脑子里一团乱麻，到自己不断发现蛛丝马迹，最后将整个逻辑梳理清楚整个过程。 思考以及学习这个过程本身的乐趣，是无法被替代，也无法被剥夺。 明天就六月一日了，提早也祝自己儿童节快乐，希望自己永远保持对世界的好奇。 享受思考、享受学习、最后，享受成长。推荐阅读： https://clearcode.cc/blog/demand-side-platform/ 入门级别讲解，用case形式讲解了dsp的运转流程 计算广告 在线广告：互联网广告系统的架构以及算法","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"幕后产品（3）|需求分析方法论","slug":"幕后产品（3）需求分析方法论","date":"2020-05-30T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/30/幕后产品（3）需求分析方法论/","link":"","permalink":"https://kerryli1007.github.io/2020/05/30/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%883%EF%BC%89%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E8%AE%BA/","excerpt":"","text":"幕后产品（三）需求分析方法论 写在前面，今天看到一篇《幕后产品》整本书的读后感，脑子一热，也想，趁着下午几个小时，将剩下的几章节都阅读了，然后整理一下，发在公众号，心理记挂着这个目标，阅读时候，也浮光掠影，读了几篇，感觉脑子里一片空白，一无所获，赶紧停下来。 如果读一本书，读一篇文章，一无所获，那么就没有阅读的必要，这就是浪费时间，还不如将这个时间用在其他地方，比如看电影，逛街。 调整目标和状态后，重新开始阅读，将今天的阅读心得整理如下。最后，再强调一句，做任何事，都不要舍本逐末，不要为了发公众号而匆匆阅读，要为了思考而阅读，思考本身是一件有趣的事，通过阅读别人的文章，与别人对话，交流心得体验，发公众号也好，发布在hexo也好，都是思考的结果。 开始今天的阅读吧～Enjoy 今天阅读的是《幕后产品》第三章。本章开篇，便解答了最近几个月困扰我的问题，那便是需求太多怎么办，当然这些需求里面，包含老板提的需求。因开篇实在是经典，故将其摘录如下，希望任何读到这段文字的产品经理，都能有所感悟，收获一二。 产品经理面对的需求千千万万，应该做哪一个呢？ 这恐怕是实际工作中最恼人的问题之一，原因大致有两个：提出需求的门槛非常低，每个用户一口唾沫星子就能淹死产品经理；需求分析并不像写代码那样有很强的逻辑性，其中存在相当感性的部分，每个人对需求都有自己的理解，因此搞定团队中的所有人是很难的。 多数产品经理在工作中会遇到进退两难的境地，感觉像是夹心面包，而不是在主导产品。这背后的原因是，搞不定老板、上司提出的需求，说服不了团队做自己想做的需求。这样的情景在每家公司、每天的办公室反复上演，但这不是其他人的责任，反而是产品经理自身的问题。原因如上所述，需求的本质就是这样的——人人都可以参与讨论，人人都觉得自己理解需求。 绝大部分能成长起来的产品经理都顺利通过了进退两难的这一关。这是一个狭窄的关卡，通过之后的产品经理能形成自己的需求分析方法论，也知道如何赢得上司以及团队的信任，从而更好滴展现执行力。而没有通过的是大多数，在方法论和沟通上或多或少存在问题。 读完这段话，一拍大腿，诗沐老师娓娓道来的讲解实在是让人醍醐灌顶。作为大神级别的产品经理，诗沐老师洞察多数产品经理的真实遭遇，进退两难，所有人都来提需求，每个人都认为自己的需求是最重要的。这件事确实是会让产品经理崩溃。我在工作中，也经历不少。不过，诗沐老师的分享并未止步于此，他也严肃地指出，这实际上是产品经理成长生涯重要的一个关卡，过得了这一关的产品经理，能成长起来，他们沉淀出了自己的方法论，懂得如何赢得上司以及团队的信任，这样的人，在我看来，也才更有可能成为领导人；而没有通过这一关卡的产品经理，即没有感觉到是自己在主导产品，也只有在整日的抱怨中丧失了思考。 关于需求分析方法论，作者主要分享了3个模块 收集需求 评估 进阶 关于需求分析方法论，建议结合苏杰老师《人人都是产品经理》，以及李立《腾讯产品法》中关于需求分析的模块，一同学习思考，观察不同产品经理对待需求的视角。 尽可能多地收集需求需求背后的动机评估实现需求的影响角色、场景、流程符合产品目标","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"Q2_Week4_工作总结","slug":"Q2-Week4-工作总结","date":"2020-05-29T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/29/Q2-Week4-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/05/29/Q2-Week4-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：从工作中，总结方法论，沉淀知识。如果有与我面临同样迷思的人看到本篇总结，也可以从中收获一二。 本周关键词：SQL、数据分析思维、简书、实验设计&#x2F;AB Test、广告推荐系统 SQLSQL关键词下，关于本周，我主要想记录的是关于一门新编程语言的学习。如何快速地学习一门新的编程语言？我并非计算机科班背景，专业是心理学，因此，短时间内上手一门新的编程语言对我而言是有一定难度的。但是工作有需求，该使用何种科学的方法，快速上手一门新的编程语言呢？ 系统学习 + 大量应用 + 及时总结 + 定期复习 &#x3D; 快速上手一门新的编程语言方法论 系统学习什么是系统学习？就是去完整的了解这门语言的背景，以及其相关的语法。在学习SQL时候，有两份资料推荐： 视频资源 https://www.youtube.com/watch?v=7S_tz1z_5bA SQL必知必会 视频资源帮我建立了对SQL常用语法的结构，让我在实际工作中，当需要阅读别人的代码，也能轻松理解。SQL必知必会在我遇到SQL语法难题时，作为参考工具，给予了极大的帮助。 在这两份资料的加持下，短时间学习并应用SQL也变得不那么困难。 大量应用古人云：纸上得来终觉浅，绝知此事要躬行。 但凡知识，都需要在实践中检验。编程尤为甚，今天学的一条语法，如果不使用，可能明天就忘了，或者，学习的时候，认为自己掌握了，但是实际使用的时候，不是这里少个括号，就是那里多了字符串标记。 如何应用呢？ 真实case (业务数据，业务数据有真实的场景） Leetcode (https://leetcode-cn.com/) 举一个Leetcode的例子题目 1234567891011121314151617181920212223表1: Person+-------------+---------+| 列名 | 类型 |+-------------+---------+| PersonId | int || FirstName | varchar || LastName | varchar |+-------------+---------+PersonId 是上表主键表2: Address+-------------+---------+| 列名 | 类型 |+-------------+---------+| AddressId | int || PersonId | int || City | varchar || State | varchar |+-------------+---------+AddressId 是上表主键 编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：FirstName, LastName, City, State 分析一下题目，一共有两个表，Person和Address表。需要获取的字段FirstName, LastName, City, State来自以上两个表，因此我们需要从两个表中，将这些字段取出来。既然是需要将两个表中的字段取出来，放在一起，那么就势必是需要拼接成一个表，如果要拼接起来，需要设置一个拼接字段。梳理逻辑完毕，写成代码 123SELECT Person.FirstName, Person.LastName, Address.City, Address.state FROM Person, AddressWHERE Person.PersonId = Address.PersonId 提交之后发现写错了，查看解法 123select FirstName, LastName, City, Statefrom Person left join Addresson Person.PersonId = Address.PersonId 分析对比，发现和我代码的区别如下：使用的是left join，而我使用的是where 回到题目说明，有一句话表达如下 无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：FirstName, LastName, City, State 理解一下，是说有的person是无address id，也就是，表2，以address id作为主键的表，会缺失一些PersonId，换句话说，表1中的Personid 的集合和表2中personid的集合表示关系如下 先解释一下为什么用join不用where，再解释为什么使用的是outer join而不是join。 使用where的话，也只会返回同时在表1和表2都出现了的personid，但是表2中的personid是缺失的。 如果使用的是inner join，那么就只会有表2中的person id集合了，但是题目要求是无论有地址信息，都要有FirstName、LastName、City、State。所以，应该是表一为准，所以是left join，会将表2中的行放进表1，做补充。 上面就是一个学习SQL过程中，不断发现自己知识盲区，不断补足，不断进步的过程啦。 数据分析思维所有的决策都要有数据的支撑。这是在数据分析思维这个模块，我的总结。 一直在跟的推荐项目，客户突然变更了需求，希望使用我们的模型，对TW进行营销推广。 在AI行业“混饭吃”的搬砖民工都知道，训练的数据集样本分布，需要尽量模拟真实的生产环境。这样才能最大程度保证，模型在生产环境的表现佳。客户需求的变更，可能带来的影响就是我们的模型在这个场景下，效果可能会相比之前实验对比变差。 但是客户的态度很坚定，那么到底能不能这么做？这么做了，到底会不会好，就需要我们给出判断。 凡需判断，必须基于数据。凡需判断，必须基于数据。凡需判断，必须基于数据。 大的思想是对了，但是落在具体执行层面，需要验证哪些指标，以及每个指标的验证需要哪些步骤？是否要做的所有事，以及前后顺序，都已经在心里勾勒出了清晰的框架，如果没有，那么就需要先把思维梳理清楚。 这是在数据分析思维模块，除了“凡需判断，必须基于数据”，我想强调的第二点，数据分析的步骤。 数据分析本身是一件很抽象的事，因此在做的过程中，很容易就陷入细节，看不清全局。具体来说，就是会陷入，诶？现在写的这些SQL，做的这些数据分析是为了验证哪个假设来着？ 为了避免上述目标的出现，建议在执行数据分析时候，首先将自己要验证的假设分点陈列，比如，我期望验证的假设有以下3条 模型在周期内，对TW用户的预测效果 30天为营销周期 90天为营销周期 TW最近2年的每个月交易数量，以及交易数据占总人数比 其实，我现在回顾一下，今天就验证了这2个大的问题，但是在做的过程中，却花费了大量的时间，如果再来一次，遵循目标优先，然后依次拆解目标，制定可执行步骤的方式来做，时间会被大量节省。 简书简书算是本周发现的一个惊喜。 这样描述也不太准确，自己很早就接触简书了，不过一直没有用起来，最近开始系统学SQL、Python，心里打算着还是需要将这些笔记都记录下来，于是选择了简书。 为啥没有选择CSDN呢？其实我以前用过CSDN，CSDN的Markdown太乱了，以及整个网站给人的感觉都很糟糕。 说回来，简书带给我的惊喜点有什么呢？ 非常简单的Markdown语法 简洁的编辑页面 简洁的阅读界面 展示一下简书的编辑页面 真的是非常简单，也体现出背后产品设计者的克制。 我是写作工具爱好者，我常用的写作工具 Bear Notion Typora MWeb Ulysess 这几款工具都是优秀的书写工具。像简书这样克制的设计，比如，连书写背景的颜色都不支持修改，真的是非常罕见。这么克制，也还奇了怪了，却让我喜欢上了，嘿嘿。我也不是只爱简单的，我也爱Bear，12个主题，任意切换。（关于写作工具，以后再展开 还有最后两个主题，实验设计&#x2F;AB Test，广告推荐系统，都是比较大的话题，就不在周总结中展开了，单独另开文章总结。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"幕后产品（2）全面深入地了解用户","slug":"幕后产品（2）全面深入地了解用户","date":"2020-05-29T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/29/幕后产品（2）全面深入地了解用户/","link":"","permalink":"https://kerryli1007.github.io/2020/05/29/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%882%EF%BC%89%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%9C%B0%E4%BA%86%E8%A7%A3%E7%94%A8%E6%88%B7/","excerpt":"","text":"最近负责的推荐项目，要做生产环境的POC。一方面有些紧张，因为项目后期，基本上前端后端都是我，担心自己表现不好；一方面又比较兴奋，从昨晚的结果来看，模型的表现比客户当前的解决策略效果更佳。 总体上，本周工作节奏紧张，都在调模型，对比效果。晚上，抽睡前半个小时看书，最近在看《幕后产品》。每读一章节，都会给我相当大的触动，阅读诗沐老师的文字时，感受到他的谦逊，用轻描淡写的笔触展现过去的辉煌成就，在这些文字里，更能感受到诗沐老师作为一位优秀的产品经理，一些值得我学习借鉴的地方，因此，每每读及，感受到自己与其思维方式的差异，都羞愧万分，遂将其悉数记录，一方面警示自己，一方面也做记录之用。 做了多年产品经理，我每天仍在做的一件事是什么？ 那就是日复一日、年复一年地了解用户。 读到这里，不由脸颊发烫。作为一名AI 产品经理，我足够了解我的客户吗？他们是谁？他们在哪里？他们的痛点到底是什么？当整个人陷入项目的细节之中，就容易看不清大的趋势，因此，不断地反思、复盘、总结，就显得尤为重要。 不过，在我写出上一段话之前，内心另一个声音告诉我。你做的是To B，和To C不一样，To C用户体量大，To B都是客户，客户体量小。这个思考的逻辑是说，客户体量小，就不用了解了吗？其实这个逻辑不过是为自己不足够了解，而找的借口。 所以，我真的了解客户是谁吗？ 在AI行业，我也是混迹了2年。站在今天这个时间节点，回顾这两年，我做的所有工作，都是围绕两件事在做 AI 算法竞赛 AI 技术服务提供 两件事针对不同的客户，其需求自然千差万别。着重看一下，AI技术服务提供（要回答这个问题，说实话，是需要数据支撑的）数据涉及到公司业务层面隐私，就不写出来。一个大概的画像： 中小企业，希望短时间、低成本，搭建起一个生产环境可用的算法系统 这个时代变化速度飞快，不断有新的文化、新的群体出现，如果我们不学习、不接触它们，仅仅一两年就有可能落伍。我在校园招聘时与应届毕业生进行交流，常感觉自己与它们之间存在代沟。他们中间流行什么？他们怎么理解互联网？这些疑问萦绕心头，迫使我想要深入理解他们的想法。虽然很残酷，但这个行业永远都是年轻人的世界，而且优秀创业者的年龄越来越小，所以作为产品经理除了每天持续地了解用户，别无他法。 读到这里的感受，只有两字：深刻。 背后的感慨原因，千千万万，以后再分析了。 在研究电子音乐粉丝之前，我和很多人一样，把电子音乐与DJ、“土嗨”联系在一起，本能地对迪厅里播放的旋律和歌词一般的音乐无感。这是人的天性，对不了解的事情有自我防御机制。 心理防御机制（Defence mechanism） Defense mechanisms are psychological strategies that are unconsciously used to protect a person from anxiety arising from unacceptable thoughts or feelings. 心理防御机制是一种会被无意识使用的心理策略，人类使用这种策略来使自己远离不可以接受的思想和感受带来的焦虑。 下图是一些常见的防御机制 否认是防御机制的一种。其实这种否认，我也常用。 我diss一些产品设计无聊，但是我都没有认真去了解这些产品到底为什么会被设计出来。 我否认自己做技术产品没有天赋，但是我压根都没有真地全力以赴地去学习，如何独立地写一段完整的代码。 否认是一件非常简单的是，但是真实面对自己，不对自己说谎，更难，但是能产生不一样的结果。 比如，我现在也开始撇弃对社交产品的偏见，从之前单一地将其归为约炮软件，或者寂寞人来使用的软件，到认识到，约炮也好，寂寞想找人倾诉，这都是人的需求，正视用户的需求，是成为优秀产品经理的第一步。选择看见而不是视而不见。同时，我开始认真严肃地对待Python、SQL，自己也能独立写代码，完成项目交付。 最后说一下预见趋势。 2014年，虽然当时在各个音乐排行榜上，前十里看不见电子音乐，但我们仍根据研究结果判断电子音乐是未来发展的趋势。我们不遗余力地鼓励电子音乐达人们做歌单、做电台，并在网易云音乐商业上帮助他们推广，与国内的电子音乐推广团队合作，并将电子音乐派在仅次于流行、摇滚、民谣音乐的位置。 诗沐老师能够在2014年时候，就预见电子音乐是未来发展的趋势。其洞察力，不由让人大呼惊叹。仔细思考，对于诗沐老师来说，这也应该是水到渠成的事，因为他长时间对用户的研究，分析。 只有深入理解了用户，才能做出准确而迅速的判断。 阅读完这个，我也给我自己布置一个任务吧。 本周和下周，完成市场上AutoML的使用，产出分析报告 找10个AutoML的深度用户，做interview","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"幕后产品（1）第一章","slug":"幕后产品（1）第一章","date":"2020-05-26T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/26/幕后产品（1）第一章/","link":"","permalink":"https://kerryli1007.github.io/2020/05/26/%E5%B9%95%E5%90%8E%E4%BA%A7%E5%93%81%EF%BC%881%EF%BC%89%E7%AC%AC%E4%B8%80%E7%AB%A0/","excerpt":"","text":"昨晚看了几章买的新书《幕后产品》。作者王诗沐，是网红音乐播放器“网易云音乐”的负责人，在书里，他如数家珍地为读者讲述了他是如何洞察需求，打造产品。 网易云音乐陪伴了我整个大学以及毕业后的两年。在去年，我彻底舍弃了这款产品，因为想听的音乐都无版权。不过音乐版权少，不影响网易云音乐是一款好的产品，相反，在版权缺乏的紧箍咒下，还能做出这样的产品，其背后站着的设计者，即王诗沐，不可谓不是天才。 回到《幕后产品》这本书里，在第一章，一些阅读得来的感受，对我触动非常大。 关键词：虚荣心、归纳、杀伐果断 人的虚荣心 早年我在网易摄影时观察到用户为了作品上首页争吵，从知乎上看到用户花数天心血认真作答而成就满满，又体会到自己在朋友圈晒照片获得点赞的心理感受，这些都让我不断加深了自己对用户虚荣心的理解，形成了自己对运用虚荣心尺度的判断标准。 俗话说“外行看热闹，内行看门道”。作者能从不同处观察到的现象，进行归纳总结，这自身就是一件不容易的事；同时，作者能清晰地认识到人性的弱点（抱歉，我将虚荣心归纳为了人性的弱点，其实虚荣心也有可能是优点，这个可以参考《社会心理学》一书，其中有讲到）。 人渴望获得认可，人与人之间相互攀比，这些都是人性。我有时候会回避人性。去年6月份，为了完成三节课的数据分析作业，下载了探探进行使用、分析，上传了几张我的健身照片，短短数天，我主页上的【喜欢】人数就超过了1w。当时，在社群里，我们还有激烈地讨论过这事，群里的其他朋友都在抱怨说自己的【喜欢】人数少，同时，右滑的对象从来不会喜欢自己。我当时，听着，表面波澜不惊，其实内心是暗喜。甚至，在那之后的一周，我都有刻意关注我主页上被喜欢的人数。 用户对探探上【喜欢】数的认可远超过了我的想象。今年年初，我好友X截图给我看了她的探探，其中有一页，就是喜欢人数，看到她的喜欢人数，我甚至也还对比了一下我的，且，仍旧暗喜，我的喜欢人数比她多。虚荣、对比，这都是人性。这让我想起最近在看的另一本书《Facebook效应》，扎克伯克写了一个程序，叫做“Facemash”，这个程序旨在标记出校园内最炙手可热的人物。扎克伯克邀请用户比较两位同性同学的相片，指出谁的人气更高。假如一位同学的评分等级更高些，那么此人的相片就会用来与其他更受欢迎的学生相比较。Facemash这个项目，在哈佛异常火爆，不过最终因为涉及到一些隐私上的问题，被强制制止。 总结：虚荣、攀比，这些心理，都是人性。正视人性，是做产品的第一步 归纳 归纳与演绎是逻辑思维的两种方法。学习其他产品，将感悟归纳起来，体会其中想通的地方，从接触个体事物到推及一般，形成自己的理解，认识。 另一位产品大神纯银也分享过归纳能力的重要性。大神都推崇的能力，看来确实是值得刻意练习。 产品经理的杀伐决断 作者从导入博客文章、导入相册、导入邮件等功能中找到灵感，认为网易云音乐可以做一个导入歌单功能，让用户一键可以将自己原来产品中收藏的歌曲迁移到网易云音乐。后来，产品设计、技术研究等都已完成，但是作者仍有一个顾虑，这封办法虽然对用户和网易云音乐都很好，但是会得罪竞争对手，如此激烈的手段会不会影响网易云音乐的品牌形象？ 犹豫了一段时间后，作者终于在一个周六的早上下定了决心。 说实话，看到这里的时候，我在思考，如果我是作者，我会这样做吗？这样的做法，无疑是会招致竞争对手的憎恨。但是，做了，对用户及自身产品，百利而无一害。 在互联网历史上，有一位招千人恨，万人骂的产品经理，他叫周鸿祎。梁宁老师在产品经理思维36讲分享过周鸿祎的故事。周鸿祎在推出免费杀毒软件时候，招到了诸多传统杀毒软件厂家的咒骂，但是，免费杀毒，对用户好，因此周鸿祎还是坚持了下来。 产品经理做判断时候的唯一标准：是否对用户好？如果不是，那就算了，如果是，那么尽管会得罪竞争对手，也应该推行。 我想起字节一位产品经理的分享，产品经理的面子就是产品的表现，产品表现不好，就没面子。引用这句话，是想说明，产品好坏，是否对用户有好处，是产品经理思考产品改动的最底层的原则。 最后：多阅读、多思考、多总结。","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"产品设计体会（2）数据库快照","slug":"20200524-产品设计体会（2）数据库快照","date":"2020-05-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/05/23/20200524-产品设计体会（2）数据库快照/","link":"","permalink":"https://kerryli1007.github.io/2020/05/23/20200524-%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E4%BD%93%E4%BC%9A%EF%BC%882%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%AB%E7%85%A7/","excerpt":"","text":"思考一个场景基本上我们每个人都会在淘宝购物。添加购物车，支付，签收订单。一笔交易完成。过了一段时间，你再次看到了你购买的商品，这次该款商品正在大促销，它的标价是99，你记得你购买的价格是199。但是，现在，商家的标价确实是99。 你去翻你的淘宝交易记录，请问这个时候，你的交易价格是多少？199对吧。因为这是你购买这款商品时候的实付价格。 为什么商品的价格已经被调节成了99，但是你的交易记录中的数据没有随之变化呢？这是因为数据库快照。 数据库快照数据库快照，就是在某一个时间点，对数据库拍了一张快照。这张快照有2个特点： 静态的 只读的 快照生成之后，如果数据库中任何数据页都没有被修改，那么快照的mdf文件是空的，不占用任何磁盘空间，这个时候，快照数据库还是从源数据库中取，快照生成之后，数据库中发生了变动，这个时候快照的mdf文件中就有了数据，但是这里面只放刚刚被修改之前的数据。 其他应用场景真实工作场景中case To B的业务中，开通对客户的产品试用。每一条试用信息，在后台生成一条记录。每一条记录的字段有： 客户ID 申请试用时间 试用截止时间 联系电话 等 开始时候，这些试用信息的返回是随机的，就导致一个问题，商务同事无法通过后台来找到最新的试用客户，进行后续跟进。因此，我们在后端数据库接口的返回逻辑进行了处理，按照“申请试用时间”进行逆序排序。 似乎解决了问题，但是在后续实际业务中发现，因为会对客户的试用时间&#x2F;周期进行微调，因此，试用时间会变化。那么是不是，其实也应该有一个快照的概念呢？ 有了快照，那么客户申请试用的时间，是不变的。这样排序出来的客户表，还是最新申请的客户在最上面。 多思考，多总结。 参考资料 数据库快照 database snapshot_数据库_cuiyan1982的专栏-CSDN博客","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"2020年Q1复盘","slug":"2020年Q1复盘","date":"2020-05-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/05/23/2020年Q1复盘/","link":"","permalink":"https://kerryli1007.github.io/2020/05/23/2020%E5%B9%B4Q1%E5%A4%8D%E7%9B%98/","excerpt":"","text":"写在前面，这个复盘来的有点晚了，Q2都过去3周了嘿嘿，其实早就写好，不过没有整理，今天整理Bear笔记，于是乎，也就顺便将这篇文章整理出来啦 最近看项目管理类的书籍，学习到由美国质量管理专家威廉.戴明博士提出的“戴明环”模型，这个模型是用来对企业当前状态进行测量和评价，其目的主要是进行“差距分析”，以了解企业实际情况与愿景之间的差距。 “差距分析”是一个非常有效的工具，通过分析差距产生的原因，来提出消除或减少差距的方法。 如果以3年后为目标，我的目标是什么？我当前的情况如何，如何通过差距分析来消除或减少差距。 要回答这个问题，首先，需要对当前的情况进行复盘。因此，本文分为三部分，部分一是对现状的分析，部分二是目标，部分三是为了消除或减少差距，所需要执行的基本单元。 第一部分 现状复盘复盘的目的，是总结有哪些经验教训，被纳入了自己的知识结构，同时，仔细反思，这些被融入了自己认知体系的知识，是如何在实际工作中被使用，并且创造价值。 2020年过去了1&#x2F;3，由于部门变动，我的工作职责也有了相对应的变动。在2020年过去的这段时间，我的工作角色主要由两大块组成：项目经理，产品经理。因此，我的反思，也从这2部分展开。 1.1 项目管理通过几个问题，来了解项目的一些基础概念。 问题1：什么是项目？ 项目的独特之处在于其交付成果具体而明确，而且有一定的时效性和资源限制，项目管理即使对项目的启动、规划、执行、监控以及项目结题全过程进行管理和控制，以实现项目的目标，因而项目管理具有明确的目标导向性。《项目管理就这么简单》从上面的描述，我们可以知道，项目具有以下特征： 1. 交付成功具体而明确，说明项目具有一个特定计划内要完成的具体目标 2. 时效性，说明项目有确定的起始日和终止日，这也就决定了一个项目，是有其生命周期的 3. 资源限制，说明项目是有经费限制 了解了一些基础概念之后，回到工作中。 项目管理是一件复杂的事。图灵奖得主布鲁克斯在《人月神话》中对大型系统开发是这样描述的。 史前史中，没有别的场景比巨兽在焦油坑中垂死挣扎的场面更令人震撼。上帝见证着恐龙、猛犸象、剑齿虎在焦油中挣扎。他们挣扎得越是猛烈，焦油纠缠得越紧，没有任何猛兽足够强壮或具有足够的技巧，能够挣脱束缚，它们最后都沉到了坑底。 过去几十年的大型系统开发就犹如这样一个焦油坑，很多大型和强壮的动物在其中剧烈地挣扎。 如果说大型系统开发项目已经如何可怕。AI项目，由于数据质量差异、以及算法模型表现的不确定性，更是加剧了项目管理的困难程度。 这就为项目管理带来了困难，因此，如何借助科学的方法，有效地管理项目，是今天复盘的重点。这里说的科学的方法，是说尊重项目的生命周期，同时借助相关的工具。 如何理解项目的生命周期呢？项目的生命周期是项目从开始到结束所经历的一系列技术工作阶段。 项目的生命周期具有如下特点： 不同类型的项目具有不同阶段的划分 每个阶段都可以看做一个单独的项目或子项目 通常，一个阶段结束后，才开始另一个阶段，也就是说阶段与阶段之间，有先后关系。但是有的阶段与阶段之间，也是可以并行。 上面的概念，比较抽象，我们将其具体化，让其更丰满。我们尝试着来回答如下一些问题：一个项目的完整流程是怎么样的？分为几个阶段？每个阶段需要哪些人，做哪些工作？不同的阶段里，谁为项目的执行效果、财务指标负责？ 因为我做的项目，数据科学类项目偏多。我们来了解，一个数据科学项目的完整流程，一般一个项目，有以下阶段组成：需求挖掘，售前阶段，POC，项目执行，交付。 竖着看，To B的项目，有5个阶段，售前，POC，商务，交付，回款。横着看，一个项目中，涉及到不同的角色，这些角色至少应该包含6类角色。 我们分别对各个阶段，需要哪些人，做哪些工作，不同的阶段，谁为项目的执行效果负责进行一下详细阐述。 售前阶段目标： 1. 挖掘客户的需求场景 2. 介绍公司解决方案&#x2F; 产品，让客户相信，我们销售的产品&#x2F;解决方案，是可以解决他们的业务难题的 挖掘客户的需求场景，就AI项目来说，普遍围绕两个角度展开，即降本、增效。降本是什么意思？就是为企业降低运营成本。在详细点说，就是去问，去和客户聊他们的业务场景，客户的业务中，目前有哪一部分对人力成本的需求量大。并且这些工作具有重复性，机械性的特点。 在沟通降低成本这里，其实也是有技巧的？可以从技术出发，讲解技术。比如介绍，我们有什么样的技术。但是我不推荐这种做法，我更推荐去和客户聊客户的业务。因为，从技术出发，讲技术，有点拿着锤子找钉子，而同客户聊业务场景，才能对客户的业务痛点更加洞悉。 那如何聊客户的业务场景呢？有一个技巧，从客户的业务链条开始，他的上游是什么？下游是什么？整个业务链条是如何运作的。比如说，一个餐饮食堂，他的上游是从蔬菜、粮食供应商处购货，然后放进仓库，拿进厨房，进行加工，最后售卖给消费者。在售卖给消费者整个环节，需要记账，当前的解决措施是，人工收费，但是这存在2个问题，一是人工效率低，二来人工作时候，难免会出错，这样的出错，是会给企业带来损失。因此，该餐饮食堂是希望说是否有人工智能的方式来解决该问题。 增效是什么意思？就是能为企业带来更多的收益，比如，一个广告投放商，之前他每1块钱投放的广告能带来10块钱的收益，但是采用了相关的技术，根据用户的兴趣，进行精准投放之后，用户点击广告下单的几率提高了。因此，他每一块钱投放的广告带来的收益也更大了。这就是增加收益。 一般来说，在售前阶段，和客户聊清楚业务痛点的同时，也是需要和客户介绍解决方案&#x2F;产品。在解决方案介绍这里，介绍一个小的技巧：要针对一些常用的场景，定义出来通用的解决方案，灌输给客户。通用方案+少量定制。这样可以最大程度节省开发人力，降低出问题的可能性，提高效益。 划重点，记笔记。商务阶段是否成功的标志有两个： 是否摸透了客户的业务痛点 是否成功让客户相信了我们的产品&#x2F;解决方案能解决客户的问题 如果说，这两点都成功了，那么商务阶段也就成功啦。 接下来就来到POC阶段。先了解一下，什么是POC测试，POc测试，也就是客户应用的验证性测试。主要是为了验证产品与客户需求的满足度。在一个数据科学项目中的POC，其实也就是一个子项目了。既然是项目，就有明确的开始和结束时间。既然，开始的秒钟被按下了，剩下需要做的，就是同时间赛跑。 接下来，需要和客户确认如下事宜： POC目标 数据情况 在确认上述事宜之前，我们来看看人月神话这本书的一个描述 在众多软件项目中，缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来影响还大。导致这种普遍性灾难的原因是什么呢？我们对估算技术缺乏有效的研究，更严肃地说，它反映了一种悄无声息，但并不真实的假设——一切都将运作良好。什么叫做不真实的假设——一切都将运作良好呢？就是说，一切都运作良好，这种事是永远不存在的，就像落在地上的树叶不会回到树上。 说完不真实的假设，我们说回需要和客户确认的事宜，当在会议上和客户确认数据的时候，客户会说：”我们的数据很全，没问题，我请数据团队将数据导出来给你们。“接着，我们就会陆续发现如下问题： 客户导的数据，各个不同的单表之间无法通过UID连接上 客户导的数据，某一些单表的Header消失了 客户导的数据，其真实的列数，和数据说明不一致 客户导的数据，一部分产品的信息消失了 …… 这些问题，讲出来，是不是会让正在阅读本文的你觉得很可笑。请不要笑，因为，这就是现状。这些现状会带来什么后果呢？带来沟通成本。沟通成本的背后意味着什么？更多的人力资源投入，以及消耗更多的时间。在这些细碎的沟通细节背后，时间就悄悄溜走了，亟待被喂养的算法模型仍在嗷嗷待哺，没有足够的数据，出不来好的效果。 所以，如何从一开始就更好地避免这个问题呢？ 明确和客户需要取得数据，有多少个表，以及每个表之间的uid对应关系 要求客户在提供数据的同时，提供数据说明，数据说明包括数据一共包括多少个表，每个表的名字，每个表的行列，以及每个表的header。 POC验证效果OK了，然后是商务阶段。这个阶段，一般是商务负责。商务阶段谈妥之后，便是交付，根据销售产品的不同，有不同的交付方式，SaaS、私有化。不同的交付方式，对应不同的部署。 1.2 产品经理在复盘我的产品经理相关的工作之前，先看一张产品经理的职业路径图 为什么将这张图放出来？一是为了更好地帮助自己梳理产品经理的职业发展路径，一是为了更好地定位自己目前的发展阶段。 严格意义上来说，我刚成为生产环境的产品经理2个月，纵使之前在3节课学习过相关的知识，古人说得对：纸上得来终觉浅，绝知此事要躬行。恰好昨天，组长也和我说到了在产品经理技能这块的一些缺失，其实是这样的，当前，我自己还在技能线阶段。在这个阶段，我对自己的目标，在3个月内，掌握PM的全套方法论。这个目标是不是过于自大，并不是，一来，我很早之前阅读过大量产品类数据，二来参加过三节课的产品经理课程培训，对产品的全套方法论是有感知认识的。不过，没有实际运作经验，所以缺乏一线理解。现在既然有机会，也有知识储备，那么就应该厚积薄发。 所以产品经理，这块我的目标是：在3个月内掌握PM的全套方法论。 分解一下目标： 掌握PM的全套方法论 3个月内 要掌握PM的全套方法论，我们需要首先知道，PM的全套方法论有哪些？从产品经理的工作职责为主线来看：发现需求-&gt;分析需求-&gt;进行调研-&gt;做竞品分析-&gt;画流程图-&gt;画原型-&gt;写文档-&gt;评审-&gt;验收-&gt;上线； 客观来说，对于上述流程，每个模块我都可以完成，但是缺乏体系。因此，我会按照这个思路，来整理出来我的思维体系结构。 修改完这篇复盘，其实已经是Q2过去了3周了。本篇文章里面的目标和措施，在Q2的计划里面做了详细描述，就不在本篇赘述。 接下来的目标和措施，参考文章《接下来3个月的成长规划 | 一颗西蓝花🥦》","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"CAIO总结复盘","slug":"CAIO总结复盘","date":"2020-05-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/23/CAIO总结复盘/","link":"","permalink":"https://kerryli1007.github.io/2020/05/23/CAIO%E6%80%BB%E7%BB%93%E5%A4%8D%E7%9B%98/","excerpt":"","text":"在卫哲老师的书《21世纪职业生涯完胜之道》，有这样一段描述 问：“请问您的企业是如何成功的？”答：“靠我们丰富的经验。”问：“您是怎样取得这些丰富的经验的？“答：”因为我们犯过许多许多错误。“这个对话告诉了我们要百倍重视总结企业实践，不论成功的或失败的，不仅要善于总结自己的实践，而且应该认真学习别人实践的经验和教训。 这段对话非常有意思，对我也非常有启发，要想更快速的成长，就要多总结，不光总结自己成功的经验，也要总结自己失败的经验。不光要总结自己的经验，也要学习和总结别人的经验。 最近公司举办了CAIO活动，听了同事们的分享，有一些收获。 总结一对于所有新业务场景的探索都可以问两个问题： 没有经验，如何往下走 接下来往哪个方向走 总结二重视客户的诉求。 Case ：客户想要的是解决一个场景的具体问题，但是我们一直在给客户推平台。有了平台是否等于可以解决这个问题。如果答案不是Y，那么这个客户引导就是错误的。 总结三Critical Thinking在我们读论文也好，读资料也好的时候，一定要有critical thinking，思考3个问题： 是不是就是这么回事 如果是，那是为什么 如果不是，那又是为什么 最后吐槽一句：市面上的招聘企业，经常把年限作为一个标准，但是实际上，不同的人，其工作习惯不同，在是否善于总结，发现规律，以及总结成方法论这些方面，有很大差异。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"人月神话（4）| 画蛇添足","slug":"人月神话（4）-画蛇添足","date":"2020-05-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/23/人月神话（4）-画蛇添足/","link":"","permalink":"https://kerryli1007.github.io/2020/05/23/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%EF%BC%884%EF%BC%89-%E7%94%BB%E8%9B%87%E6%B7%BB%E8%B6%B3/","excerpt":"","text":"结构师的交互准则和机制 面对估算过高的难题，结构师有两个选择：削减设计或建议成本更低的实现方法——挑战估算的结果。后者是固有的主观感性反应。此时，结构师是在向开发人员的做事方式提出挑战。想要成功，结构师必须 牢记是开发按人员承担创造性和发明性的实现责任，所以结构师只能建议，而不能支配 时刻准备着为所指定的说明建议一种实现的方法，同样准备接受其他任何能达到目标的方法 对上述的建议保持低调和平静 准备放弃坚持所作的改进建议阅读到这一段时候，我发现有点别扭。结构师？因为似乎在今天的软件开发中，我基本上没有听说过这个岗位的存在。思考了一下，就像我在人月神话的上一篇阅读笔记中写道 本书作者弗雷德里克·布鲁克斯撰写本书的时候，大概是上个世纪末，那个时候，软件时代的产品经理更偏向项目管理和推进，按照客户的要求准时上线产品。（《俞军产品方法论》）所以，不难理解为什么作者会在书中强调将体系结构和具体实现分开，今天，在软件产品开发中，体系结构一般是由产品经理定义好，具体的实现方式，由研发思考。 这里所说的结构师就是我们今天说的产品经理。结构师来设计结构体系，这样也和上一章节的逻辑呼应。 当产品经理来建议成本更低的实现方法时，或者，当产品经理提问“我们是否还有更简单的实现方法？”，一般来说会得到以下2种不同类型的回答 这不是你们产品经理应该考虑的范围吧 暂时没有，只有这一个实现方法 一般开发人员会反对体系结构上的修改建议。通常他是对的——当正在实现产品时，某些特性的修改会造成意料不到的成本开销。 确实如此。所以，在产品开发的每一个sprint，一般每个sprint是一个版本。建议在产品评审结束后，就敲定当前版本的开发范围，不要随意增加需求。在实际开发过程中，我们常常遇到，来自运营、老板的需求增加请求，这个时候，我们可以先仔细评审该需求的紧急性，然后耐心与需求提出人员沟通。（有时候，老板的需求，可能不得不加。） 总结一下，结构师（产品经理）的交互准则和机制 与研发多沟通 提建议，但是接受研发的最终决策 自律——开发第二个系统所带来的后果 开发第一个系统时，结构师倾向于精炼和简洁。他知道自己对正在进行的任务不够了解，所以他会谨慎仔细地工作。第二个系统是设计师们所设计的最危险的系统。一种普遍的倾向是过分地设计第二个系统，向系统中添加很多修饰功能和想法，他们曾在第一个系统中被小心谨慎地推迟了。 结构师如何避免画蛇添足 —— 开发第二个系统所引起的后果？是的，他无法跳过二次系统。但他可以有意识关注那些系统的特殊危险，运用特别的自我约束准则，来避免那些功能上的修饰；根据系统基本理念以及目的变更，舍弃一些功能。 为什么说第二个系统很危险呢？因为第一个系统开发时候，很多需求都被压制住了，而需求方，比如运营、销售、老板，他们都会时不时来问一下，他们的需求什么时候会加上去。各方压力源都传导到结构师（产品经理）身上，压力源叠加，在这样压力之下，结构师是很难坚持自己的原则。这也就导致了第二个系统，很危险。产品经理心里大概也是有估量的，第二个系统的产品设计，会出问题，就像一辆正在加速驶向悬崖的列车。有了第二个系统开发的失败经验之后，在第三个系统开发时候，产品经理，就有了足够的底气（证据）来砍掉来自运营、销售、老板的需求（这是我关于第二个系统开发很危险的理解。 读到这里，我大概明白了《人月神话》这本软件开发管理领域被奉为圭臬的经典，其讲述的一个主题，就是产品经理和开发人员之间的配合。这个配合包括各个层面：认知、分工、沟通等等。 因为作者写书的年代，他们将软件开发中的设计者，称之为结构师，换做今天的语言，就是产品经理。这一点，需要读者仔细思考，才能领悟。 最后，想补充一点有趣的知识， OS&#x2F;360 —— 50亿美元的赌注在阅读《人月神话》这本书的时，总会看到作者提到OS&#x2F;360，这也引起了我的好奇心，OS&#x2F;360究竟是什么？为什么作者在援引这款产品开发作为案例，背后有什么惊心动魄的故事吗？ OS&#x2F;360是IBM在1964年发布的操作系统。就其产业影响力而言，其他两个可与之相提并论的操作系统分别是：20世纪70年代在贝尔实验室诞生的UNIX，以及90年代微软的Windows视窗操作系统。 在实际开发中，OS&#x2F;360项目一再追加预算，最后超过了5亿美金，超出了硬件的总体研发费用。除了预算增加，OS&#x2F;360的正式发布日期也比原计划晚了3年。当时的IBM负责人小沃森甚至开始担心OS&#x2F;360在问世之前就会被淘汰。 不过很幸运的是，布鲁克斯本人，就是《人月神话》的作者，OS&#x2F;360的开发主管最终把这次惊险的“赌博”从失败的边缘拉了回来。 关于更多关于OS&#x2F;360的开发故事，可以阅读 人月神话 软件的黄金时代","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"陌生人社交","slug":"陌生人社交","date":"2020-05-23T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/05/23/陌生人社交/","link":"","permalink":"https://kerryli1007.github.io/2020/05/23/%E9%99%8C%E7%94%9F%E4%BA%BA%E7%A4%BE%E4%BA%A4/","excerpt":"","text":"写在前面，为什么突然我研究探探，也不单是探探，所有的陌生人社交，我都在关注。也是在探索AI能力能在哪些细分行业创造更大的价值。 我相信，这也是我写这篇文章的认知前提假设。 只有对场景有深入、透彻的了解，我们才能可以去尝试，是否可以用AI技术在这个行业里做一点点有趣的事。 解释一下为什么关注社交。原因有下： 1）社交是刚需2）不同年龄层，对社交产品的需求真的差异巨大，95后真的超级喜欢QQ。举一个让我自己感触很深的例子，QQ对话里面有一个变声功能，我一直觉得这个功能很傻逼，我的认知是，不知道哪种傻逼才会用这种功能。接着，很刺激的事情发生了，我一位朋友，清华电子专业的一位同学每次和我打电话，都会开这个变声。很难想象，一位工科、整天写代码的理工男，会喜欢这样一个功能。每次我问，为啥非要开变声，对方的回答是：“好玩。”这让我是真的很惊讶，我也才认识到。这个世界，存在一些客观的社交需求，不管我认同或者不认同，这些各式各样的社交互动方式，就是存在的。我可以向我过去一样，看不起，假装看不见，或者，我也可以，正视来自不同群体的社交需求。 鉴于此，我开始探探研究。当然，探探之后，我还会研究陌陌、SOUL、一系列的社交产品～其实我也是希望，用这种输入倒逼输出的方式，训练我的思维方式，并且让我快速成长，培养我自己理解这个世界，商业模式的能力。 从需求说起从默认网络说起要了解探探这款社交产品，第一步，是需要明白，为什么我们人类需要社交。 人类社交天性的历史根源可以追溯到距今至少有2.5亿年的哺乳类动物身上，当时恐龙刚刚开始悠然漫步在这个星球上。社交天性加强了我们与周围人的情感连接，增强了我们预知他人心思的能力，从而使我们能够更好地地他人进行协调工作。我们把进化过程描述为设计人类所拥有的这个现代大脑的过程，正是在这个意义上，我们才会说我们的大脑天生就是为了深入他人心灵、与他人进行互动而设计。《社交天性》 如果说进化过程是在为人类设计一个现代化的大脑，那么进化真是一位伟大的PM。 如果说，从2.5亿年前，哺乳类动物身上，就开始有社交基因，那么为什么，经历了这么长岁月的冲刷，社交天性仍然留在我们的基因里，这是自然的选择，而这背后也一定有特定的逻辑。 对于产品经理来说，要想做好产品，就必须了解人性。 任何一个社会结构都在或明或暗地与某种世界观，即“人类社会到底是怎样运行的”有关。归根结底，世界观就是一些关于人类天性中的各种“齿轮和杠杆”的理论，任何一个试图推动社会进步的社会机构的运行都要以这些理论为基础。《社交天性》 任何一个试图推动社会进步的社会机构，商业机构，像百度、腾讯、阿里、字节跳动，他们都是这样的机构，他们的产品中都是基于对人性中各种“齿轮和杠杆”理论之上。百度满足的是人获取信息的需求、腾讯满足人社交的需求，而，我目前在研究的探探，也满足的人社交的需求，但是这种需求和腾讯满足的有一些不一样。 人类需要社交，这种偏好已经写入了我们的大脑。怎么理解呢？ 研究发现，只要一有“闲暇”，大脑就会持续不断地做着某件事情，这说明，从某种意义上说，进化就是一场赌博，它把赌注下在了某件特别的事情上，因此这件事情必须包含无比重大的价值。怎么理解，一有“空闲”，大脑就会持续不断地做某件事呢？ 研究发现，当人门处于无所事事的状态时，有一系列脑区比人们在执行某个具体任务时更加活跃。研究者将这片脑区取了一个名字，叫做“默认网络”。 默认网络（default network），指的是，当其他任务完成时，这个网络会在默认的情况下打开。社会认知（social cognition），指对他人、自己以及自己与他人的关系所进行的思考。 我们在进行社会认知时激活的大脑网络确实与默认网络几乎完全一样。默认网络支持社会认知——支持我们去了解他人和我们自己。 起初作者认为我们之所以会在空闲的时候打开这个默认网络，是因为我们对社交圈感兴趣。前面这句话是千真万确的，不过反过来也是对的，而且也更加有意思。我现在相信，我们之所以对社交圈感兴趣，是因为我们的大脑天生就会在我们空闲的时候打开这个模型网络。 P35&#x2F;470这样说，社交是一种我们与生俱来的倾向。 当我们无事可做的时候，大脑脑区中特定的一部分脑区开始活跃，而这部分脑区又是和人类进行社会认知时候激活的脑区基本上一致，这告诉我们当我们无事可做的时候，我们的大脑倾向于开始社交。 从社交软件应用场景分类 To be continued 参考： 社交天性 村落效应 情绪是什么","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"Q2_Week2_工作总结","slug":"Q2-Week2-工作总结","date":"2020-05-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/22/Q2-Week2-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/05/22/Q2-Week2-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：将自己的成长，拆分成为以周为粒度的迭代。高频输出，持续迭代。 老规矩，回顾一下过去一周，成长与不足。 成长 | 对推荐系统有了更深的理解本周加深了自己对推荐系统的2个认知：推荐流程，推荐场景可使用的高标准产品 推荐流程一点感慨，说实话，我大概从2019年6月就开始看推荐系统相关的书籍，如《推荐系统实战》。最近做项目，要在工业可用概念上，交付一个可使用的模型，我才感受到，一切都是有那么一点不一样。这个不一样的感受，我尝试用一句话来表达：别人写成文字的内容，就是一两句话，对没有接触实际业务的我来说，无法深刻体会，其意义。比如，作者对召回，一句轻描淡写的带过 对于在线部分来说，一般要经历几个阶段。首先通过召回环节，将给用户推荐的物品降到千以下规模；如果召回阶段返回的物品还是太多，可以加入粗排阶段，这个阶段是可选的，粗排可以通过一些简单排序模型进一步减少往后续环节传递的物品；再往后是精排阶段，这里可以使用复杂的模型来对少量物品精准排序。https://zhuanlan.zhihu.com/p/58160982 默认，上面引用的文章作者，会更加关注技术，所以对业务层面的分析会比较少。 对于，我这类非常关注业务的同学，会关注以下这些问题：对于为什么要用召回，不用召回行不行，不用是否会有严重的后果？如果必须要用，那么到底要怎么用？谁来用？算法来用？还是业务来设置？涉及到一个推荐系统，要和业务紧密结合时候，是需要考虑非常多的问题，推荐系统不单单是算法的事。 发表完上述感慨，切入正题。推荐流程。推荐系统的本质，是将人和内容连接起来，这个过程中，有2个主体，一个是人，一个是内容。根据这两个主题，参考流程图 从左下角的手机icon开始，理解整个流程图，用户在手机端操作，产生了一系列行为，系统将这些行为收集上来，这些数据都是用户的实时用户行为 如果是要实时推荐，就进入实时模型，进行实时模型时候，阶段一般分为两个阶段，分别为召回和精排序。召回也好，精排序也好，其主体都是内容。我们也将这里的内容称为物料库。 召回阶段：算法模型从物料库中召回一些商品。 精排阶段：算法模型将这些召回回来的item进行精排序完成上述两个阶段之后，这些被召回的内容，需要再通过业务策略，最后才会展示给用户。 如果不是实时推荐，就写入历史用户行为log，将这些数据进行离线模型训练了解了上述流程之后，来回答之前的所有问题 对于为什么要用召回，不用召回行不行，不用是否会有严重的后果？如果必须要用，那么到底要怎么用？谁来用？算法来用？还是业务来设置？涉及到一个推荐系统，要和业务紧密结合时候，是需要考虑非常多的问题，推荐系统不单单是算法的事。 举例珠宝电商场景，他们销售的商品数量一共有6W。如果说没有召回阶段的话，那么算法模型需要将消费者和这6W商品依次进行打分。这样的直接影响需要大量时间，速度低。试想这样一个场景，你正在兴致勃勃地刷着抖音，刷完一个短视频之后，你期望立刻刷到下一个，如果这个时候，算法模型要对物料库中的上亿个短视频都进行打分，最后计算出你最喜欢的商品，然后推送给你，这个过程，可能都需要1个小时。正在手机端前的你能等吗？不能是吧。因为用户是期望无感知，刷完这个视频，就立刻有下一个视频。珠宝场景同理。为了实时性，就需要在原来的物料库中进行一次筛选，这就是召回。这都说的是召回的优点，那召回有缺点吗？有的。召回会在一定程度上牺牲精准度。 继续回答上述的问题。这个召回是怎么用？算法来用？还是业务来用。我的理解是算法和业务要配合。如何理解。算法要做模型做召回，但是需要和业务配合。比如，有一些商品，过期了，不能被销售，那么这种变化，是需要实时更新的，因为不能推送不能被购买的商品给消费者。如果要做到业务逻辑实时更新，那么久需要一个可视化交互界面。谈到这里，我也想说一下，推荐在一个业务场景中的使用，真的不是算法代码的事，这里面，需要大量业务的配合。而业务的配合，是需要有一个可视化交互界面，让业务同学完成一些运营动作的操作。 这里顺便说一下业界企业的做法，一般来说，大的企业，比如腾讯、百度，他们的推荐系统都是有可视化交互界面；小的企业，一般都是通过redis或者API来操作。 推荐场景可使用的高标准产品思考一个场景，企业A，主营业务是珠宝销售，期望使用AI模型来进行精准化推荐。但是，当前由于种种原因，作为技术服务提供商，我们提供的产品，只能解决算法层面的问题。提问，这是一个推荐场景的高可用标准产品吗？答案：不是。 那推荐场景可使用的高可用标准产品是什么呢？市场上有没有这样的产品呢？有的，比如达观、神策。 对神策的推荐产品进行分析，神策提供两个场景的推荐 文娱Demo 电商Demo 文娱适用于资讯项目。点击【创建信息】，展示 基础信息：创建人、创建信息可推物品筛选条件： 文章 视频 点击【物品规则】 物品规则字段： ID 物品名称 权重 必推（设为必推后，将在必推截止时间前，为每个用户推荐该物品一次。同一栏位下，最多支持同时设置10条必推） 类目 标签 类别 点击【推荐规则】 去重规则 展示数量去重 展示时间去重 点击数量去重 点击时间去重 比例规则文章 *% + 视频 *% &#x3D; 100% 最后，神策还提供【统计分析】功能，用过神策产品的同学，已经对这个设计不陌生，神策在做统计分析方面是非常在行了！ 成长 | 总结一下对竞赛领域的版图理解关于竞赛行业的理解，我想更深入的写，仔细分析竞赛领域到底有没有想象空间？所以，会专门写一篇文章来梳理。 这是Q2_Week2的工作总结！","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Q2_Week3_工作总结","slug":"Q2-Week3-工作总结","date":"2020-05-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/22/Q2-Week3-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/05/22/Q2-Week3-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：将自己的成长，拆分成为以周为粒度的迭代。高频输出，持续迭代。 上周虾宝和我在讨论什么是好的mentor、以及如何实现自己的职场价值。特此记录，砥砺自己。 什么是好的mentor。好的mentor一定是经历了实战，并且存活下来，不是失败者。或者，就算失败了也依然继续努力战斗，这才是好的mentor，如果mentor已经是咸鱼，最后只靠嘴皮子说如何个人努力，这种大概率是不太行。字节的老板，都特别喜欢打过硬仗，如何在竞争中厮杀。 如何实现自己的职场价值。上面关于好的mentor的定义，也适用于个人职场价值的判断，所以，我来衍生一下。个人的职场价值，不是看成长（这个说的有点残酷），而是看这个人打胜&#x2F;败过多少场商业战争。一个职场人打仗数量，代表了这个人的经验，能力，以及她是否适合这样的生存环境。这些已经不单单是人品或者聪明可以解释的。总结一下，要实现自己的职场价值，就去实战，去赢得一场场战争。 和虾宝的讨论，暂且谈到这里，接下来回顾上一周的成长。 推荐系统实战 | 踩过的坑春节之后，我一直在跟推荐项目。前期尚且有数据科学家的支持，到了4月份，数据科学家驻场去了，因此，整个项目从前端到后端都是我一个人了。好处是，沟通成本大大降低；坏处是，从帮助客户梳理需求，到写代码实现客户需求，都是我一个人了。对业务的理解，对算法的理解，都是一道道横立在我面前的障碍。 将所有踩过的坑整理总结出来，也丰富自己的知识体系。 模型训练丢掉产品信息背景阐述：做CSS推荐项目，一个基本假设是，使用模型进行商品推荐，效果会好过传统的商品推荐，比如选择上一年度的BestSeller。 因此，基于传统的商品推荐来构造训练集。但是，在项目实施过程中，发现客户给的传统推荐营销表，存在两个问题： 传统的营销表中，没有营销商品的信息 传统的营销表中，没有此笔营销订单是否成功的信息 在首次，处理数据时候，对于上述两个问题，我分别采用的措施如下： 营销表中，没有商品信息，但是可以根据相关信息，在交易表中，匹配商品信息。但是这又出现另一个问题，那就是，成单的营销信息，有对应的商品信息，但是没有成单的营销信息，就没有对应的商品信息。所以，当时我的判断是直接拿掉产品信息。 营销表中，没有成单信息。可以根据userid已经营销时间，在交易表中，为该笔营销匹配上是否成单的信息。 上述两个措施，第二个是合适的，但是第一个完全不合适。试想，我们是要为消费者推荐商品，怎么能将商品信息直接拿掉呢？对于这个问题的补救措施：营销表中的消费者分为两类，一类是被营销后，有消费记录，一类是被营销后，无消费记录。我们可以选择有消费者记录的消费者，作为我们的样本客户群，有消费记录营销事件的作为正样本，然后，按照正负样本1：10的比例，为每个客户匹配负样本。这样，我们就得到了一个完整的营销表，只不过是伪营销表。 从这个小的细节，可以看出，从业务逻辑，到算法逻辑，其实是有较大的gap，同时，对数据的处理，很多时候，是会带来其他额外的效应的。 实验设计背景基于不同的目标，我们有2个模型。模型1的目标是maxmize预测自然购买和真实自然购买的匹配度，模型2的目标是推荐模型的转化率好过传统短信推荐。但是，模型2用来训练的数据量小。模型1的训练数据在千万级别，模型2的训练数据在10万。因此，为了比较2个模型的真实效果。我们需要比较这些模型在测试集上的表现。 实验设计本实验解决的问题是什么：传统短信营销场景下短信营销转化率低，尝试用推荐模型来给每个用户推荐，从而提高转化率。 实验假设：SMS模型营销和自然购买模型营销给出的推荐商品在真实购买商品的命中率更高。 实验组： 传统营销 SMS模型营销 自然购买模型营销 实验指标： 命中率 计算公式{用户1,真实购买item} &#x2F; {用户1, 预测item1}，{用户1, 预测item2}……{用户1, 预测item10}，这10个，有一个预测命中，则算这个预测准确 采用命中率做为指标，主要是为了评估，模型推荐的命中率和传统营销的命中率，谁的命中率更高。假设是，命中率更高的推荐方式，即为真实场景中表现更好的推荐。 产品设计在工作中，我既是别的PM设计产品的长时间使用者，最近3周，平均每天，我使用AutoML的时间，大于等于5个小时；我自己也是To B产品的PM，每天都会接到运营、销售、以及其他部门的需求。 对AutoML使用层面的感受AutoML作为工具的初衷是降低生产算法的门槛。 传统的算法生产，只有数据科学家可以做这件事。但是AutoML的出现改变了这件事，AutoML让一些对机器学习有基础理解的人，也能建模，同时模型的表现，也会不错。 但是，为了实现上述目标，就会牺牲一些原有的便捷性，同时，AutoML的用户定位一直也非常模糊。（这个不展开 作为PM，如何分析需求一些思考，从AutoML到推荐方案，还有多远","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"可复制的领导力","slug":"可复制的领导力","date":"2020-05-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/22/可复制的领导力/","link":"","permalink":"https://kerryli1007.github.io/2020/05/22/%E5%8F%AF%E5%A4%8D%E5%88%B6%E7%9A%84%E9%A2%86%E5%AF%BC%E5%8A%9B/","excerpt":"","text":"之前带的一个小朋友YW，前段时间拿到了美团推荐策略的offer，由衷地为她开心。我曾经带她做过一段时间的AI项目，在做她mentor的时候，我也是第一次带人。有一些心得体会，总结如下。 从缺乏耐心到可复制的领导AI项目涉及到大量技术细节，各个组成部分，错综复杂，前期，布置任务的时候，我只说一遍。后来发现，YW在执行的过程中，会有很多问题，不断找我确认。有时候，我会耐心较少，甚至会想，这些工作，我自己来做，是否更简单。 后来和Fox沟通请教了一下我遇到的这个问题。他推荐了我一本书，叫做《可复制的领导力》。 摘录其中一段让我特别有感触的文本： 布置任务时候，至少说5遍：第一遍，麻烦你帮我做一件XX事。第二遍，麻烦你重复一遍。第三遍，你觉得我让你做这事的目的是什么。第四遍，你觉得做这事会遇到什么意外，遇到什么情况你要向我汇报，遇到什么情况你可以自己做决定？第五遍，如果你自己做，你有什么更好的想法和建议。五遍讲完，员工对各种突发情况、场景都有预案了，再去执行。 确实如此，之前在布置任务时候，讲一遍就结束了，自以为是节约了时间，但是其实是为后期重复来去的沟通确认埋下了伏笔，从一开始分配任务时候，就和对方确认目的，分析各种情况的预案，这样其实是更明智的领导者的选择。 最后，衡量一个管理者能力的高低，是看他能培养多少能干的人才。因此，我也矫正了之前认为还不如自己来做这些任务的看法。授予小朋友们正确的方法，使其独立承担项目的一部分，既可以让他们成长，也开启了我职业生涯的新篇章，从被mentor的入门者，开始mentor其他人。 最后在强调一下： 布置任务时候，至少说5遍：第一遍，麻烦你帮我做一件XX事。第二遍，麻烦你重复一遍。第三遍，你觉得我让你做这事的目的是什么。第四遍，你觉得做这事会遇到什么意外，遇到什么情况你要向我汇报，遇到什么情况你可以自己做决定？第五遍，如果你自己做，你有什么更好的想法和建议。五遍讲完，员工对各种突发情况、场景都有预案了，再去执行。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"人月神话（3）| 贵族专制、民主政治和系统设计","slug":"人月神话（3）-贵族专制、民主政治和系统设计","date":"2020-05-12T13:34:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/12/人月神话（3）-贵族专制、民主政治和系统设计/","link":"","permalink":"https://kerryli1007.github.io/2020/05/12/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%EF%BC%883%EF%BC%89-%E8%B4%B5%E6%97%8F%E4%B8%93%E5%88%B6%E3%80%81%E6%B0%91%E4%B8%BB%E6%94%BF%E6%B2%BB%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"大教堂事艺术史上无与伦比的成就。它的原则即不乏味也不混乱…..真正达到了风格上的极致，完成这件作品的艺术家们，完全领会了吸收了以往的成功经验，也完全掌握了他们那个时代的技术，而且在应用的时候做到了恰如其分，绝不轻率，也绝不花哨。 在系统设计中，概念完整性应该是最重要的考虑因素。为了反映一系列连贯的设计思路，宁可省略一些不规则的特性和改进，也不提倡独立和无法整合的系统，哪怕它们其实包含着很多很好的设计。 如果说概念完整性如此重要，那么如何获得概念的完整性？编程系统（软件）的目的是使计算机更加容易使用。 获得概念的完整性 编程系统（软件）的目的是使计算机更加容易使用。为了做到这一点，计算机装备了语言和各种工具，这些工具实际上也是被调用的程序，受到编程语言的控制。使用这些工具是有代价的：软件外部描述的规模大小是计算机系统本身说明的十倍。用户会发现寻找一个特定功能是很容易的，但相应却有太多的选择，要记住太多的选项和格式。 作者撰写本书的时候是上个世纪70年代，在这个时候，作者已经意识到了使用工具，会有代价。作者的描述是，寻找一个特定功能是很容易的，但是相对应却有太多的选择，要记住太多的选项和格式。 我相信，这是作者在几十年前就看到的一个问题。但是，几十年过去了，这个问题，不但没有得到解决，反而越发严重。有好多产品，用户连寻找一个特定功能都很困难。 报销软件，是一个高频使用的产品。基本上，保持一个月一次的视频频率。在使用场景中，用户需要打印每个月提交的申请表单。![](https://kerryli1007.github.io/images/人月神话（3）| 贵族专制、民主政治和系统设计&#x2F;123.png) 用户登陆产品云快报，希望找到自己在手机端已经提交的报销申请。这个时候，有三个选择： 我的审批 我的单据 我的订单 基本上，每次我都会在我的审批以及我的订单中找报销申请，但是每次都找不到。后来才意识到，原来被提交的报销申请在【我的单据】里面。百度【单据】的含义: 单据，是在经济业务发生时所取得或填制的、载明交易、事项实际情况的书面证明，它是进行会计核算的原始资料和重要依据。 了解到原来【单据】是一个专业的名词。如果说，平台为了保持自己的专业度，让这样一个日常不常见且抽象的概念暴露给用户，牺牲一定的用户体验，那我能理解。 那是否可以做得更好的，是否可以当鼠标点击在上述的三个选择时，给予一定文字提示，让用户知道，每个选项是什么。 写到这里的时候，我又重复研究了一下这三个选项。 我的审批 等待审批 审批记录 我的单据 等待处理 正在审批 审批完成 我的订单 全部 进行中 已完成 审批和单据是真的让人傻傻分不清，产品经理应该好好想想。 回到作者上述描述，其本质还是计算机的易用性。 ::什么是易用性，给其一个定义，易用性 &#x3D; 功能 &#x2F; 理解上的复杂程度。:: 单一的功能本身或者是否易于使用，这都无法成为一个设计评判标准。所以，要实现上述目标，并不容易，极其考验产品架构的系统规划能力。 贵族专制统治和民主政治 概念的完整性要求设计必须由一个人，或者非常少数互有默契的人员来实现。 但是进度压力却要求很多人员来开发系统。有两种方法可以解决这种矛盾。第一种是仔细地区分设计方法和具体实现。第二种是前一章节中所讨论的开发方式。 区分设计方法和具体实现。将设计方法、体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。 什么是体系结构？ 系统的体系结构指的是完整和详细的用户接口说明。 为什么要将体系结构（设计方法）和具体实现分开？ 体系结构陈述发生了什么，而实现描述的是如何实现。 我感觉体系结构和具体实现的分开，实质上是如今软件开发中产品经理和研发的分工。本书作者弗雷德里克·布鲁克斯撰写本书的时候，大概是上个世纪末，那个时候，软件时代的产品经理更偏向项目管理和推进，按照客户的要求准时上线产品。（《俞军产品方法论》）所以，不难理解为什么作者会在书中强调将体系结构和具体实现分开，今天，在软件产品开发中，体系结构一般是由产品经理定义好，具体的实现方式，由研发思考。 最后，今天看到一个很有趣的观点： 想要拥有好的的格局和眼界，需要信息输入足够多，可以把自己当成算法模型去训练： 信息量要大：要开放，大量输入信息，改变固执己见的封闭思维，研究高手、找高手交流、工作生活中总结、看书 筛选有效信息：要有逻辑、模型 快速迭代：结合实践后的数据和反馈去调整、优化旧的模型 继续重复1、2、3自己肯定有盲区，也有继续成长的空间，别自我设限，拥抱变化。 通过足够大的输入，训练自己，深以为然。 同时，单是输入尚且不够，必须，输出，大量输出。所有的输入，只有经过了认知加工，变成了输出，才会成为自己认知体系中的一环。 参考 《软件的黄金时代》 《人月神话》 《俞军产品方法论》","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"记录和AWS PM的一次沟通","slug":"记录和AWS-PM的一次沟通","date":"2020-05-10T15:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/05/10/记录和AWS-PM的一次沟通/","link":"","permalink":"https://kerryli1007.github.io/2020/05/10/%E8%AE%B0%E5%BD%95%E5%92%8CAWS-PM%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B2%9F%E9%80%9A/","excerpt":"","text":"START WITH WHY | 最近朋友推荐了领英的【职场导师】活动，在上面预约一个AWS的PM。对方非常友好地同意和我进行沟通，投入了1个多小时。对方的洞察及其对市场的理解，给了我一些启发，将其总结整理如下。 最近在阅读《跨越鸿沟》，其中有讲到 高科技产品市场的开发过程中，从由少数远见者所主宰的早期市场向由实用主义者占支配的大批顾客所占据的主流市场的过渡，这个过程其实是蛮困难的。 读到这里，非常有共鸣，因为我目前负责的产品，也正在经历这样一个过程。我自己也有诸多困惑，因此，就这个问题请教了这位AWS的前辈。 问题如下： 前辈您好，谢谢您接受我的邀请！！有一个问题和您请教 高科技产品市场的开发过程中，从由少数远见者所主宰的早期市场向由实用主义者占支配的大批顾客所占据的主流市场的过渡，这个过程其实是蛮困难的。我目前负责的产品，其实正在经历这样一个过程。 想请教您，您负责的产品，具体是解决什么问题？是否也有经历过这样一个艰辛的过渡？ 因此，和AWS这位前辈的沟通，是基于上述问题展开，我将其中一些重要的观点，做如下梳理： AI 落地的困境最近一两年，鼓吹AI泡沫的声音络绎不绝。究其原因，无非是因为AI落地场景有限，商业化进程欠佳。 AI在一些场景的效用是得到验证的，比如风控，比如推荐。但是，这两个场景分别有其问题存在，风控客户，比如大银行，这类客户自身的特点决定了这类型的单子有两个特征：客单价高，数量少。推荐的问题，参考文章《CV四小龙引发的思考》 但是投资人要回报，公司需要持续增长，怎么办呢？不断扩大边界，挖掘更多的客户。 这就说到了另一个问题，更多的客户，这些客户不会都是大客户，那么这些单子就会存在一个问题，客单价低，收益少。但是做这种单子的方式和原来做大客户的单子方式还是一样的，都是做项目。做项目的话，就需要投入大量的人力资源。这样一来，势必不可持续。 那么如何跳出做项目的泥沼呢？ AWS的前辈给了几个思路： 写Documentation，图文并茂，增加可读性，可以借鉴Azure 产品使用文档（其实目前也有产品使用文档，不过看起来实在是太难了，我看着就困难，字密密麻麻 Use Case 发展合作伙伴 让合作伙伴来做项目 我觉得文档这个给我启发真的特别大，因为，我自身就不喜欢看文档，之前刚开始学习写Python时候，我就不喜欢看文档。 经过这次交流，我总算意识到了文档的重要性～下定决心，之后要好好写文档，也好好读文档。（其实这里说明了一点，就是动机很重要，也就是为什们要做这件事） 职业发展求职过程中，当求职岗位是senior时候，应聘方是会对求职者有所期待，比如，求职者拥有一些domain knowledge。相反，当求职者应聘岗位是junior，可以是一张白纸。 给我的启发是说，我目前是junior啦，这个没问题。但是要成为senior的话，我的职业规划到底要怎么做呢？（我的职业规划的那篇文章还没有写完，需要补上 SplunkSplunk是一家非常有意思的公司，之后再写啦～ ⭐️这次沟通，获益良多。感谢Jay愿意为我这样一个陌生人花费1个小时，分享他的经验，给予中肯的建议。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"work","slug":"work","permalink":"https://kerryli1007.github.io/tags/work/"}]},{"title":"Q2_Week1_工作总结","slug":"Q2-Week1-工作总结","date":"2020-05-10T00:38:40.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/10/Q2-Week1-工作总结/","link":"","permalink":"https://kerryli1007.github.io/2020/05/10/Q2-Week1-%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"原则：将自己的成长，拆分成为以周为粒度的迭代。高频输出，持续迭代。 在过去一周，收获如下： 掌握使用AutoML进行个性化推荐的全流程 整理出了一套做不喜欢&#x2F;不熟悉工作的方法论 使用AutoML进行个性化推荐最近做了好多个零售场景的AutoML项目。将收获整理如下： 项目目标非常重要，参考文章 建模逻辑 向客户介绍零售场景个性化营销在AutoML营销时，讲故事 前2点，在文章《记一次推荐项目POC》有介绍，第3点，我在本篇复盘文章做记录。 我发现，其实向客户介绍营销方案，想要做一个好的营销方案介绍，只有两个字，练习。下午组里大家对如何介绍使用AutoML进行个性化推荐进行了分享，晚上呆在家里，在录音笔的辅助之下，我自己锻炼了2个小时，终于总结出来如何通过讲故事的方式，讲出一个好的客户案例，文案如下，隐去了客户信息 和大家介绍一下，客户A是如何使用AutoML这款产品，实现短信个性化营销。客户A是一家珠宝商，他们会进行一些营销活动，比如短信营销。传统的短信营销方案，是市场人员选择当季新品，或者上一个季度卖的最好的商品，统一地推销给所有消费者。这是传统的短信营销流程。但是这样的流程有一个问题存在，就是转化率低，从而导致营销成本高，但收益小的情况。因此，客户A他们的诉求是做个性化短信营销，是想说，在给消费者推荐商品时候，就推荐消费者最有可能购买的商品，提高转化率，相同的营销成本条件下，从而增加营销。客户A他们也做了蛮多次这类型的营销，积累了大量的运营数据。这里的运营数据指的是，用户A买了什么产品，没有买什么产品。我们将这样一些用户购买行为的数据，整理进AutoML，然后我们就能得到一个模型。使用这个模型，我们可以为每个用户推荐他最有可能购买的商品。同时呢？这个商品被推荐出去，他最终是否有被消费者购买，这个数据平台也是会去收集到的。根据平台每一次的推荐，以及，消费者对推荐产品的反馈，我们的模型便会持续地去学习这里的规律，最终推荐结果也会越来越准确。用户行为数据放进模型，来看看这些数据是怎么放进去的。（详细解释什么是行为数据，什么是反馈数据）AutoML是如何让这些数据产生好的效果的？（高维特征构造） 如何做不喜欢&#x2F;不熟悉的工作面对自己不喜欢&#x2F;不熟悉的工作，怎么也能做得很好？我的回答是，规划。规划在日常工作中异常重要。规划是指对于自己想做的东西要有理想形状，如果没有，计划就很难推进下去。 为什么要规划？对日常工作进行规划，有利于 为当天的工作安排合适的优先级 有利于复盘总结当天的工作 有利于系统化自己的做事方式 最近对规划有极大的感慨，主要原因是自己的工作，最近从业务逻辑理解，到写代码处理数据，到训练模型，调节资源，排查算子失败原因，要做的事情真的太多了，而且都是不熟悉的工作内容。真的很容易崩溃，以及，工作时候，杂乱无章法。工作杂乱无章法，容易导致工作失误，于是，我为自己设计了一套防出错SOP～ 写代码处理数据 梳理需要实现的业务逻辑，用文本写下 查找对应的代码 看原来的Dag里面是否有类似代码 查找SQL必知必会 再查Google 模型训练模型训练最大的问题是资源调节。遇到报错，进入监控系统，查看hdp日志，找TS进行运维 其实总结一下，这些事也不多。但是由于都是不熟悉的工作，所以其实做的时候，比较困难。 其实有时候，不是对工作内容不喜欢，而是不熟悉工作内容，从而衍生出了一种Flight情绪，就是认知心理学中讲的，面对困难，Fight or Flight，我的感受体会是，当没有掌握正确的方法论时候，是极其容易滋生出Flight情绪。掌握了正确的方法论，做事有章法有节奏，这个时候Fligt情绪会被转化为Fight。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"work","slug":"work","permalink":"https://kerryli1007.github.io/tags/work/"}]},{"title":"SQL代码","slug":"SQL代码","date":"2020-05-05T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/05/SQL代码/","link":"","permalink":"https://kerryli1007.github.io/2020/05/05/SQL%E4%BB%A3%E7%A0%81/","excerpt":"","text":"记录一下最近项目中，常用的SQL代码 更改字段类型 1234567# 语法cast (expression as data_type)# 参数说明## 1. expression 任何有效的sqlserver表达式## 2. as 用于分割两个参数，as之前是需要被被处理的数据类型，as之后是要转换的数据类型## 3. data_type 系统支持的数据类型 注意，如果是修改字段类型为date，可以直接用to_date() 更改字段名称 123select a as b# 说明## 1. 对字段取别名 检查数据表是否有重复 1select t1.user_id, count(t1.user_id) from t1 group by t1.user_id 检查数据表中是否有null 1select * from t1 where user_id is null 给数组添加新的列（序号） 1select row_number() over(order by pk) as row_number,* from t1 给数组去重 123select * from (select *,row_number() over(partition by sku_id order by sku_id asc) rn from t1) tn where tn.rn=1; 按时间维度筛选数据 12select t1.* from t1where date(时间字段) &gt;&quot;2018-06-01&quot; 对样本抽样 1select * from t1 order by rand() limit 1500000 date_sub 12345date_sub(date,INTERVAL expr type)- date 参数是合法的日期表达式- expr 参数是您希望添加的时间间隔。# 从日期里减去指定的时间间隔# 参考 [MySQL DATE_SUB() 函数](https://www.w3school.com.cn/sql/func_date_sub.asp) pmod 123pmod(int a, int b)# 返回a除b的余数的绝对值# 参考 [hive：函数：pmod(int a, int b) 返回a除b的余数的绝对值_大数据_不花的花和尚的博客-CSDN博客](https://blog.csdn.net/weixin_38750084/article/details/103032383) row_number() over (order by …) as 1row_number()over(order by ...) as row_number() over (order by a desc) 123row_number() over (order by a desc)# row_number()从1开始，为每一条分组返回一个数字，这里的row_number() over(order by a desc)是先把a进行降序排列，然后再为降序排列的每一条a返回一个序号# 参考 [ROW_NUMBER() OVER函数的基本用法 - kis$ove - 博客园](https://www.cnblogs.com/fxgachiever/archive/2010/09/15/1826792.html) select distinct column1 from tablename 123select distinct column1 from tablename# 返回column1，但是是去重后的column1# 参考 [SQL SELECT DISTINCT 语句](https://www.w3school.com.cn/sql/sql_distinct.asp) to_date 12TO_DATE# 是把字符串转换为数据库中得日期类型转换函zd数； 第一次写sql～多总结，多记录。","categories":[{"name":"代码","slug":"代码","permalink":"https://kerryli1007.github.io/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[]},{"title":"接下来3个月的成长规划","slug":"接下来3个月的成长规划","date":"2020-05-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/05/04/接下来3个月的成长规划/","link":"","permalink":"https://kerryli1007.github.io/2020/05/04/%E6%8E%A5%E4%B8%8B%E6%9D%A53%E4%B8%AA%E6%9C%88%E7%9A%84%E6%88%90%E9%95%BF%E8%A7%84%E5%88%92/","excerpt":"","text":"1. 从PDCA说起在项目管理领域，有一个方法论叫做PDCA。 PDCA (plan–do–check–act or plan–do–check–adjust) is an iterative four-step management method used in business for the control and continuous improvement of processes and products.PDCA有四个步骤：计划、执行、检查、调整。这四个相互交互的过程，在商业社会中被用来管理和不断改进过程与产品。 7-Eleven的创始人铃木敏文在《零售的哲学》一书中指出 从变化中读懂“未来”，建立“假设”然后“执行”，再对结果进行“验证”。这一过程有助于优化工作模式——如果在平日的工作中坚持重复“假设—执行—验证”的过程，那么在不远的未来必将有所斩获。 PDCA不单可以用在项目管理中，也可以用在工作模式的优化中。 2. 工作模式优化工作模式优化的第一步是计划。一年有4个季度，一个季度有3个月。那么，未来3个月我的成长目标是什么呢？换句话说，3个月之后，我期待能力画像是什么样子的呢？ 3. 未来3个月的成长目标3.1 项目管理目标：了解项目管理方法论，独立带大型项目。为了实现目标，我需要： 了解其他行业的PMO在做什么，我打算在3个月内，同6位从事PMO的朋友沟通。也就是说每个月要和2位PMO朋友沟通，等同于每两周和1个PMO朋友沟通。（我是不是要设计一个问卷，确保我想了解的目标是可以完成的） 研读《人月神话》。人月神话一共15章节。每个章节都应该有阅读笔记的产出，其中需要体现出我的理解。 阅读PMBOK。阅读PMBOK其实是一件比较难的事，因为我觉得此书过于枯燥无味。 3.2 产品管理目标： 熟练掌握产品经理工作流程的各个环节 独立设计产品线为了实现目标，我需要： 竞品分析，市场上主要的AutoML玩家，Google、X、Y。针对每一家的产品，都需要有产品使用分析报告，报告的模版需要自己设定。 目标7月底完成这个目标 5月1日，完成一个模版 产品经理的工作全流程方法论掌握， 制定一个产出方法论模版 完成人人都是产品经理的阅读，每一章节的阅读，都需要有产出 产品经理项目管理方法论，Scrum方法论，完成Scrum方法论的阅读，结合工作，产出方法论沉淀 制定一个scrum方法论的模版，每一个模块需要产出的内容 独立设计产品线我将上述项目管理和产品管理的目标使用Google Doc进行了一些调整以及细化，主要是让该目标，可量化，且可执行。 计划的制定只是第一步，重要的是执行，以及反馈。我会在博客上保持，每周Recap一次的频率。坚持原则，高频总结，持续迭代。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"没有一种运气是偶然，读NITORI创始人自传","slug":"没有一种运气是偶然，读NITORI创始人自传","date":"2020-05-04T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/05/04/没有一种运气是偶然，读NITORI创始人自传/","link":"","permalink":"https://kerryli1007.github.io/2020/05/04/%E6%B2%A1%E6%9C%89%E4%B8%80%E7%A7%8D%E8%BF%90%E6%B0%94%E6%98%AF%E5%81%B6%E7%84%B6%EF%BC%8C%E8%AF%BBNITORI%E5%88%9B%E5%A7%8B%E4%BA%BA%E8%87%AA%E4%BC%A0/","excerpt":"","text":"最近1个月，读了两本自传类书籍。 一本书是铃木敏文的《销售的哲学》，一本是似鸟昭雄的《没有一种运气是偶然：日本零售连锁巨头NITORI创始人自传》。 两本书的都给我带来了深刻的启发，我个人更喜欢私鸟昭雄的自传，因其给人的感觉是“深渊万丈，仍有花开一朵”。 凄惨的童年作者是这样描述他的童年的，选取其中几段描述： 要是我因为太饿说句“还想吃”，酱汤就泼过来了，当然，还要挨揍。母亲每天都要揍我，父亲大概一个月一次，用皮带抽到我死去活来。就算我发烧也不能步干活。相反，还会被骂干活无精打采，所以我经常被揍得满头是包。 在骑自行车送货时，我同学将我连自行车推进了河里。要是当时我的头先扎进河里的话，恐怕我就上西天了。我满身泥泞回到家，母亲惊讶地问道：“大米呢？”我说“我遇到别人恶作剧，被推进创成河了。”母亲说：“给我把掉了的大米全捡回来！”她关心的竟然是大米而不是我，无奈之下，我只得重新回到创成河边，把沾满泥的大米捡了回来。 这两段描述看得我揪心，这样环境成长起来的孩子，不反社会，误入岐途我觉得都算是祖上烧高香了，没想到作者后来还会如此成功。想来，也是这些经历，锻炼出了作者钢铁般的意志。是这个意志，驱使作者一次又一次，将濒临倒闭的商店挽救回来。 钢铁般的意志 我认为，被拒绝之后的谈判才叫谈判。一般人被拒绝三次后就会放弃，而我则认为第四次开始才是真正的谈判。当然，不能死缠烂打，亲和与执着缺一不可。 第四次开始才是真正的谈判，这句话真是给了我很大的启发。或许，就是作者小时候的经历，造就了他这种不怕被拒绝，越挫越勇的品质。 做事的态度 要么付出别人两倍的努力，要么就做人家不做的事情。 铃木敏文的书也非常棒，但我更喜欢私鸟昭雄，尤其喜欢他对凄惨童年的刻画。 凄惨的童年时代同愈挫愈勇的成年时代，形成鲜明对比，即—— 深渊万丈，仍有花开一朵。","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"PPT制作复盘","slug":"PPT制作复盘","date":"2020-05-03T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/05/03/PPT制作复盘/","link":"","permalink":"https://kerryli1007.github.io/2020/05/03/PPT%E5%88%B6%E4%BD%9C%E5%A4%8D%E7%9B%98/","excerpt":"","text":"实话来说，我得有两年没有正经做PPT了。这次需要为部门的产品做销售PPT，在做PPT的过程中，有一些收获总结如下，以供之后翻阅，从中汲取经验教训，更快成长。 Learning 1做PPT没有诀窍，唯有多思考。无他，多思考尔，且不断追求完美。嘿嘿，上面两句话好装逼哦。（不过我自己好喜欢，开玩笑啦～我曾在咨询行业实习过。众所周知，咨询行业以做PPT而著名，所有从事这个行业的人，都有一个看家本领，做PPT。但是在我在咨询行业那段时间，因为没有有效地成长，故在此方面无积累。客观来说，我在咨询行业也呆了一年（实习），光阴无价，关于PPT关于咨询，在这段时光中，我到底是否有收获？如果有，是什么？为什么会有这些收获？我没有收获什么？为什么没有这些收获，如果我有时光机器，倒回到3年前，还是进入咨询行业，怎么做，我能有收获？ Learning 2呈现的每一页PPT，我希望听众&#x2F;读者了解什么？他们应该获得何种认知。基本上很多讲PPT制作的书籍、文章，都会说，明确听众是谁，明确目标是什么，明确我们希望听众、读者了解什么？但是How？我曾经和虾虾一致讨论认为，只说要怎么，但是不说how就是怎么能做到的一切评论，都是扯犊子。怎么说呢？就是动动嘴皮子谁不会，但是重点是要告诉别人如何才能做得更好。我认为，要想在每一页PPT都有他自己的使命表达这里做得更好。有以下几个可参考的步骤 明确自己整个PPT的目标 故事线在自己脑海中要清晰（对着镜子讲故事线，和女朋友男朋友讲故事线，如果说讲不出来，卡壳，或者自己都不信，那就gg） 明确每一张PPT在整个PPT中的角色，就像一部电视剧，有主角有配角，比如《我和僵尸有个约会》，里面的主角是马小玲，但是她姑妈最先出场，她姑妈的角色就是配角，目标是为了推动故事发展。对我们的PPT也是同理，如果角色是配角，只是为了介绍背景，推动故事发展，那么就一定要做到详略得当。 寻找最适合这个点讲述的format 格式的展示和目标也是息息相关，比如一个背景铺垫，如果说1张PPT可以搞定，那么就不要搞成3张。 Learning 3好的PPT片子需要时间。以前我看别人的PPT，10页，觉得好短啊，读起来也就那样。然后自己做，赶速度，一下午做完，做完之后，逻辑不通顺，格式也不优美。然后百思不得其解，为何如此。久而久之，陷入自怨自艾的深渊，反问自己为什么就没有好的逻辑构思。整体下来，于成长无帮助。好的PPT片子需要时间。好的PPT片子需要时间。好的PPT片子需要时间。重要的话说三次。因为，我们需要时间来梳理整个故事；需要时间来决定每个环节将给听众的故事；需要时间来决定每个环节的权重。比如，是否想主要突出这个环节，还是说，这个环节的主要目的，是让听众&#x2F;读者知道有这么一回事，但是重点在后面，如果说重点在后面，那么就需要对后面的篇幅用更多的笔墨进行描述。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"产品设计体会（1）从目标出发","slug":"20200423-产品设计体会（1）从目标出发","date":"2020-04-22T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/04/22/20200423-产品设计体会（1）从目标出发/","link":"","permalink":"https://kerryli1007.github.io/2020/04/22/20200423-%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E4%BD%93%E4%BC%9A%EF%BC%881%EF%BC%89%E4%BB%8E%E7%9B%AE%E6%A0%87%E5%87%BA%E5%8F%91/","excerpt":"","text":"我记得我刚开始接触产品经理那会，有2件事让我难忘。 第一个事儿是身边的产品经理，都在讲第一性原理，本质思考。我还记得，为了弄清楚第一性原理，我特意去看了Elon Musk的演讲，到最后，我也没有明白，第一性原理，本质思考到底是什么意思。 第二个事儿是福特的故事，很多讲产品的书和文章都在讲福特的故事，说福特是一位伟大的产品经理，用户想要的是更快的马，但是福特创造出了更快的汽车。 我还记得看完这两个事例，我脑袋一懵，觉得自己基本上完蛋了，我做不了产品经理。 我拆分不来火箭的原材料，我也造不来汽车。那是2017年的事。现在回过头来看看，其实是在一些没有品味的书上，浪费了时间。因为这些没有品味的书，没有脑子的兜售概念，讲一些指不定作者自己都不明白的话，浪费读者的时间。 如今2年过去，关于上面两个事，我也有了一些体会。特此整理，梳理自己思路，也期望能帮助到像当年的我一样的迷惘、无助的少年。 这两件事，概括起来，都在讲两个字：目标。为这个目标，加一个主体，就是“用户目标”。 什么是用户目标？我们如何识别这些目标？我们如何知道它们是真实的呢？它们是否对所有用户都一样呢？它们是否随着时间发生改变呢？ 用户目标常常与我们猜测的不同。例如，我们可能会猜测一个会计的目标是高效处理发票。这可能不是事实，有效的发票处理更可能是会计雇主的目标。会计的个人目标更可能是关心自己能否显得胜任本职工作，以及在完成例行的重复任务同时保持这份工作。 不管我们所从事的工作和我们必须完成的任务是什么，我们中大多数人都有一些简单而共同的个人目标，即使我们有更高的渴望，它们与工作相关的事情相比也显得更加个人化：如获得提升，了解更多的领域知识，或者成为他人的榜样。 目标不等于任务。目标是终结条件，相反，任务只是有助于达到目标的中间步骤，目标激发人们去执行任务。不混淆任务和目标非常重要，但它们很容易搅在一起。 幸运的是，有一个方法可以非常容易区分任务和目标。目标受人的动机驱使，很难随时间的推移而改变，甚至根本不变。任务是短暂的，几乎完全基于身边的技术。例如，当从圣路易斯到旧金山旅行时，一个人的目标可能是快速、舒适和安全。在1850年，一个移民会选择大篷车旅行，并且，出于安全考虑，他会一直带着他信赖的来复枪。今天，从圣路易斯到旧金山旅行，一个商人会选择喷气式飞机，并且从安全的角度，要求他将防身武器留在家里。目标没有改变，但因为在某些方面完全相反的技术，任务发生了改变。《软件观念革命》 在上面的两个举例中： Elon Musk的目标是造火箭，实现手段可以是他直接去买零件，也可以是他直接去买原材料，自己组装，这些都是实现方式而已。 福特的用户的目标是，可以有更快的通勤工具。 所以，做产品并没有那么神奇。我觉得所有不说人话的产品经理，要么是故意装逼，要么是自己都没有整明白到底是怎么一回事。自己没有整明白是怎么回事，但是却鼓吹一些概念，我觉得这类人，是蠢。故意装逼的产品经理，倒不是蠢，就是装逼。 在苏杰的《人人都是产品经理》一书中，他讲述过这样子的一个例子 对于经常做的软件产品，用户需求是“删除数据之前需要我确认，以免误删”，转化分析之后，我们给出的产品需求可能是“数据回收站：删除的数据进入回收站，如果是误删，用户可以去回收站找回数据“。 苏杰老师的这个例子就是非常好。用户的目标是， 避免因为误操作而导致数据丢失。删除确认可以解决这个问题，同理，数据回收站也可以解决这个问题。 目标是避免数据因误操作而丢失，实现路径可以是多样的。 读经典，多读有品味的书，少读垃圾书。 参考： 1. 软件观念革命 2. 人人都是产品经理 3. First Principles: Elon Musk on the Power of Thinking for Yourself","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"CV四小龙引发的思考","slug":"CV四小龙引发的思考","date":"2020-04-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/04/21/CV四小龙引发的思考/","link":"","permalink":"https://kerryli1007.github.io/2020/04/21/CV%E5%9B%9B%E5%B0%8F%E9%BE%99%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/","excerpt":"","text":"一个现象：目前AI行业的落地，头部公司都是CV科技公司。 这里说的AI的头部公司是哪些呢？CV四小龙。分别是旷视、依图、商汤、云从。 更严格来说，这个四家公司，是CV行业的头部公司。我们知道，AI赛道，不只有CV，还有NLP、ML、ASR。 为什么没有NLP、ML、或者ASR四小龙呢？为什么CV四小龙就等于AI赛道的头部公司？ 从两个角度，尝试来回答这个问题。 1. 技术成熟度 2. 商业模式 看看各个技术领域的常用技术的SOTA。CV行业用的最多的是人脸识别，而目前人脸识别的开源效果都能做到90以上，是工业可用。 且CV有一个非常好的特点，就是，人脸数据，这类数据，不涉及商业隐私。这个和NLP、ML、ASR不一样。 比如说ML，做推荐，那需要用到的数据，都是商业核心数据，顾客信息、交易数据等。 比如说ASR，很多语音数据，语音转文本本来就贵，而且语音数据涉及到一些Domain Knowledge。一般来说，这类数据，单纯做技术的AI公司也不容易拿到。 所以，单纯做技术的AI公司，除了CV之外，下一个突破点在哪里呢？","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"实现模型和心智模型","slug":"实现模型和心智模型","date":"2020-04-21T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/04/21/实现模型和心智模型/","link":"","permalink":"https://kerryli1007.github.io/2020/04/21/%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%BF%83%E6%99%BA%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"思考一个问题：符合用户思考和工作方式的软件都是如何设计的？ 问题比较抽象，我们尝试，让这个问题不那么抽象。 将上述问题，置换为以下问题：有哪些符合用户思考和工作方式的软件呢？他们的哪些功能、设计符合用户思考和工作方式？为什么？ 想要更好的回答上述问题，我们来了解一下几个概念： 实现模型 用户心智模型 表现模型 飞机是一种近代的交通方式，其实现逻辑是空气动力学。但是，作为乘客，我们根本不关心，飞机是如何飞到天上。我们只关心，我们是否能安全、准时地达到目的地。上述提到的，飞机的实现逻辑是空气动力学，这是实现模型。而，用户关心的，是否能安全、准时地到达目的地，这是用户心智模型。 展开解释一下实现模型和用户心智模型。 实现模型 任何机器都有实现其目标的机制。例如，电影放映机使用复杂的移动图片序列来创建这种动态的感觉。它在一个瞬间让明亮的光线透过半透明的微缩图像，然后在它移向另外一副微缩图像的瞬间挡住光线，接着在下一个瞬间再次投射光线。电影放映机每秒24次放映新的图像，重复这个过程。基于软件的产品并没有这样的机制，取而代之，他们使用算法和相互通信的代码模块。这种有关机器和程序如何实现工作的表达被Donald Norman和其他人称为系统模型。 用户心智模型 从电影观众的角度来说，在观看一部引人入胜的电影时，实际上根本不知道放映机是如何工作的，或者是它工作的方式和电视有什么差异。在观众的想象里，放映机只不过是发射出在大屏幕上移动的图片而已。这就称为用户的心智模型，或者概念模型。 人们并不需要知道复杂产品的实际工作细节来掌握它的使用方法，为了便于使用，人们在认知上创建了一种简洁的解释方式，这种方式对他们与产品的交互来说已经足够，但并不一定能够反映产品实际的内部工作机制。 举一个例子，比如，云计算时代，每个人都可以上阿里云、腾讯云购买算力。按需购买，按量计费。用户从来不会关心，算力的底层硬件，也不会关心，云服务商，是通过何种技术来实现按需提供给用户算力的实现方式。 对于软件应用来说，实现模型和心智模型之间的差异非常明显。 好的契合用户心智模型的产品我一直都非常喜欢工具类产品，因为这类产品，可以辅助我开展工作，提高工作效率，或者给予我一些功能上的支持，使我能完成一些之前我不能完成的工作。 介绍一款产品，Smiple Antnotes，这款产品是一款备忘。为什么说这款产品契合用户心智模型呢？ 我们为什么需要备忘？我们需要一些提醒，并且我们希望这些提醒，我们是随时随刻都可以看见的。回想一下，我们在自己书桌上贴的备忘，这个行为我们从小学时候就有，小学时候，我们是在桌上刻字。鲁迅在三味书屋的书桌上，刻“早”，你可还记得？ 因此，我们是需要这样的备忘，我们随时都可以看见，这样来提醒我们。 Simple Antnotes就可以实现。备忘上面有一个帽钉，这个设计是模仿现实生活中，我们用帽钉让备忘贴在书桌的设计。 在Simple Antnotes，只要我们通过点击的方式，开启了这个帽钉，我们就可以让这个备忘悬浮于我们工作的软件之上，可以随时提醒我们，效果如下图。 好的设计来源于生活～多观察，多思考。","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"记职场思维的一次转变","slug":"记职场思维的一次转变","date":"2020-04-20T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/04/20/记职场思维的一次转变/","link":"","permalink":"https://kerryli1007.github.io/2020/04/20/%E8%AE%B0%E8%81%8C%E5%9C%BA%E6%80%9D%E7%BB%B4%E7%9A%84%E4%B8%80%E6%AC%A1%E8%BD%AC%E5%8F%98/","excerpt":"","text":"最近一段时间，发现自己思维方式上有了巨大的转变。终于从问题发现者，成为了一个solution发现者。 问题在工作中，偶尔会遇到比较大的困难。之前的思考方式，都是发现了这个问题，找老板求助。到现在，发现了问题，都是自己预先思考好solution。 这是我职场道路上一次思维上的变化。 solution","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"记一次推荐项目POC","slug":"记一次推荐项目POC","date":"2020-04-20T11:05:40.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/04/20/记一次推荐项目POC/","link":"","permalink":"https://kerryli1007.github.io/2020/04/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%A8%E8%8D%90%E9%A1%B9%E7%9B%AEPOC/","excerpt":"","text":"思考一个问题思考一个问题：作为AI行业的技术服务商，我们在为客户提供电商场景个性化营销的解决方案。如何向客户解释，我们的解决方案，效果好。 这是一个很有趣的问题。为什么有趣？因为，我们常用来判断一个模型好坏的衡量标准，在这个场景下，会失效。 回想一下，我们建模时候，用来衡量模型标准的指标是什么？我们用的是AUC。什么是AUC。我们来复习一下。AUC这个话题太大了，涉及到Confusion Matrix和ROC，在另外一篇文章有详细解释。 回到刚才说的，我们说在和客户解释我们模型有效的时候，将AUC会失效。为什么会失效？（其实也不是100%，但是这个概率，基本上就等于，肯定会失效） 有很多原因： 客户不懂AUC 就算客户懂AUC，但是现在是要花钱买解决方案了，所以，最好能将模型的效益置换成业务收益，简单粗暴 客户诉求合情合理。那么作为乙方，我们是要靠着服务好甲方存活的。那么，在这种场景下，我们如何告诉客户我们的模型效果更好呢？不同的手段，其差异是什么？在手段的探索上，走了哪些弯路，有哪些经验，可以总结为可复用的方法论呢？带着这些思考，我们来梳理一下自己的思路。 思路一：预测的Item与BestSeller进行比较这是一种很直观的对比方式。这个证明方式，也不是我想出来。这种方式是在一个项目中，我们客户提出来的。在这个项目中，我们的角色是丙方，乙方为了更好地向甲方解释模型的效果，用了这样的一个方式。 抽象一点解释，就是给定一个日期，随机选择10W顾客，预测这个时间段内，这10W顾客购买可能性最高的Topo 10 Item。然后用这段时间，这10W顾客中真实发生了购买的用户商品对比上我们给出的预测。 {用户1,真实购买item} &#x2F; {用户1, 预测item1}，{用户1, 预测item2}……{用户1, 预测item10} 回到很早之前聊的两个观点 这个世界上，没有什么是他原本的样子？在他出现之前，我们一定要问一问，为什么要这样设置。 人的思维都有局限性，当我们选择了A之后，一定要全面地分析与之关联的利弊。 为什么说到这两个观点，因为，思路1的这种solution，有其特定的背景，同时也有其带来的弊端。 背景该背景则是，无法和业务客户解释AUC。因此，乙方提出了这个solution。 弊端弊端是什么？不同的建模目标，建模思路是不一样的。思路一展示的是，自然购买和推荐购买。而，如果要实际投产，其实对比的是，传统营销和个性化营销。 思路二：POC在思路一的指导下，走了无数弯路，浪费了诸多资源的现状下。我才意识到，给客户做推荐，最有效的方式，就是POC，就推POC～ 我觉得就POC吧～POC最简单，最直接，最有效，最方便。 解法按照POC的目标进行建模。 产品经理在把控项目进展时候，应该对项目有整体把控。 参考资料： Classification: ROC Curve and AUC | https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"work","slug":"work","permalink":"https://kerryli1007.github.io/tags/work/"}]},{"title":"虚拟机、容器、K8S","slug":"虚拟机、容器、K8S","date":"2020-04-20T07:06:04.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2020/04/20/虚拟机、容器、K8S/","link":"","permalink":"https://kerryli1007.github.io/2020/04/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%81%E5%AE%B9%E5%99%A8%E3%80%81K8S/","excerpt":"","text":"目录： 虚拟机 容器 K8S 一、虚拟机1.1 虚拟机是什么虚拟机是什么？虚拟机是运行操作系统和应用程序的软件计算机。 先复习3个基础概念： 操作系统：Windows Ubantu 应用程序：QQ WeChat 软件计算机：和软件计算机相对应的是硬件计算机 我们要了解虚拟机，就需要了解虚拟机背后的技术虚拟化。 虚拟化是使用虚拟机管理程序软件从一台物理设备创建若干个虚拟机（vitual machine, VM）的过程。虚拟机的行为和运转方式与物理机一样，但是虚拟机会使用物理机器的计算资源，如CPU、内存和存储。虚拟管理程序会根据需要将这些计算资源分配给每个虚拟机。 思考：虚拟管理程序如何根据需要将这些计算资源分配给每个虚拟机? 1.2 虚拟机与物理机的对比 左边，可以发现，原来如果我们需要3个操作系统，那么我们也需要3个硬件 右边，可以发现，现在，我们需要3个操作系统，但是我们需要一个硬件就够了。 需要注意的是，虚拟机是直接运行在物理硬件之上。《第一本Docker书》 1.3 虚拟机为什么得到了发展 在现代计算机系统中，隔离和安全的重要性在增长。 标准操作系统安全性和可靠性的方面存在缺陷。 在云环境中，多个不相关的用户共享一台计算机。 过去10年，计算机处理大幅发展，使得虚拟机的开销降低到可接受的范围内。《计算机组成与设计硬件&#x2F;软件接口》 1.4 虚拟机的优势 最大限度使用已有服务器，虚拟机能够让一台机器像多台机器一样运行，可以节省硬件、冷却和维护成本。 不需要单独的服务器来运行传统应用和不同的操作系统类型和版本。借助虚拟化，可以在统一台机器上运行多种类型的应用、桌面和操作系统。 1.5 使用场景二、容器2.1 容器是什么容器是直接运行在操作系统内核之上的用户空间，因此容器也被称为操作系统级虚拟化。《第一本Docker书》 由于容器“客居”于操作系统，容器只能运行与底层宿主机相同或相似的操作系统，这并不灵活。比如，可以在Ubuntu服务器中运行RedHat，但是无法在Ubuntu服务器中运行Microsoft。 container就像虚拟机（vitual machine, VM）一样，除了所有的container都在一个operating system上面 2.2 容器的弊端 容器本身复杂，不易安装，管理和自动化都很困难 2.3 使用场景Case2.3.1 交付场景三、K8S3.1 K8S是什么？K8S是对容器的调度系统。 3.2 为什么要使用K8S？3.3 使用场景Case","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://kerryli1007.github.io/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"为什么要阅读","slug":"为什么要阅读","date":"2020-04-18T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/04/18/为什么要阅读/","link":"","permalink":"https://kerryli1007.github.io/2020/04/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%98%85%E8%AF%BB/","excerpt":"","text":"为什么要阅读？ 因为理解世界的运行规律本身是一件有趣的事。——虾宝 从小学到现在，我一直都有阅读的习惯。但是每读完一本书，我都有一种感觉，那就是，书是书，我是我，书并没有带给我任何收获，我也并未从书里学习到任何知识。 这个现状在最近3个月开始被打破。我也逐渐开始学会阅读。 明确一下，这里说的“学会阅读”的定义。这个“学会阅读”的意思是说，我开始懂的：将从书里阅读来的知识，进行内化，将其纳入我的知识体系，并将书里的知识，同工作&#x2F;生活进行结合 一、内化书里的知识，纳入自己的知识体系什么是知识体系呢？以及它的功能是什么？ 我理解的知识体系，是一个被整理好的知识库。他本身是一个知识库，因为被按条例整理好，因此是知识提取。 他的功能是，我们客户不断地往里面增加内容，对其进行编辑，也可以不断地从里面提取内容。 知识体系是有两种，一种是下面这种借助工具，我将知识体系具像化，这个具像化的知识体系，是我脑海里对我自身知识体系的实现。 二、融会贯通，为我所用2.1 计算机进化的目的 计算机进化的目的只有一个——与人类更加接近。想要贴近人类，就必须从计算机的处理方式中摒弃不符合人们思维习惯的部分。比如，键盘这种不好用的输入设备进化成了好用的鼠标。平面的2D游戏进化成了立体的3D游戏。无论是哪一种进化，都是为了使计算机的处理方式更加贴近人类。 根据“计算机进化的目的只有一个——与人类更加接近”这个原则，我们来聊一聊人机交互的发展史。 基于自然语言理解的语音识别与合成是现代移动通信设备不可或缺的部分。 有评论将语音识别与自然处理的理解定义为用户界面的“第三次革命”，第一次是鼠标输入的图形用户界面，第二次是触摸输入触控感知界面。 第一次革命第一次革命，是鼠标输入的图形用户界面。1963年，Douglas Engelbart发明了电脑鼠标，这书标注着人机交互新纪元的开始之年。在有鼠标之前，当用户希望与电脑交互的时候，是通过keyboard来输入terminal command。 第二次革命第二次革命，是触摸输入触控感知界面。 显示屏在很早就被用作输出设备，最近因为将触觉感知功能外加或集成到显示屏技术的兴起，显示屏开始被大量作为交互式的输入设备。 让“触摸无处不在”的大事件是2007年苹果电脑iPhone手机的发明。 第三次革命第三次革命，即语音交互。 伴随着各种移动设备使用的爆发，用户对内容、服务、功能的需求日益增长，海量信息变得难以用现有的可视化桌面管理、查找。信息很容易湮没在层级文件夹，以及各种图标之中。通常，执行单个指令，需要在不同的屏幕，以及程序的不同进展之间相互切换。比如，如果我现在想用微信给我的好朋友西蓝花发一条信息，那么我需要来回切换很多个屏幕。 在这样的背景下，语音交互带有一个强大的控制机制，可以穿过多重视觉层级、中间应用或网页。 当我们说：“给妈妈发个短信，说回家会晚一点。“程序就会知道应该先启动哪个应用程序、要把信息发给谁和发送什么信息。作为用户，也是指令的发出者，我们不用明确地提供所有信息和每个步骤。这些功能的实现，创造了一个新的UI：一个可以通过对话与用户互动并提供强大功能的虚拟助手（VA）。 2.2 情绪与社交软件在今天，使用社交软件可以说已经成为我们生活中不可获取的一部分，但是我们与社交软件的关系，你真的有认真的思考过吗？为什么当你难过、无聊的时候，你会想着打开抖音，打开微博。 在书本《有限理性适应性工具》中提到 探索人类和动物的有限理性及其适应性问题不能局限于理性的或认知的层面，还必须延续到情绪的、社会的层面。 是的，对人类的研究，一定不能只局限于局限，我们需要去看情绪，对塑造人类行为产生的作用。正如，我们沮丧失落时，很多人第一时间就会打开抖音、微博。 和情绪相关联的，是习惯，习惯在我们日常生活中的体现，是行为表现。 如果你心烦意乱时第一时间就想到Twitter，那说明习惯已经起了作用。一阵强烈的孤独感袭来，你还没有来的及作出理性思考，就已经开始在Facebook上寻找情感慰藉。一道难题摆在眼前，你还没顾得上开动自己的大脑，就已开始在Google上寻找答案。每当占据上风的，总是那些最先出现在你脑海中的选项。 如果说只讲到这里，那么我对情绪、习惯、与社交软件的相互关系，还是不够深刻的。在上面，我提到了习惯，我会在这里对习惯进行进一步讲述。 请你和我一起，去一个心理学实验室，让我们仔细观察一下，这个实验室里面的有趣实验吧～ 我们来到麻省理工学院的大脑与认知科学实验室，在这里，正在进行一场研究，这场研究的主题是，基底核是否与人的习惯密切相关。 解释一下，什么是基底核。在大脑深处，脊柱和大脑结合的位置，这里有我们大脑中最原始、最古老的结构，他控制着我们的自主行为，比如呼吸，比如吞咽。上图中，像高尔夫球一样的组织块，就是基底核。 了解什么是基底核，接下来，让我们近距离观看这场实验。 首先，实验人员在老鼠的颅腔中植入了细电线。接着，老鼠被放入了T形迷宫中，迷宫的另一端，放着一块巧克力。迷宫的设置是，将所有老鼠都放在隔板后，隔板打开后，会发出很大的咔嚓声响。老鼠听到声音，看到隔板消失，会在这个走廊里四处嗅一嗅，尝试去找巧克力在哪里。在这个过程中，老鼠的基底核非常活跃，似乎在分析每一处的味道、声音、画面。 重复上述实验几百次之后，老鼠穿越迷宫，找到巧克力的速度越来越快，同时，科学家们也发现，这个时候，老鼠的思维活动，开始减弱。这个过程，我们可以将其称为“组块化”，就是将一系列行为，变为自动的惯常行为，而这就是习惯形成的基础。 实际上，我们的习惯是由3步组成的回路。第一步，存在某种暗示，让大脑自动进入某种行为模式。第二步，存在一个惯常行为第三步，存在一个奖赏。 这就是习惯回路，当习惯出现，大脑就不再参与决策。 了解了习惯回路之后，让我们再次回到情绪、习惯、与社交软件。让我们难受时候，这种情绪对我们来说，就是一种暗示。在这种情绪的暗示下，我们会去打开社交软件。社交软件总会带我们奖赏，沙雕的视频，朋友的安慰。 三、总结阅读不是目的，将书里的知识纳入自身知识体系也不是目的，这两者都是手段，使用知识，这才是目的。让知识为我所用，这才是我们阅读的目的。重要的话说三遍，让知识为我所用，这才是阅读的目的 times 3！ 将知识点纳入自己体系也好，与工作&#x2F;生活结合也好，其实都是为了一个目的“为我所用”。 所以，Keep Reading！","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"读《人月神话》，学项目管理？","slug":"20200413-读-《人月神话》，学项目管理","date":"2020-04-12T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2020/04/12/20200413-读-《人月神话》，学项目管理/","link":"","permalink":"https://kerryli1007.github.io/2020/04/12/20200413-%E8%AF%BB-%E3%80%8A%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E3%80%8B%EF%BC%8C%E5%AD%A6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","excerpt":"","text":"作为产品经理，需要为产品研发进展负责，这部分职责，本质上是项目管理。做好项目管理的第一步，是了解项目管理中都有哪些坑。 因此，今天，我们就和IBM的资深项目经理来学习学习他的实践经验吧。 在众多软件项目中，缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来的影响还大。导致这种普遍性灾难的原因是什么呢？ 首先，我们对估算技术缺乏有效的研究，更严肃地说，这反映了一种悄无声息，但并不真实的假设——一切都将运作良好。 第二，我们采用的估算技术隐含地假设人和月可以互换，错误地将进度与工作量相互混淆。 第三，由于对自己的估算缺乏信心，软件经理通常不会有耐心地进行估算这项工作。 第四，对进度缺少跟踪和监督。其他工程领域中，经过验证的跟踪技术和常规监督程序，在软件工程中常被认为是无谓的举动。摘录自《人月神话》 接下来讨论一下软件开发中，几种常见的认知失误 一、乐观主义 所有的编程人员都是乐观主义者。无论是什么样的程序，程序员们都态度乐观：”这次它肯定会运行。“或者”我刚刚找出了最后一个错误。 所有系统编程的进度安排背后的第一个假设是：一切都将运作良好，每一项任务仅花费它所“应该”花费的时间。 对这种弥漫在编程人员中的乐观主义，理应受到慎重的分析。 思考如下： 作者讲的这一点，其实是非常有意思的。同时，也让我想到了实际工作中，出现的相同情况。在实际工作中，一般来说，需求文档是由产品经理给出，然后需求完成时间的预估是由研发人员完成，同时项目的开发，也是由研发负责执行。梳理一下这个流程中，经常出现的问题： ⚠️研发工程师无法在预估时间内完成任务 上述原因很简单，代码是人写的，不同模块，不同的逻辑，组合在一起，加上系统的复杂性，往往一个模块有改动，会影响系统的其他部分。因此，总是会有意料之外的情况发生，而这些情况一旦发生，就需要研发工程师花费时间和精力去解决，也就就会延迟原来的时间交付节点。 补充一下人月神话中对这种弥漫在编程人员中的乐观主义的阐述。 创造性活动分为三个阶段：构思、实现和交流。书籍、计算机、或者程序的出现，首先是作为一个构思或模型出现在作者的脑海中，它与时间和空间无关。接着，借助钢笔、墨水和纸，或者电线、硅片和铁氧体，在现实的时间和空间中实现它们。然后，当某人阅读书本、使用计算机和运行程序的时候，他与作者的思想相互沟通，从而创作过程得以结束。 对于创作者来说，只有在实现的过程中，才能发现构思的不完整性和不一致性。 然而，人类的构思是有缺陷的，因此总会有bug。 二、人月 第二个谬误的思考方式是在估计和进度安排中使用的工作量单位：人月成本的确随着开发产品的人数和时间的不同，有很大变化，进度却不是。 人数和时间的互换仅仅适用于以下情况：某个任务可以分解给参与人员，并且他们之间不需要相互交流。这在割小麦或收获棉花的工作中是可行的，而在系统编程中近乎不可能。 当任务由于次序上的限制不能分解时，人手的添加对进度没有帮助。无论多少个母亲，孕育一个生命都需要十个月。 [image:32EF5BE3-E3AB-40B7-A538-D10B6C40D296-649-000051602ED6265D&#x2F;D66168CB-DAC7-4D9C-90E7-24CA430E51D3.png]（完全可以分解的任务） 作者提出了一个比较新颖的观点，说人月这种衡量方式是一种错误的方式。不过，其实在实际操作中，我们也是可以想办法来解决的，因为，如果阅读《人月神话》这本书，目的只是为了让我自己知道，软件开发的项目管理中，有这么些问题，项目延期是无法解决的，那其实是否阅读这本书，价值不大。单单知道这些糟糕的情况为什么发生是远远不够的，我们需要知道，如何应对。 人手的添加对进度帮助没有进展，这个结论的前提是，当任务由于次序上的限制不能分解。但是，我们可以关注那些可以分解的任务，将其分解给对应的研发工程师。需要特别强调的是，由于这里涉及到了分工，因此，一定需要让对应的研发工程师知道，他所负责的具体任务是哪几个，这是第一步，让研发知道自己的工作界限。第二步是，如果这些研发工程师的工作中，涉及到相互影响的部分，那么可以请这些研发工程师们提前约定一种大家认可的协同方式，比如，各自的代码开发好了，然后由统一的一个人来commit。 三、系统测试 在时间进度中，顺序限制所造成的影响，没有哪个部分比单元调试和系统测试所受到的牵涉更彻底。 关于系统测试带来的影响，我们可以在之前进行时间预估的时候，就把系统测试所需要耗费的时间计算进去。这个步骤非常重要，因为，如果我们都没有为这一部分分配时间，那么我们潜意识是认为，这部分，是可以被忽略的。忽略上线测试，是一定会带来大大大大大大问题的。在笔者最近两次的产品上线中，两次产品上线都有问题，幸运的是，一次被发现了，遗憾的是，一次没有被发现。 回顾一下，这两次问题。 第一次是在官网注册流程优化完成，我们正打算上线时候，另一个部门的同事，改动了数据库。他们这个举动，导致我们官网无法注册成功，无法修改密码成功。这件事是运营同学测试时候发现的。生产环境发生这么严重的问题，影响是非常大的。如果运营同学没有测试，后果不堪设想。 第二次问题，是我们为开发者搭建了一个新的automl环境，这个环境是需要从官网上的一个特定入口跳转过去的。我当时进行了测试，但是我只是测试了这个跳转流程，这个跳转流程ok之后，我便没有进行下一步测试了，但是问题就出在这里。我们提供的产品是automl，也就是说用户可以在我们这个环境创建引擎，上传数据集，训练模型。在automl环境中，创建引擎，上传数据集，训练模型，这才是一个完整的产品使用流程，而我当时只测试了跳转流程。无疑，为后续产品上线埋坑。 所以在系统测试这里，主要是想说明两点： 1. 在时间规划上，为测试预留充足的时间 2. 测试时候，一定要全流程，不要心存侥幸，因为，每一次心存侥幸的时候，就可能会是出现问题的那一次。 四、空泛的估算 观察一下编程人员，你可能会发现，同厨师一样，某项任务的进度计划，可能受限于顾客要求的紧迫程度，但紧迫程度无法控制实际的完成情况。 为了满足顾客期望的日期而造成的不合理进度安排，在软件领域比其他的任何工程领域要普遍得多。显然我们需要两种解决方案。开发并推行生产率图表、缺陷率、估算规则等等。 在面对客户的需求时候，项目经理应该挺直腰板，坚持自己的估计，确信自己的经验和直觉总比期望派生出的结果要强得多。 软件开发领域，尤其是To B市场，项目经理或者产品经理收到来自客户的定制化需求这种情况真的是司空见惯。同时，这种需求是否被按时完成普遍伴随着可怕的后果，比如说签约成功、验收成功、续约成功。 如何避免这种情况。也是说，项目经理或者产品经理，如何掌握主动权？ 1. 一是早期在项目规划时候，项目经理或者产品经理，需要提前对项目中可能出现地各种情况进行预判。 2. 如果预判失败，那么当客户提出这个预期的时候，项目经理，也应该专业且冷静地同客户协商一个现实的完成周期。什么是现实，就是你的研发同事们，确实能保证在这个周期里完成任务。 五、重复生产的进度灾难 在重复生产的进度灾难这里，《人月神话》的作者用一个非常有意思的案例同我们讲述了重复生产的进度灾难。我也同大家分享。 当一个软件项目落后于进度时，通常的做法是什么呢？自然是加派人手。但是，这可能有所帮助，也可能无法解决问题。 我们来考虑一个例子。设想一个估计需要12个人月的任务，分配给3个成员4个月时间，在每个月的末尾安排了可测量的里程碑A、B、C、D。 现在假定两个月之后，第一个里程碑没有达到，项目经理通常会怎么做呢？ 措施：假设任务必须按时完成，假设仅仅是任务的第一个部分估计不得当，剩余了9个人月的工作量，时间还有两个月，即需要4.5个开发人员，所以需要在原来3个人的基础上增加2个人。\u0001\u0001\u0001\u0001\u0001\u0001\u0001 评价：是否项目经理这样做了，就可以解决问题了呢。实际上，这种情况，坚持把不经调整的任务在四个月内完成是灾难性的。这里会遇到两个问题 1. 聘请或者从其他团队项目中协调两位新员工，这个是需要一定的时间 2. 聘请到了新人之后，是需要对其进行培训的，培训项目的背景，这需要一定时间，同时，新人需要熟悉自己接手的代码，这也需要时间 解决上述两个问题，需要耗费大量时间，这也就决定了，项目经理新的措施，也无法解决当下的问题。 这就是除去了神话色彩的人月。 阅读到这里的我，对工作中发生的许多，很奇怪的delay，突然开始理解。但是，正如我原文提到了，仅仅了解背后的原因是不够的，我们还需要思考如何解决这些遇到的问题。 对于一些问题，根据我过往的经验，我是能够解答。但是，对于另外一些问题，我暂时无法解答，这个需要时间，为我带来更多经验的积累，同时，也是提示我，需要继续阅读《人月神话》这本书，同智慧的人对话，穿越时空，寻找答案。","categories":[{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"如何写出一份结构化的PRD","slug":"如何写出一份结构化的PRD","date":"2020-02-19T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2020/02/19/如何写出一份结构化的PRD/","link":"","permalink":"https://kerryli1007.github.io/2020/02/19/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E4%BB%BD%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84PRD/","excerpt":"","text":"为什么会写这个主题？ 由于公司组织结构调整，我换到了另一个部门，并且承担新部门官网设计的产品工作，到这里，我成为了一名正式的PM，从Project Manager，到PProduct Manager。 作为PM，需要设计产品，写PRD文档。 优秀的产品经理，一定会写一份优秀的PRD。 本文主题，围绕我写的第一份PRD文档。我会将V1版本，和最终交付版本进行对比，从而阐明主题，如何写出一份结构化的PRD文档。 对V1和最终交付版本PRD的比较，会从下面两个维度展开比对： 格式 产品逻辑 在回顾的过程中，也会顺带对评审会时候大家讨论的一些产品细节，进行复盘思考。 介绍一下背景：部门官网有待优化，因此，我需要给出产品优化文档。 我首先参考了网上的一个官网注册登录需求文档，写了第一版的PRD。写完后，发给了组长，组长给了反馈：觉得我写的比较像流水账，像是意识流，不够结构化。接着，他给了一份PRD文稿模版。 关于“结构化”这里比较有意思，虾宝给了如下建议： 1. 什么是结构化？结构化是拆分组块业务逻辑 2. 文字是脑子的表现，写得不清晰，不是文档的问题，是对业务逻辑的理解不够 同时，虾宝建议： 1. 可以先找研发对一下需求，连接上下游的关系。然后再写，把层次关系梳理出现，再用图表或流程图表现 虾宝的建议，对我非常有启发。如果说PRD模版给我的是一个框架，框架可以让我有地方填东西。虾宝给的反馈，让我懂得了如何思考。通过思考，将经过梳理的内容正确地填进框架之中。单有框架是远远不够的，还需要，知道思考如何把内容填进框架中。 拆分组块业务逻辑，梳理业务上下游。这是思考的方式。 于此时，我终于开始知道了如何正确地用PRD文档来表达我的需求。下面，我会仔细描述一下修改后的PRD文档以及在评审会时候大家的讨论，通过这个描述，梳理总结出正确的思考表达逻辑。 目录 产品背景 背景概述 问题和机会（可选） 产品目标与范围（可选） 名次解释 产品综述 用户故事 需求详述 评审记录 其他问题描述 对于每一个小模块，我都会分别从3个方面阐述：含义解释、PRD描述正文、以及注释。 含义解释是从定义上界定该模块需要描述的内容，PRD描述正文是PRD文档中我对该模块的详细展开，注释是解释为什么PRD描述正文会这样展开，背后的思考逻辑。 一、产品背景1.1 背景概述含义解释：背景概述是用简单的语言大概概括一下大的背景，让人知道我们本次要讲的内容大概是什么。 描述正文：官网为用户提供产品试用，目前，完整的试用流程如下：用户在官网进行注册，填写申请试用表单。商务（运营）在管理后台，对用户的申请进行授权操作（允许&#x2F;拒绝）。 注释：这样的背景描述，是将云官网，本次的产品需求，用业务流程串联起来，从前端到后端。从业务流程出发，将业务串联起来，这是一种非常好的方式。用一个事件，将涉及的所有产品功能都串联起来，让本次讨论有主线。 1.2 问题与机会含义解释：问题与机会描述我们希望通过这个产品需要解决的问题，或者是我们正在寻求的机遇。一般来说，这段话的作用在于让人阅读后明白我们为什么要花时间做这件事，以及明白了这件事的意义所在。重点在WHY，关于WHY的重要性，大家可以看一个演讲叫做How great leaders inspire action。 1.2.1 当前流程存在如下问题描述正文：1）用户端（官网）： * 试用注册流程繁琐 * 试用申请表单无法支持用户身份区别（企业&#x2F; 个人） * 未申请试用的用户进入到控制台，无任何提示2）运营端（管理后台） * 无法查看用户申请试用的时间 * 不支持运营就试用用户跟进做记录 * 需要为每个申请试用的用户手动开通账号 注释：在这里我将问题进行了拆分，将前端与后端做分别描述。 1.2.2 我们的优化目标&#x2F;机会描述正文：通过优化，让来到官网的用户，可以体验良好的进行注册、申请试用产品。 注释：目标的制定，如果按照管理大师德鲁克在《管理实践》中提出的目标管理方法原则来制定，更好。顺便回顾一下，德鲁克提出的SMART目标计划 目标要具体 目标要可衡量 目标要可实现 目标要相关 目标要有实现性 1.3 边界界定含义解释：明确界定产品规划的界限，列出不在此次版本产品规划之内的需求。有利于在未来讨论时不用反复出现“那我们做不做这个？做不做那个”的讨论。 描述正文：暂无 注释：值得说明的一点，其实有时候，设计资源、研发资源也会左右边界的界定。 2. 名词解释（可选）含义解释：名词解释表，用于列举和解释PRD文档中产生的新名词。这一点实在是太重要了，如果在PRD文稿中出现了大家不知道含义的名词，那就是一份非常糟糕的PRD。 3. 产品综述名词解释：产品需求指从用户的视角撰写的声明。例如“我希望通过这个产品我可以实现……”它不需要包含具体的实施细节，也不需要写具体的界面元素。它们只是对于产品成功的一些具体表现。 描述正文：暂无 注释：在产品需求这里的定义值得细细分析，产品需求是说，从用户的角度出发，希望通过这个产品可以实现，而不是简单的功能描述！ 4. 用户故事名词解释：每个用户故事是描述了一段独立的end-to-end的使用体验。它包括：用户画像（persona），使用场景（context), 使用意图（intent), 步骤（flow), 产品价值（value, 产品如何帮助用户实现价值），以及优先级（priority）一般优先级最高的进入MVP（minimal viable product), 然后依次类推，优先级最低的进入backlog，大家有空有资源再考虑实现。 描述正文：暂无 5. 需求详述5.1 需求一 在试用注册流程简化，同事小A提出了疑问：“当判断用户是否登陆时，如何用户未登陆，那么应该跳转到登录页面，而不是注册页面。” 我对此进行了解释，但解释比较糟糕，并没有很好地defend myself： 我们官网To B，受众小，其实是没有什么用户来注册的。 如果用户已有账号，网站支持登录状态保持，那么其实不需要重新登录 因此，我将判断未登陆的用户，下一个页面是注册页面。 显然，我的解释，并不能让小A满意，他补充到： 第一，我们目前官网逻辑的都是跳转到登录页 第二，网站支持的登录保持状态，其实也是有时效性的 当这里，我其实有点不知道怎么解释我的观点了。同事小B帮我解释： 目前我们官网的注册用户比较少，绝大部份来到官网的用户，都是新用户，大家都需要注册，我理解这个设计逻辑是以优化新用户注册流程为导向的 听到同事小B的解释，我都要泪流满面了。他准确地表达出了，我没有表达出的意思。 我讲第一点，我们官网目前没有什么用户是已注册的，表达的意思就是，目前来官网的用户，大部分都是新用户，新用户需要经过注册、登录，才能申请试用我们的产品，因此我们的目标是降低新用户试用我们产品的门槛。 暂停一下，我再放慢速度，重新回复回顾一下，这里的思考逻辑。 为什么我要设计这样的产品，我是设计给谁使用的，来到我们网站的用户，他们是谁？他们为什么来？按照这个思考方式，我重新来阐述一下我的思路。 我们的网站To B，目前存量用户少。我们的需求是，通过运营活动，或者自然流量，来到官网的用户，能够在最快时间内完成申请试用，只有试用了我们的产品，才有可能推进下一步。同时，每增加一个步骤，用户就会减少一些。因此，我的设计原则是，通过减少注册环节，来尽可能得提高注册成功率。 分解一下：目标： 缩短注册流程，尽可能地让来到官网的用户都注册。逻辑：每多一个环节，用户就大量流失我的操作 ：将用户链接到注册页面 对上一个争论点复盘完毕，我们来看下一个争论点。 用户完成注册后自动登录，是否会跳转会产品试用页面。 在这个产品设计实现的前提是，用户注册之后，会自动登录。我先去看看，这个自动登录的功能是如何实现的注册成功后自动登录 - ThinkPHP5.1 - php中文网博客 注册后自动登录这个功能技术上是完全可以实现。但是，自动登录后是否需要跳回申请试用页面？这是我们讨论的重点，另一位同事提出，不需要，这个对开发的工作量要求比较大。并且，不跳转回试用页面，用户自己回去点击试用，其实也没有很大区别。这里哦，其实是因为我在设计产品流程的时候，没有考虑工作量。这从侧面确实是说明我在这一块知识积累不充足。需要有一定改进。（产品经理也需要站在研发的角度考虑问题奥！） 5.2 需求二 讲述优化后的产品试用申请，我的逻辑是，先给大家展示原来的申请试用页面，然后讲述修改版本后的申请试用页面。通过最近的工作，我发现，对比在产品经理的工作中是非常重要的一部分。因此，产品经理的工作，很多时候都是在对原有流程，做完善和优化。既然是完善和优化，那么产品经理就需要向运营、向研发证明，为什么这样的修改，相较于原来的流程，更好。因此，对比是与研发和运营沟通中，非常重要的一点。产品经理要让运营知道，修改后的产品逻辑，可以更好的支持业务运转；产品经理也要让研发知道，修改后的产品逻辑，是更有价值的，并没有浪费研发的工作，并没有让他们的汗白流（在被组长说了几次之后，终于有的领悟，心酸 我总的讲述逻辑是没有问题的，但一个小问题在于，在讲解修改版本后的申请试用页面的时候，没有逻辑。重温一下，《金字塔原理》里面的讲述逻辑，在我们写文章或者讲述业务时候，我们的思想必须符合以下原则： 画重点，我们必须有明确的理由说明，为什么要把第二个原因放在第二个，而不是放在第一个或者第三个。为什么说这个呢？因为在讲述申请试用页面的修改时候，我的讲述是没有逻辑的，让我们来看看我在会上的讲述是多么没有逻辑： 第一个点，对联系电话进行了删除第二个点，添加了身份属性，企业用户和个人用户接下来对企业用户身份属性和个人用户身份属性进行了分别描述 更好的讲述逻辑示例是什么？ 我将从增删两个角度来说明，我们对该申请试页面的修改。 在增加部分，我们添加了身份属性，企业用户和个人用户。在删除部分，我们将联系电话进行了删除。 接下来，分别说一下增加和删除的背后逻辑。增加身份属性，是为了方便运营开展工作，删除联系方式是因为在注册环节，用户已经填写过联系电话，并且通过验证。 总分的方式，首先让大家知道我描述的总体内容是什么，界定范围，给听众安全感，然后分点描述，这才是更好的描述方式。 接下来示例如下： 用户可以在身份属性这里，对个人的身份属性做选择。当选择企业用户时候，当前默认页面不做变化；当选择个人用户时候，当前默认页面做变化；相对应的最下方的三个输入框会进行变化，分别变成： 研究方向 身份 您期待产品为您解决什么样的问题？ 在研究方向这里的讲述没有什么好复盘的，重点来看看身份这里。身份选项这里我在评审会上的讲述，堪称灾难，毫无逻辑。会后反思，我应该首先介绍，身份这里的产品设计是什么，接着再描述为什么要有身份这个设计。 示例如下： 在身份设计，我们通过下拉框的方式，提供给个人用户两个选项“ 在校&#x2F;在职”。个人用户的身份属性字段，是为了方便运营工作的开展，在校和在职身份，可以辅助后续的用户画像分析，对两个维度有帮助 用户付费能力分析 拉新渠道质量分析 注释：如果我的讲述逻辑是，产品功能设计是什么，设计这样产品功能的背后逻辑，那么我的讲述就会更简洁明了，提高同事的体验 本来还想继续写，但是涉及业务层面的知识太多了，讲解起来非常费力，就写到这里吧～以后有时间再继续更新。 总结一下，如何写一份结构化的PRD？思考原则：拆分组块业务逻辑，梳理业务上下游。","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"Santander Customer Transaction Prediction","slug":"Santander-Customer-Transaction-Prediction","date":"2019-07-07T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2019/07/07/Santander-Customer-Transaction-Prediction/","link":"","permalink":"https://kerryli1007.github.io/2019/07/07/Santander-Customer-Transaction-Prediction/","excerpt":"","text":"目录 业务背景 定义问题 相关包导入 EDA 特征工程 模型建立 预测结果 业务背景Santander 是一家银行，Santander的数据科学家，一直在通过二分类回答如下问题：我们的消费者满意吗？消费者会买这个产品吗？消费者能支付该贷款吗？这样的问题。 本次比赛，参赛选手的任务是在不考虑消费金额的前提下，预测消费者是否会在未来某个时间点做出某笔交易。 定义问题和业务流程目标本赛题，本质上是一个二分类问题，预测消费者是否会在未来某个时间点做出某笔交易。目标是预测target 列的值，比赛的输出为0或1。 变量本次比赛，提供给参赛选手的数据集是处理后的脱敏数据集，主要包括三个类别： 数字特征变量（合计200个维度） target列 ID_code 测评指标比赛的测评标准是AUC。 业务流程 首先，探索数据，做好特征工程 接着，选择合适的二分类模型 最后，对模型进行优化 相关包导入1234import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport seaborn as sns EDA1ls 1.txt Santander Customer Transaction Prediction.ipynb Untitled.ipynb Untitled1.ipynb \u001b[31mfor_lqy.ipynb\u001b[m\u001b[m* idx.npy \u001b[34mimg\u001b[m\u001b[m/ real_test.npy \u001b[31mtest.csv\u001b[m\u001b[m* \u001b[31mtrain.csv\u001b[m\u001b[m* 12train = pd.read_csv(&#x27;train.csv&#x27;)test = pd.read_csv(&#x27;test.csv&#x27;) 12print(train.shape)print(train.head()) (200000, 202) ID_code target var_0 var_1 var_2 var_3 var_4 var_5 var_6 \\ 0 train_0 0 8.9255 -6.7863 11.9081 5.0930 11.4607 -9.2834 5.1187 1 train_1 0 11.5006 -4.1473 13.8588 5.3890 12.3622 7.0433 5.6208 2 train_2 0 8.6093 -2.7457 12.0805 7.8928 10.5825 -9.0837 6.9427 3 train_3 0 11.0604 -2.1518 8.9522 7.1957 12.5846 -1.8361 5.8428 4 train_4 0 9.8369 -1.4834 12.8746 6.6375 12.2772 2.4486 5.9405 var_7 ... var_190 var_191 var_192 var_193 var_194 var_195 \\ 0 18.6266 ... 4.4354 3.9642 3.1364 1.6910 18.5227 -2.3978 1 16.5338 ... 7.6421 7.7214 2.5837 10.9516 15.4305 2.0339 2 14.6155 ... 2.9057 9.7905 1.6704 1.6858 21.6042 3.1417 3 14.9250 ... 4.4666 4.7433 0.7178 1.4214 23.0347 -1.2706 4 19.2514 ... -1.4905 9.5214 -0.1508 9.1942 13.2876 -1.5121 var_196 var_197 var_198 var_199 0 7.8784 8.5635 12.7803 -1.0914 1 8.1267 8.7889 18.3560 1.9518 2 -6.5213 8.2675 14.7222 0.3965 3 -2.9275 10.2922 17.9697 -8.9996 4 3.9267 9.5031 17.9974 -8.8104 [5 rows x 202 columns] 总结： 训练集中一共有200000条数据 训练集中一共有202列数据 训练集中的特征一共有200列，特征有200维。 12print(test.shape)print(test.head()) (200000, 201) ID_code var_0 var_1 var_2 var_3 var_4 var_5 var_6 \\ 0 test_0 11.0656 7.7798 12.9536 9.4292 11.4327 -2.3805 5.8493 1 test_1 8.5304 1.2543 11.3047 5.1858 9.1974 -4.0117 6.0196 2 test_2 5.4827 -10.3581 10.1407 7.0479 10.2628 9.8052 4.8950 3 test_3 8.5374 -1.3222 12.0220 6.5749 8.8458 3.1744 4.9397 4 test_4 11.7058 -0.1327 14.1295 7.7506 9.1035 -8.5848 6.8595 var_7 var_8 ... var_190 var_191 var_192 var_193 var_194 \\ 0 18.2675 2.1337 ... -2.1556 11.8495 -1.4300 2.4508 13.7112 1 18.6316 -4.4131 ... 10.6165 8.8349 0.9403 10.1282 15.5765 2 20.2537 1.5233 ... -0.7484 10.9935 1.9803 2.1800 12.9813 3 20.5660 3.3755 ... 9.5702 9.0766 1.6580 3.5813 15.1874 4 10.6048 2.9890 ... 4.2259 9.1723 1.2835 3.3778 19.5542 var_195 var_196 var_197 var_198 var_199 0 2.4669 4.3654 10.7200 15.4722 -8.7197 1 0.4773 -1.4852 9.8714 19.1293 -20.9760 2 2.1281 -7.1086 7.0618 19.8956 -23.1794 3 3.1656 3.9567 9.2295 13.0168 -4.2108 4 -0.2860 -5.1612 7.2882 13.9260 -9.1846 [5 rows x 201 columns] 总结： 训练集中一共有200000条数据 训练集中一共有201列数据，和train相比较，少一列label 训练集中的特征一共有200列，即特征有200维。 对train进行EDA1train.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 200000 entries, 0 to 199999 Columns: 202 entries, ID_code to var_199 dtypes: float64(200), int64(1), object(1) memory usage: 308.2+ MB 总结： train一共有20000条，共占内存308MB 数据类型一共有3类：浮点（200列）、整数（1列），对象（1列） 1train.isnull().sum().sum() 0 总结： train中不存在NA，说明train中的数据集不需要我们进行任何填充，比较方便 1train.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th &#123; vertical-align: top; &#125; .dataframe thead th &#123; text-align: right; &#125; target var_0 var_1 var_2 var_3 var_4 var_5 var_6 var_7 var_8 ... var_190 var_191 var_192 var_193 var_194 var_195 var_196 var_197 var_198 var_199 count 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 ... 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 200000.000000 mean 0.100490 10.679914 -1.627622 10.715192 6.796529 11.078333 -5.065317 5.408949 16.545850 0.284162 ... 3.234440 7.438408 1.927839 3.331774 17.993784 -0.142088 2.303335 8.908158 15.870720 -3.326537 std 0.300653 3.040051 4.050044 2.640894 2.043319 1.623150 7.863267 0.866607 3.418076 3.332634 ... 4.559922 3.023272 1.478423 3.992030 3.135162 1.429372 5.454369 0.921625 3.010945 10.438015 min 0.000000 0.408400 -15.043400 2.117100 -0.040200 5.074800 -32.562600 2.347300 5.349700 -10.505500 ... -14.093300 -2.691700 -3.814500 -11.783400 8.694400 -5.261000 -14.209600 5.960600 6.299300 -38.852800 25% 0.000000 8.453850 -4.740025 8.722475 5.254075 9.883175 -11.200350 4.767700 13.943800 -2.317800 ... -0.058825 5.157400 0.889775 0.584600 15.629800 -1.170700 -1.946925 8.252800 13.829700 -11.208475 50% 0.000000 10.524750 -1.608050 10.580000 6.825000 11.108250 -4.833150 5.385100 16.456800 0.393700 ... 3.203600 7.347750 1.901300 3.396350 17.957950 -0.172700 2.408900 8.888200 15.934050 -2.819550 75% 0.000000 12.758200 1.358625 12.516700 8.324100 12.261125 0.924800 6.003000 19.102900 2.937900 ... 6.406200 9.512525 2.949500 6.205800 20.396525 0.829600 6.556725 9.593300 18.064725 4.836800 max 1.000000 20.315000 10.376800 19.353000 13.188300 16.671400 17.251600 8.447700 27.691800 10.151300 ... 18.440900 16.716500 8.402400 18.281800 27.928800 4.272900 18.321500 12.000400 26.079100 28.500700 8 rows × 201 columns 总结： 在train中，target中的1和0的label占比约为：1占比10%；0占比90%。 分析： label为1占比10%，label为0占比90%，说明数据存在偏态分布，业务意义是说有过购买行为的1占比10%而已。 1234df1 = train[train[&#x27;target&#x27;] == 0]df2 = train[train[&#x27;target&#x27;] == 1]features = train.columns.values[2:] 分析： 因为label存在 1 和 0 两种状态，我们可以将label为 0 和label为 1 的observation分开，将其进行对比，看其的features之间，是否存在区别。 为了完成上述目标，我们需要进行 2 步操作 将train分为2部分，一部分是label为1的DataFrame，另一部分是label为0的DataFrame。 因为要对比的是features，因此，我们从DataFrame中将features names取出来。 完成上述2步操作之后，让我们来看看 df1 和 df2 之间的区别吧。 首先我们尝试通过 df.describe() 来探索 12print(df1.describe())print(df2.describe()) target var_0 var_1 var_2 var_3 \\ count 179902.0 179902.000000 179902.000000 179902.000000 179902.000000 mean 0.0 10.626681 -1.695770 10.665876 6.788979 std 0.0 3.008564 4.024813 2.612961 2.040082 min 0.0 0.408400 -15.043400 2.117100 -0.040200 25% 0.0 8.429500 -4.790775 8.698025 5.247625 50% 0.0 10.478600 -1.682600 10.529000 6.817000 75% 0.0 12.693075 1.287700 12.463900 8.317875 max 0.0 20.315000 10.376800 19.353000 13.188300 var_4 var_5 var_6 var_7 \\ count 179902.000000 179902.000000 179902.000000 179902.000000 mean 11.072412 -5.146736 5.389620 16.549306 std 1.620103 7.827522 0.857983 3.417700 min 5.074800 -32.562600 2.347300 5.349700 25% 9.880600 -11.260950 4.756425 13.950125 50% 11.104400 -4.917700 5.364400 16.460850 75% 12.253100 0.844600 5.981300 19.108800 max 16.671400 17.251600 8.447700 27.691800 var_8 ... var_190 var_191 \\ count 179902.000000 ... 179902.000000 179902.000000 mean 0.262347 ... 3.149130 7.390800 std 3.331105 ... 4.522568 2.997847 min -10.505500 ... -14.093300 -2.691700 25% -2.342575 ... -0.111850 5.130825 50% 0.371400 ... 3.117250 7.297000 75% 2.919300 ... 6.296375 9.461300 max 10.151300 ... 18.440900 16.716500 var_192 var_193 var_194 var_195 \\ count 179902.000000 179902.000000 179902.000000 179902.000000 mean 1.949017 3.355403 18.017716 -0.155601 std 1.476456 3.982819 3.127715 1.422275 min -3.814500 -10.845500 8.694400 -5.261000 25% 0.915300 0.612400 15.656700 -1.178700 50% 1.928950 3.417550 17.982400 -0.184200 75% 2.969800 6.217075 20.417500 0.813000 max 8.402400 18.281800 27.928800 4.272900 var_196 var_197 var_198 var_199 count 179902.000000 179902.000000 179902.000000 179902.000000 mean 2.260297 8.919032 15.924058 -3.415273 std 5.441118 0.917467 2.978539 10.434525 min -14.209600 5.960600 6.299300 -38.852800 25% -1.987375 8.262100 13.896000 -11.312025 50% 2.359700 8.897700 15.988500 -2.914000 75% 6.513425 9.601500 18.095400 4.741400 max 18.321500 12.000400 26.079100 28.500700 [8 rows x 201 columns] target var_0 var_1 var_2 var_3 \\ count 20098.0 20098.000000 20098.000000 20098.000000 20098.000000 mean 1.0 11.156418 -1.017613 11.156633 6.864113 std 0.0 3.270293 4.220638 2.841075 2.070898 min 1.0 0.452800 -14.037000 2.946200 0.374000 25% 1.0 8.695875 -4.203475 8.961125 5.314300 50% 1.0 11.001350 -0.992650 11.096700 6.900200 75% 1.0 13.343700 2.001375 13.047025 8.384725 max 1.0 19.458300 9.029800 18.294100 12.706900 var_4 var_5 var_6 var_7 var_8 \\ count 20098.000000 20098.000000 20098.000000 20098.000000 20098.000000 mean 11.131337 -4.336522 5.581966 16.514917 0.479432 std 1.649266 8.140281 0.922442 3.421365 3.340028 min 5.876200 -28.246100 2.496000 7.302400 -9.839100 25% 9.911250 -10.615800 4.882250 13.880125 -2.107425 50% 11.156300 -4.101950 5.601800 16.412700 0.579600 75% 12.328450 1.619950 6.218550 19.044250 3.127825 max 15.692500 16.423600 8.285200 27.039800 9.033000 ... var_190 var_191 var_192 var_193 \\ count ... 20098.000000 20098.000000 20098.000000 20098.000000 mean ... 3.998064 7.864560 1.738266 3.120260 std ... 4.814830 3.210779 1.482537 4.067550 min ... -11.906900 -2.343000 -3.317700 -11.783400 25% ... 0.466025 5.418550 0.669775 0.343000 50% ... 4.017500 7.846550 1.667500 3.176700 75% ... 7.407925 10.018400 2.749050 6.063825 max ... 16.746100 16.520500 7.647600 17.150400 var_194 var_195 var_196 var_197 var_198 \\ count 20098.000000 20098.000000 20098.000000 20098.000000 20098.000000 mean 17.779568 -0.021130 2.688583 8.810815 15.393283 std 3.193153 1.485975 5.556892 0.952554 3.248123 min 10.120700 -5.018500 -14.020400 6.119000 6.558700 25% 15.420025 -1.103950 -1.572225 8.155250 13.232500 50% 17.730500 -0.057350 2.831050 8.795400 15.427950 75% 20.201800 0.986450 6.956250 9.517000 17.776425 max 27.295300 4.088100 17.161400 11.706900 25.857100 var_199 count 20098.000000 mean -2.532243 std 10.435910 min -38.852800 25% -10.285050 50% -1.971850 75% 5.701475 max 24.564600 [8 rows x 201 columns] 总结： 很明显，数据描述，无法可视化出df1和df2的区别。 换个思路，可以采取数据可视化，来查看两个df之间的feature分布形状，是否存在差异 思考，在绘制两个df的对比图的时候，是选用条形图，还是折线图。 折线图是表现随着时间的变化，数据的变化 条形图是表现数量 因此，对比时候，选择条形图 对test进行EDA1test.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 200000 entries, 0 to 199999 Columns: 201 entries, ID_code to var_199 dtypes: float64(200), object(1) memory usage: 306.7+ MB 总结： train一共有20,000条，共占内存308MB 数据类型一共有3类：浮点（200列），对象（1列）,其中ID_code是的字段信息是对象。 123456789plt.figure(figsize = (16,6))features = train.columns.values[2:]plt.title(&#x27;Distribution of mean values per row comparing df1 and df2&#x27;)sns.distplot(df1[features].mean(axis = 1), color =&#x27;green&#x27;, kde = True, bins =200, label = &#x27;df1&#x27;)sns.distplot(df2[features].mean(axis = 1), color =&#x27;blue&#x27;, kde = True, bins =200, label = &#x27;df2&#x27;)plt.legend()plt.show() /anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval 总结： 从上图可以看出，相比df1，df2的数值分布更加右倾 1train.nunique().sort_values() target 2 var_68 451 var_91 7962 var_108 8525 var_103 9376 var_12 9561 var_148 10608 var_161 11071 var_71 13527 var_25 14853 var_43 15188 var_125 16059 var_166 17902 var_169 18242 var_133 19236 var_15 19810 var_131 21464 var_23 24913 var_34 25164 var_93 26708 var_95 29387 var_42 31592 var_50 32308 var_126 32411 var_98 33266 var_53 33460 var_57 35545 var_28 35859 var_130 36638 var_59 37744 ... var_118 143667 var_19 144180 var_83 144281 var_137 144397 var_158 144556 var_54 144776 var_82 144829 var_184 145184 var_178 145235 var_30 145977 var_102 146237 var_96 148099 var_149 148504 var_182 149195 var_199 149430 var_100 150727 var_48 152039 var_70 153193 var_47 154781 var_160 156274 var_136 156615 var_187 157031 var_90 157210 var_120 158269 var_97 158739 var_61 159369 var_74 161058 var_117 164469 var_45 169968 ID_code 200000 Length: 202, dtype: int64 总结： 我们发现变量var_68这个变量很特殊，只有451个。 特征相关性分析接着，我们看一下每个特征和label的相关度，便于我们进一步了解特征的重要程度。 1train.corr()[&#x27;target&#x27;].abs().sort_values() var_185 0.000053 var_27 0.000582 var_30 0.000638 var_17 0.000864 var_38 0.000970 var_41 0.001298 var_126 0.001393 var_103 0.001395 var_10 0.002213 var_100 0.002215 var_117 0.002591 var_7 0.003025 var_96 0.003037 var_136 0.003554 var_158 0.003817 var_98 0.004074 var_39 0.004090 var_161 0.004168 var_124 0.004218 var_29 0.004682 var_160 0.005135 var_183 0.005467 var_46 0.005690 var_129 0.005880 var_60 0.006265 var_14 0.006332 var_73 0.006460 var_153 0.007103 var_182 0.007198 var_61 0.007407 ... var_40 0.049530 var_109 0.049926 var_179 0.050002 var_115 0.050174 var_1 0.050343 var_0 0.052390 var_34 0.052692 var_198 0.053000 var_133 0.054548 var_148 0.055011 var_13 0.055156 var_165 0.055734 var_2 0.055870 var_190 0.055973 var_80 0.057609 var_166 0.057773 var_99 0.058367 var_21 0.058483 var_22 0.060558 var_174 0.061669 var_76 0.061917 var_26 0.062422 var_53 0.063399 var_146 0.063644 var_110 0.064275 var_6 0.066731 var_12 0.069489 var_139 0.074080 var_81 0.080917 target 1.000000 Name: target, Length: 201, dtype: float64 总结： 相关性最小的是变量var_185,其相关性是0.000053 相关性最大的是变量var_81,其相关性是0.080917 特征工程将相关性不高的特征去掉 12345train_x = train.drop([&#x27;ID_code&#x27;,&#x27;var_185&#x27;,&#x27;var_27&#x27;,&#x27;var_30&#x27;,&#x27;var_17&#x27;,&#x27;var_38&#x27;, &#x27;var_41&#x27;,&#x27;var_126&#x27;,&#x27;var_103&#x27;,&#x27;target&#x27;],axis = 1)test_x = test.drop([&#x27;ID_code&#x27;,&#x27;var_185&#x27;,&#x27;var_27&#x27;,&#x27;var_30&#x27;,&#x27;var_17&#x27;,&#x27;var_38&#x27;, &#x27;var_41&#x27;,&#x27;var_126&#x27;,&#x27;var_103&#x27;],axis = 1)train_y = train[&#x27;target&#x27;] 模型训练123456789101112131415from sklearn.model_selection import train_test_splitimport lightgbm as lgblgb_model = lgb.LGBMClassifier( boosting_type=&quot;gbdt&quot;, num_leaves=30, reg_alpha=0, reg_lambda=0., max_depth=-1, n_estimators=2500, objective=&#x27;binary&#x27;,metric= &#x27;auc&#x27;, subsample=0.9, colsample_bytree=0.7, subsample_freq=1, learning_rate=0.1, random_state=2018)#模型训练X_train, X_test, Y_train, Y_test= train_test_split(train_x, train_y, test_size=0.2,random_state=0)lgb_model.fit(X_train, Y_train,eval_set=[(X_train, Y_train),(X_test, Y_test)], early_stopping_rounds=100,verbose=1)#模型预测1，预测概率 [1] training&#39;s auc: 0.667923 valid_1&#39;s auc: 0.655931 Training until validation scores don&#39;t improve for 100 rounds. [2] training&#39;s auc: 0.700055 valid_1&#39;s auc: 0.680243 [3] training&#39;s auc: 0.722262 valid_1&#39;s auc: 0.701922 [4] training&#39;s auc: 0.743563 valid_1&#39;s auc: 0.720751 [5] training&#39;s auc: 0.751368 valid_1&#39;s auc: 0.729526 [6] training&#39;s auc: 0.768131 valid_1&#39;s auc: 0.743963 [7] training&#39;s auc: 0.779217 valid_1&#39;s auc: 0.753297 [8] training&#39;s auc: 0.784602 valid_1&#39;s auc: 0.758284 [9] training&#39;s auc: 0.789159 valid_1&#39;s auc: 0.76161 [10] training&#39;s auc: 0.794783 valid_1&#39;s auc: 0.766658 [11] training&#39;s auc: 0.801477 valid_1&#39;s auc: 0.772359 [12] training&#39;s auc: 0.807318 valid_1&#39;s auc: 0.777839 [13] training&#39;s auc: 0.811805 valid_1&#39;s auc: 0.782093 [14] training&#39;s auc: 0.81645 valid_1&#39;s auc: 0.787162 [15] training&#39;s auc: 0.819791 valid_1&#39;s auc: 0.789338 [16] training&#39;s auc: 0.823462 valid_1&#39;s auc: 0.792981 [17] training&#39;s auc: 0.826694 valid_1&#39;s auc: 0.795185 [18] training&#39;s auc: 0.82971 valid_1&#39;s auc: 0.796471 [19] training&#39;s auc: 0.833108 valid_1&#39;s auc: 0.798868 [20] training&#39;s auc: 0.83615 valid_1&#39;s auc: 0.801453 [21] training&#39;s auc: 0.839248 valid_1&#39;s auc: 0.803501 [22] training&#39;s auc: 0.842092 valid_1&#39;s auc: 0.80569 [23] training&#39;s auc: 0.844132 valid_1&#39;s auc: 0.806768 [24] training&#39;s auc: 0.846149 valid_1&#39;s auc: 0.80737 [25] training&#39;s auc: 0.848712 valid_1&#39;s auc: 0.809792 [26] training&#39;s auc: 0.851083 valid_1&#39;s auc: 0.812077 [27] training&#39;s auc: 0.853398 valid_1&#39;s auc: 0.813731 [28] training&#39;s auc: 0.855374 valid_1&#39;s auc: 0.815894 [29] training&#39;s auc: 0.857196 valid_1&#39;s auc: 0.817552 [30] training&#39;s auc: 0.859382 valid_1&#39;s auc: 0.819105 [31] training&#39;s auc: 0.861022 valid_1&#39;s auc: 0.820354 [32] training&#39;s auc: 0.863121 valid_1&#39;s auc: 0.822139 [33] training&#39;s auc: 0.86467 valid_1&#39;s auc: 0.823563 [34] training&#39;s auc: 0.866346 valid_1&#39;s auc: 0.824579 [35] training&#39;s auc: 0.868063 valid_1&#39;s auc: 0.825775 [36] training&#39;s auc: 0.869377 valid_1&#39;s auc: 0.826982 [37] training&#39;s auc: 0.871411 valid_1&#39;s auc: 0.828624 [38] training&#39;s auc: 0.872762 valid_1&#39;s auc: 0.829544 [39] training&#39;s auc: 0.873784 valid_1&#39;s auc: 0.83038 [40] training&#39;s auc: 0.875417 valid_1&#39;s auc: 0.831754 [41] training&#39;s auc: 0.876941 valid_1&#39;s auc: 0.833442 [42] training&#39;s auc: 0.87793 valid_1&#39;s auc: 0.834047 [43] training&#39;s auc: 0.879483 valid_1&#39;s auc: 0.835804 [44] training&#39;s auc: 0.880732 valid_1&#39;s auc: 0.836579 [45] training&#39;s auc: 0.881468 valid_1&#39;s auc: 0.837113 [46] training&#39;s auc: 0.882515 valid_1&#39;s auc: 0.837551 [47] training&#39;s auc: 0.88399 valid_1&#39;s auc: 0.838588 [48] training&#39;s auc: 0.885351 valid_1&#39;s auc: 0.839587 [49] training&#39;s auc: 0.886336 valid_1&#39;s auc: 0.84068 [50] training&#39;s auc: 0.887447 valid_1&#39;s auc: 0.84144 [51] training&#39;s auc: 0.888682 valid_1&#39;s auc: 0.842055 [52] training&#39;s auc: 0.88981 valid_1&#39;s auc: 0.842932 [53] training&#39;s auc: 0.890777 valid_1&#39;s auc: 0.843625 [54] training&#39;s auc: 0.891624 valid_1&#39;s auc: 0.844176 [55] training&#39;s auc: 0.892606 valid_1&#39;s auc: 0.845134 [56] training&#39;s auc: 0.893319 valid_1&#39;s auc: 0.845769 [57] training&#39;s auc: 0.894307 valid_1&#39;s auc: 0.846424 [58] training&#39;s auc: 0.89513 valid_1&#39;s auc: 0.847148 [59] training&#39;s auc: 0.895764 valid_1&#39;s auc: 0.847475 [60] training&#39;s auc: 0.896639 valid_1&#39;s auc: 0.848196 [61] training&#39;s auc: 0.897383 valid_1&#39;s auc: 0.848451 [62] training&#39;s auc: 0.89811 valid_1&#39;s auc: 0.848789 [63] training&#39;s auc: 0.89923 valid_1&#39;s auc: 0.849696 [64] training&#39;s auc: 0.899986 valid_1&#39;s auc: 0.850134 [65] training&#39;s auc: 0.900806 valid_1&#39;s auc: 0.850742 [66] training&#39;s auc: 0.901493 valid_1&#39;s auc: 0.851172 [67] training&#39;s auc: 0.902277 valid_1&#39;s auc: 0.851724 [68] training&#39;s auc: 0.903075 valid_1&#39;s auc: 0.852341 [69] training&#39;s auc: 0.903698 valid_1&#39;s auc: 0.852531 [70] training&#39;s auc: 0.904426 valid_1&#39;s auc: 0.85275 [71] training&#39;s auc: 0.905095 valid_1&#39;s auc: 0.853281 [72] training&#39;s auc: 0.905727 valid_1&#39;s auc: 0.853776 [73] training&#39;s auc: 0.906332 valid_1&#39;s auc: 0.854497 [74] training&#39;s auc: 0.907136 valid_1&#39;s auc: 0.855012 [75] training&#39;s auc: 0.907866 valid_1&#39;s auc: 0.855485 [76] training&#39;s auc: 0.908379 valid_1&#39;s auc: 0.855842 [77] training&#39;s auc: 0.909143 valid_1&#39;s auc: 0.856445 [78] training&#39;s auc: 0.909636 valid_1&#39;s auc: 0.856614 [79] training&#39;s auc: 0.910341 valid_1&#39;s auc: 0.857097 [80] training&#39;s auc: 0.910983 valid_1&#39;s auc: 0.857316 [81] training&#39;s auc: 0.91158 valid_1&#39;s auc: 0.85756 [82] training&#39;s auc: 0.912069 valid_1&#39;s auc: 0.85798 [83] training&#39;s auc: 0.91265 valid_1&#39;s auc: 0.858298 [84] training&#39;s auc: 0.913179 valid_1&#39;s auc: 0.858778 [85] training&#39;s auc: 0.913738 valid_1&#39;s auc: 0.859048 [86] training&#39;s auc: 0.914382 valid_1&#39;s auc: 0.859458 [87] training&#39;s auc: 0.915016 valid_1&#39;s auc: 0.859835 [88] training&#39;s auc: 0.91557 valid_1&#39;s auc: 0.860216 [89] training&#39;s auc: 0.91609 valid_1&#39;s auc: 0.86046 [90] training&#39;s auc: 0.916475 valid_1&#39;s auc: 0.860606 [91] training&#39;s auc: 0.917059 valid_1&#39;s auc: 0.860715 [92] training&#39;s auc: 0.917494 valid_1&#39;s auc: 0.860964 [93] training&#39;s auc: 0.918101 valid_1&#39;s auc: 0.861317 [94] training&#39;s auc: 0.918533 valid_1&#39;s auc: 0.861529 [95] training&#39;s auc: 0.919024 valid_1&#39;s auc: 0.861838 [96] training&#39;s auc: 0.919421 valid_1&#39;s auc: 0.861849 [97] training&#39;s auc: 0.92 valid_1&#39;s auc: 0.86223 [98] training&#39;s auc: 0.920422 valid_1&#39;s auc: 0.862529 [99] training&#39;s auc: 0.92079 valid_1&#39;s auc: 0.86287 [100] training&#39;s auc: 0.921205 valid_1&#39;s auc: 0.863401 [101] training&#39;s auc: 0.921648 valid_1&#39;s auc: 0.863488 [102] training&#39;s auc: 0.922054 valid_1&#39;s auc: 0.863746 [103] training&#39;s auc: 0.922528 valid_1&#39;s auc: 0.864015 [104] training&#39;s auc: 0.923002 valid_1&#39;s auc: 0.864111 [105] training&#39;s auc: 0.923607 valid_1&#39;s auc: 0.864253 [106] training&#39;s auc: 0.923994 valid_1&#39;s auc: 0.864612 [107] training&#39;s auc: 0.924451 valid_1&#39;s auc: 0.864899 [108] training&#39;s auc: 0.92489 valid_1&#39;s auc: 0.865223 [109] training&#39;s auc: 0.925322 valid_1&#39;s auc: 0.865532 [110] training&#39;s auc: 0.925653 valid_1&#39;s auc: 0.86569 [111] training&#39;s auc: 0.926114 valid_1&#39;s auc: 0.866027 [112] training&#39;s auc: 0.926465 valid_1&#39;s auc: 0.866164 [113] training&#39;s auc: 0.926848 valid_1&#39;s auc: 0.866304 [114] training&#39;s auc: 0.927238 valid_1&#39;s auc: 0.866739 [115] training&#39;s auc: 0.927693 valid_1&#39;s auc: 0.866936 [116] training&#39;s auc: 0.928001 valid_1&#39;s auc: 0.867235 [117] training&#39;s auc: 0.928342 valid_1&#39;s auc: 0.867293 [118] training&#39;s auc: 0.92878 valid_1&#39;s auc: 0.867637 [119] training&#39;s auc: 0.929076 valid_1&#39;s auc: 0.867797 [120] training&#39;s auc: 0.929514 valid_1&#39;s auc: 0.868185 [121] training&#39;s auc: 0.929865 valid_1&#39;s auc: 0.86847 [122] training&#39;s auc: 0.930259 valid_1&#39;s auc: 0.868747 [123] training&#39;s auc: 0.930635 valid_1&#39;s auc: 0.868887 [124] training&#39;s auc: 0.930983 valid_1&#39;s auc: 0.86915 [125] training&#39;s auc: 0.931312 valid_1&#39;s auc: 0.869264 [126] training&#39;s auc: 0.931676 valid_1&#39;s auc: 0.86952 [127] training&#39;s auc: 0.932038 valid_1&#39;s auc: 0.869743 [128] training&#39;s auc: 0.932308 valid_1&#39;s auc: 0.869901 [129] training&#39;s auc: 0.932639 valid_1&#39;s auc: 0.869992 [130] training&#39;s auc: 0.933044 valid_1&#39;s auc: 0.870122 [131] training&#39;s auc: 0.933414 valid_1&#39;s auc: 0.870339 [132] training&#39;s auc: 0.933741 valid_1&#39;s auc: 0.870475 [133] training&#39;s auc: 0.934076 valid_1&#39;s auc: 0.870675 [134] training&#39;s auc: 0.934437 valid_1&#39;s auc: 0.870797 [135] training&#39;s auc: 0.934679 valid_1&#39;s auc: 0.870938 [136] training&#39;s auc: 0.934991 valid_1&#39;s auc: 0.871092 [137] training&#39;s auc: 0.935274 valid_1&#39;s auc: 0.871226 [138] training&#39;s auc: 0.935532 valid_1&#39;s auc: 0.871319 [139] training&#39;s auc: 0.935795 valid_1&#39;s auc: 0.871567 [140] training&#39;s auc: 0.936095 valid_1&#39;s auc: 0.87169 [141] training&#39;s auc: 0.936345 valid_1&#39;s auc: 0.871932 [142] training&#39;s auc: 0.936658 valid_1&#39;s auc: 0.872025 [143] training&#39;s auc: 0.936884 valid_1&#39;s auc: 0.872195 [144] training&#39;s auc: 0.93716 valid_1&#39;s auc: 0.872421 [145] training&#39;s auc: 0.937488 valid_1&#39;s auc: 0.872622 [146] training&#39;s auc: 0.93778 valid_1&#39;s auc: 0.872901 [147] training&#39;s auc: 0.938049 valid_1&#39;s auc: 0.872903 [148] training&#39;s auc: 0.938327 valid_1&#39;s auc: 0.873127 [149] training&#39;s auc: 0.93865 valid_1&#39;s auc: 0.873202 [150] training&#39;s auc: 0.938961 valid_1&#39;s auc: 0.87339 [151] training&#39;s auc: 0.939213 valid_1&#39;s auc: 0.873437 [152] training&#39;s auc: 0.939494 valid_1&#39;s auc: 0.873555 [153] training&#39;s auc: 0.939811 valid_1&#39;s auc: 0.87369 [154] training&#39;s auc: 0.940063 valid_1&#39;s auc: 0.873916 [155] training&#39;s auc: 0.940306 valid_1&#39;s auc: 0.874046 [156] training&#39;s auc: 0.940528 valid_1&#39;s auc: 0.874203 [157] training&#39;s auc: 0.940783 valid_1&#39;s auc: 0.87434 [158] training&#39;s auc: 0.94106 valid_1&#39;s auc: 0.874377 [159] training&#39;s auc: 0.941307 valid_1&#39;s auc: 0.874496 [160] training&#39;s auc: 0.941575 valid_1&#39;s auc: 0.874582 [161] training&#39;s auc: 0.94184 valid_1&#39;s auc: 0.874549 [162] training&#39;s auc: 0.942124 valid_1&#39;s auc: 0.874701 [163] training&#39;s auc: 0.942302 valid_1&#39;s auc: 0.874737 [164] training&#39;s auc: 0.942545 valid_1&#39;s auc: 0.874938 [165] training&#39;s auc: 0.942806 valid_1&#39;s auc: 0.875032 [166] training&#39;s auc: 0.94308 valid_1&#39;s auc: 0.875288 [167] training&#39;s auc: 0.943333 valid_1&#39;s auc: 0.875378 [168] training&#39;s auc: 0.943651 valid_1&#39;s auc: 0.875559 [169] training&#39;s auc: 0.943905 valid_1&#39;s auc: 0.875624 [170] training&#39;s auc: 0.944104 valid_1&#39;s auc: 0.875843 [171] training&#39;s auc: 0.944416 valid_1&#39;s auc: 0.875988 [172] training&#39;s auc: 0.94464 valid_1&#39;s auc: 0.876148 [173] training&#39;s auc: 0.944872 valid_1&#39;s auc: 0.876228 [174] training&#39;s auc: 0.94507 valid_1&#39;s auc: 0.876372 [175] training&#39;s auc: 0.945335 valid_1&#39;s auc: 0.876321 [176] training&#39;s auc: 0.945594 valid_1&#39;s auc: 0.876503 [177] training&#39;s auc: 0.945798 valid_1&#39;s auc: 0.876516 [178] training&#39;s auc: 0.946029 valid_1&#39;s auc: 0.876518 [179] training&#39;s auc: 0.946279 valid_1&#39;s auc: 0.876514 [180] training&#39;s auc: 0.946473 valid_1&#39;s auc: 0.876597 [181] training&#39;s auc: 0.946676 valid_1&#39;s auc: 0.876673 [182] training&#39;s auc: 0.94693 valid_1&#39;s auc: 0.876814 [183] training&#39;s auc: 0.947169 valid_1&#39;s auc: 0.876774 [184] training&#39;s auc: 0.947436 valid_1&#39;s auc: 0.877079 [185] training&#39;s auc: 0.947611 valid_1&#39;s auc: 0.877106 [186] training&#39;s auc: 0.947827 valid_1&#39;s auc: 0.877176 [187] training&#39;s auc: 0.948019 valid_1&#39;s auc: 0.877244 [188] training&#39;s auc: 0.948306 valid_1&#39;s auc: 0.877291 [189] training&#39;s auc: 0.948537 valid_1&#39;s auc: 0.877349 [190] training&#39;s auc: 0.94872 valid_1&#39;s auc: 0.877488 [191] training&#39;s auc: 0.948972 valid_1&#39;s auc: 0.877548 [192] training&#39;s auc: 0.949102 valid_1&#39;s auc: 0.877549 [193] training&#39;s auc: 0.949269 valid_1&#39;s auc: 0.877622 [194] training&#39;s auc: 0.949451 valid_1&#39;s auc: 0.877733 [195] training&#39;s auc: 0.94972 valid_1&#39;s auc: 0.877779 [196] training&#39;s auc: 0.949953 valid_1&#39;s auc: 0.877877 [197] training&#39;s auc: 0.950191 valid_1&#39;s auc: 0.878049 [198] training&#39;s auc: 0.950392 valid_1&#39;s auc: 0.878129 [199] training&#39;s auc: 0.950623 valid_1&#39;s auc: 0.87826 [200] training&#39;s auc: 0.950832 valid_1&#39;s auc: 0.878285 [201] training&#39;s auc: 0.951092 valid_1&#39;s auc: 0.878367 [202] training&#39;s auc: 0.95132 valid_1&#39;s auc: 0.878536 [203] training&#39;s auc: 0.951514 valid_1&#39;s auc: 0.878641 [204] training&#39;s auc: 0.951658 valid_1&#39;s auc: 0.878818 [205] training&#39;s auc: 0.95185 valid_1&#39;s auc: 0.878938 [206] training&#39;s auc: 0.952031 valid_1&#39;s auc: 0.87908 [207] training&#39;s auc: 0.952207 valid_1&#39;s auc: 0.879074 [208] training&#39;s auc: 0.95235 valid_1&#39;s auc: 0.879052 [209] training&#39;s auc: 0.952538 valid_1&#39;s auc: 0.879145 [210] training&#39;s auc: 0.952727 valid_1&#39;s auc: 0.879258 [211] training&#39;s auc: 0.952899 valid_1&#39;s auc: 0.879487 [212] training&#39;s auc: 0.953072 valid_1&#39;s auc: 0.879544 [213] training&#39;s auc: 0.953218 valid_1&#39;s auc: 0.879576 [214] training&#39;s auc: 0.953421 valid_1&#39;s auc: 0.879667 [215] training&#39;s auc: 0.953671 valid_1&#39;s auc: 0.879677 [216] training&#39;s auc: 0.953902 valid_1&#39;s auc: 0.879695 [217] training&#39;s auc: 0.954072 valid_1&#39;s auc: 0.879754 [218] training&#39;s auc: 0.954332 valid_1&#39;s auc: 0.879895 [219] training&#39;s auc: 0.954516 valid_1&#39;s auc: 0.879941 [220] training&#39;s auc: 0.954662 valid_1&#39;s auc: 0.879992 [221] training&#39;s auc: 0.954848 valid_1&#39;s auc: 0.880053 [222] training&#39;s auc: 0.955008 valid_1&#39;s auc: 0.880176 [223] training&#39;s auc: 0.955212 valid_1&#39;s auc: 0.880303 [224] training&#39;s auc: 0.955398 valid_1&#39;s auc: 0.880363 [225] training&#39;s auc: 0.955619 valid_1&#39;s auc: 0.880403 [226] training&#39;s auc: 0.955831 valid_1&#39;s auc: 0.88054 [227] training&#39;s auc: 0.956004 valid_1&#39;s auc: 0.880551 [228] training&#39;s auc: 0.956167 valid_1&#39;s auc: 0.880625 [229] training&#39;s auc: 0.956396 valid_1&#39;s auc: 0.88064 [230] training&#39;s auc: 0.956552 valid_1&#39;s auc: 0.880748 [231] training&#39;s auc: 0.956736 valid_1&#39;s auc: 0.880797 [232] training&#39;s auc: 0.956833 valid_1&#39;s auc: 0.880889 [233] training&#39;s auc: 0.957034 valid_1&#39;s auc: 0.880957 [234] training&#39;s auc: 0.957195 valid_1&#39;s auc: 0.880963 [235] training&#39;s auc: 0.957368 valid_1&#39;s auc: 0.881015 [236] training&#39;s auc: 0.957497 valid_1&#39;s auc: 0.881099 [237] training&#39;s auc: 0.957683 valid_1&#39;s auc: 0.881122 [238] training&#39;s auc: 0.957858 valid_1&#39;s auc: 0.881114 [239] training&#39;s auc: 0.95802 valid_1&#39;s auc: 0.881125 [240] training&#39;s auc: 0.958191 valid_1&#39;s auc: 0.881147 [241] training&#39;s auc: 0.958348 valid_1&#39;s auc: 0.881191 [242] training&#39;s auc: 0.958525 valid_1&#39;s auc: 0.881227 [243] training&#39;s auc: 0.95868 valid_1&#39;s auc: 0.881188 [244] training&#39;s auc: 0.958837 valid_1&#39;s auc: 0.881239 [245] training&#39;s auc: 0.958998 valid_1&#39;s auc: 0.881294 [246] training&#39;s auc: 0.959182 valid_1&#39;s auc: 0.88135 [247] training&#39;s auc: 0.959329 valid_1&#39;s auc: 0.881492 [248] training&#39;s auc: 0.959489 valid_1&#39;s auc: 0.881503 [249] training&#39;s auc: 0.959633 valid_1&#39;s auc: 0.881541 [250] training&#39;s auc: 0.959796 valid_1&#39;s auc: 0.881688 [251] training&#39;s auc: 0.959936 valid_1&#39;s auc: 0.881683 [252] training&#39;s auc: 0.960094 valid_1&#39;s auc: 0.881732 [253] training&#39;s auc: 0.960271 valid_1&#39;s auc: 0.88178 [254] training&#39;s auc: 0.960463 valid_1&#39;s auc: 0.881813 [255] training&#39;s auc: 0.960683 valid_1&#39;s auc: 0.881925 [256] training&#39;s auc: 0.960833 valid_1&#39;s auc: 0.881909 [257] training&#39;s auc: 0.960949 valid_1&#39;s auc: 0.881994 [258] training&#39;s auc: 0.961042 valid_1&#39;s auc: 0.882144 [259] training&#39;s auc: 0.961181 valid_1&#39;s auc: 0.882217 [260] training&#39;s auc: 0.961317 valid_1&#39;s auc: 0.882223 [261] training&#39;s auc: 0.96148 valid_1&#39;s auc: 0.882277 [262] training&#39;s auc: 0.961642 valid_1&#39;s auc: 0.882287 [263] training&#39;s auc: 0.961798 valid_1&#39;s auc: 0.882307 [264] training&#39;s auc: 0.961965 valid_1&#39;s auc: 0.882376 [265] training&#39;s auc: 0.962118 valid_1&#39;s auc: 0.882376 [266] training&#39;s auc: 0.962307 valid_1&#39;s auc: 0.882354 [267] training&#39;s auc: 0.962467 valid_1&#39;s auc: 0.882366 [268] training&#39;s auc: 0.962617 valid_1&#39;s auc: 0.882357 [269] training&#39;s auc: 0.962765 valid_1&#39;s auc: 0.882415 [270] training&#39;s auc: 0.962866 valid_1&#39;s auc: 0.882549 [271] training&#39;s auc: 0.962967 valid_1&#39;s auc: 0.88266 [272] training&#39;s auc: 0.963077 valid_1&#39;s auc: 0.882673 [273] training&#39;s auc: 0.963176 valid_1&#39;s auc: 0.88269 [274] training&#39;s auc: 0.963314 valid_1&#39;s auc: 0.882795 [275] training&#39;s auc: 0.963441 valid_1&#39;s auc: 0.882826 [276] training&#39;s auc: 0.963564 valid_1&#39;s auc: 0.882794 [277] training&#39;s auc: 0.963721 valid_1&#39;s auc: 0.882895 [278] training&#39;s auc: 0.96381 valid_1&#39;s auc: 0.88286 [279] training&#39;s auc: 0.963945 valid_1&#39;s auc: 0.882937 [280] training&#39;s auc: 0.964077 valid_1&#39;s auc: 0.883046 [281] training&#39;s auc: 0.964201 valid_1&#39;s auc: 0.883009 [282] training&#39;s auc: 0.964366 valid_1&#39;s auc: 0.883029 [283] training&#39;s auc: 0.964546 valid_1&#39;s auc: 0.88299 [284] training&#39;s auc: 0.964702 valid_1&#39;s auc: 0.883034 [285] training&#39;s auc: 0.964862 valid_1&#39;s auc: 0.883033 [286] training&#39;s auc: 0.96499 valid_1&#39;s auc: 0.883077 [287] training&#39;s auc: 0.965153 valid_1&#39;s auc: 0.883055 [288] training&#39;s auc: 0.96523 valid_1&#39;s auc: 0.88305 [289] training&#39;s auc: 0.965384 valid_1&#39;s auc: 0.88309 [290] training&#39;s auc: 0.965496 valid_1&#39;s auc: 0.883105 [291] training&#39;s auc: 0.965637 valid_1&#39;s auc: 0.883092 [292] training&#39;s auc: 0.965775 valid_1&#39;s auc: 0.883149 [293] training&#39;s auc: 0.965926 valid_1&#39;s auc: 0.883232 [294] training&#39;s auc: 0.966057 valid_1&#39;s auc: 0.883324 [295] training&#39;s auc: 0.966165 valid_1&#39;s auc: 0.883349 [296] training&#39;s auc: 0.966278 valid_1&#39;s auc: 0.883368 [297] training&#39;s auc: 0.966426 valid_1&#39;s auc: 0.883476 [298] training&#39;s auc: 0.96656 valid_1&#39;s auc: 0.883512 [299] training&#39;s auc: 0.966679 valid_1&#39;s auc: 0.883537 [300] training&#39;s auc: 0.966809 valid_1&#39;s auc: 0.883536 [301] training&#39;s auc: 0.966968 valid_1&#39;s auc: 0.883626 [302] training&#39;s auc: 0.967079 valid_1&#39;s auc: 0.883623 [303] training&#39;s auc: 0.967177 valid_1&#39;s auc: 0.883701 [304] training&#39;s auc: 0.967317 valid_1&#39;s auc: 0.883659 [305] training&#39;s auc: 0.967482 valid_1&#39;s auc: 0.883694 [306] training&#39;s auc: 0.967609 valid_1&#39;s auc: 0.883718 [307] training&#39;s auc: 0.967774 valid_1&#39;s auc: 0.88375 [308] training&#39;s auc: 0.967883 valid_1&#39;s auc: 0.883793 [309] training&#39;s auc: 0.967987 valid_1&#39;s auc: 0.883805 [310] training&#39;s auc: 0.968108 valid_1&#39;s auc: 0.883823 [311] training&#39;s auc: 0.968261 valid_1&#39;s auc: 0.8838 [312] training&#39;s auc: 0.968418 valid_1&#39;s auc: 0.883843 [313] training&#39;s auc: 0.968544 valid_1&#39;s auc: 0.883846 [314] training&#39;s auc: 0.968661 valid_1&#39;s auc: 0.883837 [315] training&#39;s auc: 0.968794 valid_1&#39;s auc: 0.883863 [316] training&#39;s auc: 0.96892 valid_1&#39;s auc: 0.883869 [317] training&#39;s auc: 0.969076 valid_1&#39;s auc: 0.883834 [318] training&#39;s auc: 0.96919 valid_1&#39;s auc: 0.883841 [319] training&#39;s auc: 0.969382 valid_1&#39;s auc: 0.88381 [320] training&#39;s auc: 0.969521 valid_1&#39;s auc: 0.883771 [321] training&#39;s auc: 0.969655 valid_1&#39;s auc: 0.883847 [322] training&#39;s auc: 0.969738 valid_1&#39;s auc: 0.88384 [323] training&#39;s auc: 0.969871 valid_1&#39;s auc: 0.883835 [324] training&#39;s auc: 0.969988 valid_1&#39;s auc: 0.883789 [325] training&#39;s auc: 0.970095 valid_1&#39;s auc: 0.883866 [326] training&#39;s auc: 0.97024 valid_1&#39;s auc: 0.883825 [327] training&#39;s auc: 0.970345 valid_1&#39;s auc: 0.883824 [328] training&#39;s auc: 0.970434 valid_1&#39;s auc: 0.883775 [329] training&#39;s auc: 0.970535 valid_1&#39;s auc: 0.883833 [330] training&#39;s auc: 0.970632 valid_1&#39;s auc: 0.883818 [331] training&#39;s auc: 0.970755 valid_1&#39;s auc: 0.883778 [332] training&#39;s auc: 0.970869 valid_1&#39;s auc: 0.883816 [333] training&#39;s auc: 0.97099 valid_1&#39;s auc: 0.883884 [334] training&#39;s auc: 0.971155 valid_1&#39;s auc: 0.883902 [335] training&#39;s auc: 0.97125 valid_1&#39;s auc: 0.883838 [336] training&#39;s auc: 0.971375 valid_1&#39;s auc: 0.883856 [337] training&#39;s auc: 0.971468 valid_1&#39;s auc: 0.883816 [338] training&#39;s auc: 0.971566 valid_1&#39;s auc: 0.883764 [339] training&#39;s auc: 0.971665 valid_1&#39;s auc: 0.883811 [340] training&#39;s auc: 0.971787 valid_1&#39;s auc: 0.88385 [341] training&#39;s auc: 0.971912 valid_1&#39;s auc: 0.883892 [342] training&#39;s auc: 0.972016 valid_1&#39;s auc: 0.883942 [343] training&#39;s auc: 0.972138 valid_1&#39;s auc: 0.883933 [344] training&#39;s auc: 0.972298 valid_1&#39;s auc: 0.883935 [345] training&#39;s auc: 0.972394 valid_1&#39;s auc: 0.883972 [346] training&#39;s auc: 0.972512 valid_1&#39;s auc: 0.883975 [347] training&#39;s auc: 0.972668 valid_1&#39;s auc: 0.883999 [348] training&#39;s auc: 0.972774 valid_1&#39;s auc: 0.883997 [349] training&#39;s auc: 0.972884 valid_1&#39;s auc: 0.884065 [350] training&#39;s auc: 0.972961 valid_1&#39;s auc: 0.88412 [351] training&#39;s auc: 0.973085 valid_1&#39;s auc: 0.88421 [352] training&#39;s auc: 0.973181 valid_1&#39;s auc: 0.884237 [353] training&#39;s auc: 0.973274 valid_1&#39;s auc: 0.884226 [354] training&#39;s auc: 0.973389 valid_1&#39;s auc: 0.884232 [355] training&#39;s auc: 0.973538 valid_1&#39;s auc: 0.884201 [356] training&#39;s auc: 0.973668 valid_1&#39;s auc: 0.884201 [357] training&#39;s auc: 0.9738 valid_1&#39;s auc: 0.884197 [358] training&#39;s auc: 0.973905 valid_1&#39;s auc: 0.884226 [359] training&#39;s auc: 0.974004 valid_1&#39;s auc: 0.884225 [360] training&#39;s auc: 0.974099 valid_1&#39;s auc: 0.884219 [361] training&#39;s auc: 0.974215 valid_1&#39;s auc: 0.884201 [362] training&#39;s auc: 0.974334 valid_1&#39;s auc: 0.884169 [363] training&#39;s auc: 0.974426 valid_1&#39;s auc: 0.88419 [364] training&#39;s auc: 0.974525 valid_1&#39;s auc: 0.884158 [365] training&#39;s auc: 0.974588 valid_1&#39;s auc: 0.884137 [366] training&#39;s auc: 0.974671 valid_1&#39;s auc: 0.884119 [367] training&#39;s auc: 0.974805 valid_1&#39;s auc: 0.88414 [368] training&#39;s auc: 0.974914 valid_1&#39;s auc: 0.884181 [369] training&#39;s auc: 0.975053 valid_1&#39;s auc: 0.884161 [370] training&#39;s auc: 0.975196 valid_1&#39;s auc: 0.88414 [371] training&#39;s auc: 0.9753 valid_1&#39;s auc: 0.884104 [372] training&#39;s auc: 0.975425 valid_1&#39;s auc: 0.884161 [373] training&#39;s auc: 0.975573 valid_1&#39;s auc: 0.884118 [374] training&#39;s auc: 0.97569 valid_1&#39;s auc: 0.884106 [375] training&#39;s auc: 0.975822 valid_1&#39;s auc: 0.884127 [376] training&#39;s auc: 0.975913 valid_1&#39;s auc: 0.884169 [377] training&#39;s auc: 0.976001 valid_1&#39;s auc: 0.884169 [378] training&#39;s auc: 0.976133 valid_1&#39;s auc: 0.884189 [379] training&#39;s auc: 0.97625 valid_1&#39;s auc: 0.884167 [380] training&#39;s auc: 0.976381 valid_1&#39;s auc: 0.884195 [381] training&#39;s auc: 0.97654 valid_1&#39;s auc: 0.884305 [382] training&#39;s auc: 0.976699 valid_1&#39;s auc: 0.884309 [383] training&#39;s auc: 0.976815 valid_1&#39;s auc: 0.884301 [384] training&#39;s auc: 0.976906 valid_1&#39;s auc: 0.884283 [385] training&#39;s auc: 0.977021 valid_1&#39;s auc: 0.884233 [386] training&#39;s auc: 0.977155 valid_1&#39;s auc: 0.884203 [387] training&#39;s auc: 0.977231 valid_1&#39;s auc: 0.884172 [388] training&#39;s auc: 0.977312 valid_1&#39;s auc: 0.884207 [389] training&#39;s auc: 0.977423 valid_1&#39;s auc: 0.884185 [390] training&#39;s auc: 0.977509 valid_1&#39;s auc: 0.884191 [391] training&#39;s auc: 0.97759 valid_1&#39;s auc: 0.884208 [392] training&#39;s auc: 0.977663 valid_1&#39;s auc: 0.884263 [393] training&#39;s auc: 0.977764 valid_1&#39;s auc: 0.884278 [394] training&#39;s auc: 0.977868 valid_1&#39;s auc: 0.884266 [395] training&#39;s auc: 0.977991 valid_1&#39;s auc: 0.884295 [396] training&#39;s auc: 0.978104 valid_1&#39;s auc: 0.884325 [397] training&#39;s auc: 0.978179 valid_1&#39;s auc: 0.884374 [398] training&#39;s auc: 0.978301 valid_1&#39;s auc: 0.884441 [399] training&#39;s auc: 0.978392 valid_1&#39;s auc: 0.884411 [400] training&#39;s auc: 0.978484 valid_1&#39;s auc: 0.8844 [401] training&#39;s auc: 0.978622 valid_1&#39;s auc: 0.884413 [402] training&#39;s auc: 0.97873 valid_1&#39;s auc: 0.884467 [403] training&#39;s auc: 0.978817 valid_1&#39;s auc: 0.88444 [404] training&#39;s auc: 0.978878 valid_1&#39;s auc: 0.884432 [405] training&#39;s auc: 0.978958 valid_1&#39;s auc: 0.88448 [406] training&#39;s auc: 0.979089 valid_1&#39;s auc: 0.884477 [407] training&#39;s auc: 0.979158 valid_1&#39;s auc: 0.884521 [408] training&#39;s auc: 0.979248 valid_1&#39;s auc: 0.884526 [409] training&#39;s auc: 0.979359 valid_1&#39;s auc: 0.88451 [410] training&#39;s auc: 0.979459 valid_1&#39;s auc: 0.884539 [411] training&#39;s auc: 0.979567 valid_1&#39;s auc: 0.884627 [412] training&#39;s auc: 0.979653 valid_1&#39;s auc: 0.884644 [413] training&#39;s auc: 0.979729 valid_1&#39;s auc: 0.884658 [414] training&#39;s auc: 0.979798 valid_1&#39;s auc: 0.884686 [415] training&#39;s auc: 0.979887 valid_1&#39;s auc: 0.884705 [416] training&#39;s auc: 0.979965 valid_1&#39;s auc: 0.884678 [417] training&#39;s auc: 0.980046 valid_1&#39;s auc: 0.884715 [418] training&#39;s auc: 0.980145 valid_1&#39;s auc: 0.884669 [419] training&#39;s auc: 0.980234 valid_1&#39;s auc: 0.884725 [420] training&#39;s auc: 0.980358 valid_1&#39;s auc: 0.884715 [421] training&#39;s auc: 0.98043 valid_1&#39;s auc: 0.884721 [422] training&#39;s auc: 0.980513 valid_1&#39;s auc: 0.884718 [423] training&#39;s auc: 0.980624 valid_1&#39;s auc: 0.884693 [424] training&#39;s auc: 0.98067 valid_1&#39;s auc: 0.884672 [425] training&#39;s auc: 0.980774 valid_1&#39;s auc: 0.884632 [426] training&#39;s auc: 0.980844 valid_1&#39;s auc: 0.884666 [427] training&#39;s auc: 0.980923 valid_1&#39;s auc: 0.884722 [428] training&#39;s auc: 0.981034 valid_1&#39;s auc: 0.884718 [429] training&#39;s auc: 0.98112 valid_1&#39;s auc: 0.884723 [430] training&#39;s auc: 0.981204 valid_1&#39;s auc: 0.884666 [431] training&#39;s auc: 0.981306 valid_1&#39;s auc: 0.884646 [432] training&#39;s auc: 0.98138 valid_1&#39;s auc: 0.88461 [433] training&#39;s auc: 0.981454 valid_1&#39;s auc: 0.884636 [434] training&#39;s auc: 0.981547 valid_1&#39;s auc: 0.884627 [435] training&#39;s auc: 0.981628 valid_1&#39;s auc: 0.884619 [436] training&#39;s auc: 0.981696 valid_1&#39;s auc: 0.884748 [437] training&#39;s auc: 0.981759 valid_1&#39;s auc: 0.884736 [438] training&#39;s auc: 0.981862 valid_1&#39;s auc: 0.884725 [439] training&#39;s auc: 0.981908 valid_1&#39;s auc: 0.884736 [440] training&#39;s auc: 0.981987 valid_1&#39;s auc: 0.884698 [441] training&#39;s auc: 0.982118 valid_1&#39;s auc: 0.884696 [442] training&#39;s auc: 0.982214 valid_1&#39;s auc: 0.884714 [443] training&#39;s auc: 0.982289 valid_1&#39;s auc: 0.884699 [444] training&#39;s auc: 0.982347 valid_1&#39;s auc: 0.884705 [445] training&#39;s auc: 0.982433 valid_1&#39;s auc: 0.884713 [446] training&#39;s auc: 0.982498 valid_1&#39;s auc: 0.884699 [447] training&#39;s auc: 0.982572 valid_1&#39;s auc: 0.884726 [448] training&#39;s auc: 0.982648 valid_1&#39;s auc: 0.884696 [449] training&#39;s auc: 0.982705 valid_1&#39;s auc: 0.884719 [450] training&#39;s auc: 0.982802 valid_1&#39;s auc: 0.884689 [451] training&#39;s auc: 0.982864 valid_1&#39;s auc: 0.884676 [452] training&#39;s auc: 0.982974 valid_1&#39;s auc: 0.884648 [453] training&#39;s auc: 0.983046 valid_1&#39;s auc: 0.884686 [454] training&#39;s auc: 0.983117 valid_1&#39;s auc: 0.884679 [455] training&#39;s auc: 0.983201 valid_1&#39;s auc: 0.884668 [456] training&#39;s auc: 0.983266 valid_1&#39;s auc: 0.884682 [457] training&#39;s auc: 0.983332 valid_1&#39;s auc: 0.884718 [458] training&#39;s auc: 0.983395 valid_1&#39;s auc: 0.884726 [459] training&#39;s auc: 0.983498 valid_1&#39;s auc: 0.884668 [460] training&#39;s auc: 0.983571 valid_1&#39;s auc: 0.8847 [461] training&#39;s auc: 0.983636 valid_1&#39;s auc: 0.884647 [462] training&#39;s auc: 0.983699 valid_1&#39;s auc: 0.884641 [463] training&#39;s auc: 0.983767 valid_1&#39;s auc: 0.884624 [464] training&#39;s auc: 0.983838 valid_1&#39;s auc: 0.884598 [465] training&#39;s auc: 0.983928 valid_1&#39;s auc: 0.884619 [466] training&#39;s auc: 0.984016 valid_1&#39;s auc: 0.884595 [467] training&#39;s auc: 0.98409 valid_1&#39;s auc: 0.884613 [468] training&#39;s auc: 0.984172 valid_1&#39;s auc: 0.884573 [469] training&#39;s auc: 0.98424 valid_1&#39;s auc: 0.884624 [470] training&#39;s auc: 0.984319 valid_1&#39;s auc: 0.884651 [471] training&#39;s auc: 0.984386 valid_1&#39;s auc: 0.884678 [472] training&#39;s auc: 0.98447 valid_1&#39;s auc: 0.884631 [473] training&#39;s auc: 0.984547 valid_1&#39;s auc: 0.884661 [474] training&#39;s auc: 0.984601 valid_1&#39;s auc: 0.884673 [475] training&#39;s auc: 0.984682 valid_1&#39;s auc: 0.88464 [476] training&#39;s auc: 0.984763 valid_1&#39;s auc: 0.884595 [477] training&#39;s auc: 0.984849 valid_1&#39;s auc: 0.884604 [478] training&#39;s auc: 0.984964 valid_1&#39;s auc: 0.884576 [479] training&#39;s auc: 0.985012 valid_1&#39;s auc: 0.8846 [480] training&#39;s auc: 0.985118 valid_1&#39;s auc: 0.884615 [481] training&#39;s auc: 0.985209 valid_1&#39;s auc: 0.884617 [482] training&#39;s auc: 0.985291 valid_1&#39;s auc: 0.884631 [483] training&#39;s auc: 0.985352 valid_1&#39;s auc: 0.884669 [484] training&#39;s auc: 0.985433 valid_1&#39;s auc: 0.884643 [485] training&#39;s auc: 0.98551 valid_1&#39;s auc: 0.884679 [486] training&#39;s auc: 0.985593 valid_1&#39;s auc: 0.884688 [487] training&#39;s auc: 0.985665 valid_1&#39;s auc: 0.88469 [488] training&#39;s auc: 0.985733 valid_1&#39;s auc: 0.884678 [489] training&#39;s auc: 0.985791 valid_1&#39;s auc: 0.884708 [490] training&#39;s auc: 0.985853 valid_1&#39;s auc: 0.88468 [491] training&#39;s auc: 0.985927 valid_1&#39;s auc: 0.884659 [492] training&#39;s auc: 0.985991 valid_1&#39;s auc: 0.884626 [493] training&#39;s auc: 0.986051 valid_1&#39;s auc: 0.884647 [494] training&#39;s auc: 0.986127 valid_1&#39;s auc: 0.884638 [495] training&#39;s auc: 0.986188 valid_1&#39;s auc: 0.884668 [496] training&#39;s auc: 0.986247 valid_1&#39;s auc: 0.884695 [497] training&#39;s auc: 0.986301 valid_1&#39;s auc: 0.884669 [498] training&#39;s auc: 0.986402 valid_1&#39;s auc: 0.884671 [499] training&#39;s auc: 0.986474 valid_1&#39;s auc: 0.884723 [500] training&#39;s auc: 0.98653 valid_1&#39;s auc: 0.884682 [501] training&#39;s auc: 0.986618 valid_1&#39;s auc: 0.884654 [502] training&#39;s auc: 0.986668 valid_1&#39;s auc: 0.884627 [503] training&#39;s auc: 0.986718 valid_1&#39;s auc: 0.884637 [504] training&#39;s auc: 0.986758 valid_1&#39;s auc: 0.884639 [505] training&#39;s auc: 0.986808 valid_1&#39;s auc: 0.884597 [506] training&#39;s auc: 0.986874 valid_1&#39;s auc: 0.884613 [507] training&#39;s auc: 0.986946 valid_1&#39;s auc: 0.884606 [508] training&#39;s auc: 0.987007 valid_1&#39;s auc: 0.884672 [509] training&#39;s auc: 0.987075 valid_1&#39;s auc: 0.884642 [510] training&#39;s auc: 0.987147 valid_1&#39;s auc: 0.884592 [511] training&#39;s auc: 0.987207 valid_1&#39;s auc: 0.884585 [512] training&#39;s auc: 0.98727 valid_1&#39;s auc: 0.88459 [513] training&#39;s auc: 0.987317 valid_1&#39;s auc: 0.884557 [514] training&#39;s auc: 0.98737 valid_1&#39;s auc: 0.884545 [515] training&#39;s auc: 0.987448 valid_1&#39;s auc: 0.884542 [516] training&#39;s auc: 0.987505 valid_1&#39;s auc: 0.884542 [517] training&#39;s auc: 0.98756 valid_1&#39;s auc: 0.884565 [518] training&#39;s auc: 0.987624 valid_1&#39;s auc: 0.88457 [519] training&#39;s auc: 0.987682 valid_1&#39;s auc: 0.884555 [520] training&#39;s auc: 0.987759 valid_1&#39;s auc: 0.88458 [521] training&#39;s auc: 0.98782 valid_1&#39;s auc: 0.884575 [522] training&#39;s auc: 0.987866 valid_1&#39;s auc: 0.884551 [523] training&#39;s auc: 0.987918 valid_1&#39;s auc: 0.884527 [524] training&#39;s auc: 0.987963 valid_1&#39;s auc: 0.884506 [525] training&#39;s auc: 0.988019 valid_1&#39;s auc: 0.884535 [526] training&#39;s auc: 0.988057 valid_1&#39;s auc: 0.884516 [527] training&#39;s auc: 0.988103 valid_1&#39;s auc: 0.884512 [528] training&#39;s auc: 0.98816 valid_1&#39;s auc: 0.884481 [529] training&#39;s auc: 0.988232 valid_1&#39;s auc: 0.884493 [530] training&#39;s auc: 0.988272 valid_1&#39;s auc: 0.884549 [531] training&#39;s auc: 0.988342 valid_1&#39;s auc: 0.884557 [532] training&#39;s auc: 0.988418 valid_1&#39;s auc: 0.884577 [533] training&#39;s auc: 0.988479 valid_1&#39;s auc: 0.884597 [534] training&#39;s auc: 0.988553 valid_1&#39;s auc: 0.884574 [535] training&#39;s auc: 0.988623 valid_1&#39;s auc: 0.884603 [536] training&#39;s auc: 0.988662 valid_1&#39;s auc: 0.884601 Early stopping, best iteration is: [436] training&#39;s auc: 0.981696 valid_1&#39;s auc: 0.884748 LGBMClassifier(boosting_type=&#39;gbdt&#39;, class_weight=None, colsample_bytree=0.7, importance_type=&#39;split&#39;, learning_rate=0.1, max_depth=-1, metric=&#39;auc&#39;, min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0, n_estimators=2500, n_jobs=-1, num_leaves=30, objective=&#39;binary&#39;, random_state=2018, reg_alpha=0, reg_lambda=0.0, silent=True, subsample=0.9, subsample_for_bin=200000, subsample_freq=1) 预测结果1predict=lgb_model.predict_proba(test_x)[:,1] 123result = pd.DataFrame()result[&#x27;ID_code&#x27;] = test[&#x27;ID_code&#x27;]result[&#x27;target&#x27;] = predict 1result.to_csv(&#x27;submission&#x27;,index = False) 最后代码得分：0.88918","categories":[{"name":"代码","slug":"代码","permalink":"https://kerryli1007.github.io/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[]},{"title":"如何更好地进行OKR管理","slug":"如何更好地进行OKR管理-下午7-56-23","date":"2019-06-30T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2019/06/30/如何更好地进行OKR管理-下午7-56-23/","link":"","permalink":"https://kerryli1007.github.io/2019/06/30/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E8%BF%9B%E8%A1%8COKR%E7%AE%A1%E7%90%86-%E4%B8%8B%E5%8D%887-56-23/","excerpt":"","text":"本次分享分为以下几部分： OKR管理是什么？ 如何更好地进行OKR管理？ OKR管理，从工作到学习。 OKR管理是什么？首先，让我们来看两个工作中，常见的场景。 场景1：OKR完成进展失去把控 小A被上司问到最近项目的进展，小A说：“一切进展顺利。”上司问：“大概还有多久能做完？”小A：“emmm，我不知道诶，快了吧。” 场景2：OKR的ROI难以衡量 小A最近负责的一个项目，终于做完了，老板问小A，小A你觉得这个项目，咱们做得值不值。小A心想，难道不是做完就好了，值不值是咋回事呀。老板追问到，你在这个项目上的投入产出比，你觉得理想吗？小A：“emmm，我不知道，我以为做完就好了~~” 上述两个场景，在工作中，经常发生。一个是OKR完成进展失去把控，一个是OKR的ROI难以衡量。出现这些问题的本质原因，是在做OKR管理的过程中，没有做好。 因此，OKR管理的重要性，不言而喻。 OKR是什么？OKR的全称是Objectives and Key Results。 OKR由两部分组成，目标(O)和关键结果(KR)。 OKR管理是什么？OKR管理是，在使用OKR来对工作进行管理的过程中，如何让OKR更好地为我们所用。 为什么有本次OKR管理分享？在以往的过程中，在OKR的落地过程中，我也遇到过这样或者那样的问题。 因为OKR比较多，一个周期过半，才意识到，自己还有一个OKR，还没有开始TAT 同时管理多个OKR，每个OKR的进展难以把控。 交付OKR的ROI难以衡量，不知道这个OKR完成地值不值。 等等。 后来，开始接触和学习一些OKR管理方式，并逐渐应用。因此有了本次分享~ 本次OKR管理分享是否适合你？如果，你刚进入职场1-2年，或者你是大三，或者大四的同学。 目前，对OKR管理，没有清晰的认识，期待使用这样一套工具，对自己的工作学习进行更好的管理，从而更好地完成你的目标。那么这场OKR分享就是适合你的~ 如何更好地进行OKR管理？我们可以将OKR管理拆解成为3部分：OKR制定，OKR管理追踪，OKR结果衡量。 OKR制定原则1:公司的战略目标和个人的发展相结合OKR管理的第一步，是对OKR进行制定。 OKR制定原则1：将公司的战略目标和个人的发展相结合。 1. 公司的战略 To B 我们今年的营业额是达到1个亿，为了完成这个营业额，我们需要关单1,000家客户。 To C 我们今年的目标是用户量新增100万，用户粘性从1小时&#x2F;天，提升到1.5小时&#x2F;天。 2. 个人的发展 To B 目标：成为优秀的产项目经理 首先，拆解项目经理所需要的核心能力：谈判、项目进展把握等。 接着，将目标所需要的核心能力和公司目标结合。我个人的目标是成为优秀的项目经理，那么我如何通过完成公司的目标来提升自己，同样，提升自己，也能更好地完成公司的目标。 落地。 To C 目标：成为优秀的产品经理 首先，拆解产品经理需要的核心能力：用户需求、产品文档等 接着，将目标所需要的核心能力与公司目标结合。 落地。 目标：成为优秀的运营经理 首先，拆解运营经理需要的核心能力：活动运营、数据分析等 接着，将目标所需要的核心能力与公司目标结合。 落地。 OKR制定原则2：定量管理大师，彼得.德鲁克说”If you can’t measure it, you can’t improve it”。正是我们的OKR制定原则2：目标可量化。 在我们制定OKR的时候，一定要思考，如何将这个结果量化。比如： 作为销售，在本Q，需要找到 50 条线索，关单 10 家。 上述，即为一个进行过量化的OKR。 OKR管理追踪在对OKR进行管理追踪部分，我们主要关注4个部分：重要性、进展、困难、以及投入。 1. 重要性不同的OKR，其重要程度自然各异。因此，我们需要权衡其重要性，再依据重要性，对其分配权重。 重要性的考虑，主要综合2个方面：该OKR对公司战略的贡献，在该OKR中，我的投入，因为一些OKR涉及到同事之间的协作。 综合上述两个考量，我们可以给不同的OKR划分权重。下面给出一个参考。 2. 进展我们需要知道OKR目前的进展，这样，我们才能有针对性的做推进，同时，在给上司做汇报的时候，我们也能更好地和上司进行沟通。 如何对OKR进展进行拆分呢？ 每周进度量化 首先，我们需要分析OKR所在的时间阶段。比如，一个Q为2个月，一个月4周。也就是说，我们OKR的周期是8周。那么我们可以使用100来除以8，每周的进展按照规划应该是13%。 因为实际业务场景各异，进度管控上计算方式会有出入。 每周进度文本留存 文本留存带来的益处： 留存每周完成的工作，知道自己投入的时间，都花在了哪里。 将每周成果和同事、上司共享。和同事协作，以及将自己的工作内容，呈现给老板。展示自己的劳动成果给老板，是职场中，非常重要的一课。 我们可以根据留存的内容，进行反思、复盘。根据学习理论，没有反思，没有总结，就没有成长。 给出一个参考样例： 对样例的具体解释，上面的截图，是对进度管理中的进度量化和文本留存，结构化的展示，一共分为6个部分： 部分1：第一周预期覆盖本O的 X %，以及，第一周规划 部分2：第一周实际的完成度 X %，是否完成了预期，以及第一周重要的进展与成果 部分3：第一周瓶颈或困难，在本周遇到了哪些困难，这些困难都是什么。写出来，可以让老板知道，自己遇到了困难，老板会给予相对应支持。同时，这些困难也可以给团队作为参考。 部分4：第一周思考或建议，从认识学习原理上来说，没有反思、没有总结，就没有学习。 部分5：Supervisor的评论。 部分6：第一周Supervisor的Reminder 3. 困难对困难的管理，一方面让我们知道，我们本次OKR的管理过程中，都遇到了哪些问题，做到和老板汇报，心中有数。再者，前车之覆后车之鉴，本次OKR中的困难，也是未来OKR中管理中，可以提供给我们思考规避风险的参考。 对困难的管理，我们可以按照类别来管理。 困难类别 具体困难 解决措施 客户沟通&#x2F;谈判 1. 客户谈判中，自己态度不够强硬 1. 态度需要强硬 专业技能(机器学习相关、数据分析) 1. 不能复现AUC计算原理 1. 重新推算AUC 方案策划 1. 方案策划之前对方案受众，没有提前和客户明确 1. 和客户事先明确需求 4. 投入在OKR的管理中，我们需要系统地记录我们所投入的资源，这样我们才能，对我们投入的资源做更好的衡量：资源投入的效率、所有资源投入综合。 在一个互联网公司，比较常见的一系列投入如下： 部门 需求 负责人 耗时 产品 ABC A 1小时 品牌 ABC B 2小时 技术 ABC C 3小时 2.3 OKR结果衡量1. OKR完成度对于OKR的完成度，我们要看： OKR是否在规定时间内容已完成 是 耗时周期。 周期内，时间和资源是如何被配置。 做的好，和做的不好的地方在哪里，如何优化。 否，具体目前已完成OKR的 X %。 耗时周期。 周期内，时间和资源是如何被配置 为什么没有在周期内完成OKR。 2. OKR呈现形式OKR的管理是为了我们更好地完成OKR。将OKR呈现给团队以及上司，也是非常重要的一部分。 具体的呈现形式，可以参考下述书籍： 金字塔原理 3. OKR管理，从工作到学习上面和大家分享，在工作中，如何更好地对OKR进行管理。其应用场景是工作，其实学习也是大家生活中，很大的一个场景。将上述的一套OKR管理系统，迁移到学习中，我们又可以怎么应用呢？ 下面，我就简单分享一下。 1. 目标设置 2. 目标管理 综上，便是我的分享啦~ 希望能够为大家提供一些思路，大家一起(๑•̀ㅂ•́)و✧加油！","categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"复盘和客户会议","slug":"2019510复盘客户会议","date":"2019-05-09T16:00:00.000Z","updated":"2023-03-24T10:41:37.521Z","comments":true,"path":"2019/05/09/2019510复盘客户会议/","link":"","permalink":"https://kerryli1007.github.io/2019/05/09/2019510%E5%A4%8D%E7%9B%98%E5%AE%A2%E6%88%B7%E4%BC%9A%E8%AE%AE/","excerpt":"","text":"本次反思来自和客户的某次会议，有3个部分： Start with Why，为什么复盘？ 复盘内容是什么？ 思考&amp;总结 为什么复盘？ 最近和客户过方案时候，发现自己对方案的熟悉程度，竟然比不上客户，但是客户却能从几个小点展开，最后梳理清楚整个项目。 自己在阅读策划指导方案时候，遗漏掉了一些细节描述。这些遗漏，对方案的最终策划，影响较大。反思自己遗漏细节的原因 习惯性跳过自己看不懂的地方(这种时候，往往最容易漏掉重点) 复盘具体内容？ 自己在和客户梳理方案时候，容易陷入细节中，对细节的把握是应该的。 但是从细节入手，不利于，把握所有的内容。更好的做法是从框架开始，抓住关键点，从关键点展开，梳理整个项目。 那么问题来了，这些关键点如何抓住呢？客户关注的点都有哪些？客户关注的点，和我们具体的项目实施，如何结合起来呢？ 反思&amp;总结反思1 | 如何主导项目主导一个项目的时候，一定不能从细节出发，要从框架出发，从框架出发，抓住关键点，然后展开。为什么不能直接跳入细节呢？因为直接跳入细节，很难把控全局，学会zoom in 和zoom out 什么是zoom out 放大，这个时候，从框架开始思考 什么是zoom in 缩小，这个时候，开始关注细节 Zoom in 和 Zoom out也好，都是从具体的操作层面来说，但是退一步，这些都属于具体操作层面的事物。在操作层面的上一层，需要是方向层面，也就是说，目标在哪里？以始为终，才能确保，我们做的东西，能达到最开始的目标。 那目标如何确认？ 这个项目里面有多少个关键人物，每个关键人物的角色是什么，每个角色的诉求是什么？ 总结和分析不同stakeholder的目标？ 从大家的目标出发，回归到项目本身，梳理项目的关键节点。 反思2 | 如何深度阅读如果阅读过程中遇到不懂的？ 做笔记，事后和相关同事沟通请教 不动笔，不做笔记，不阅读？ 阅读不是目的，输出结论是目的","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"你负责的app日活降了5%，你会如何分析？","slug":"你负责的app日活下降了5-，你会如何分析","date":"2019-05-06T16:00:00.000Z","updated":"2023-03-24T10:41:37.525Z","comments":true,"path":"2019/05/06/你负责的app日活下降了5-，你会如何分析/","link":"","permalink":"https://kerryli1007.github.io/2019/05/06/%E4%BD%A0%E8%B4%9F%E8%B4%A3%E7%9A%84app%E6%97%A5%E6%B4%BB%E4%B8%8B%E9%99%8D%E4%BA%865-%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90/","excerpt":"","text":"本问题出自亚雄老师「互联网er读书会」每日一问。 ASK 你负责的app日活降了5%，你会如何分析？ 思考，以下Enjoy 本次思考，分为4个部分： 确认APP类型 确认日活定义 确认日活下降5%的定义 分析影响日活的因素 1. 确认APP类型首先，在分析这个问题的时候，我们需要明白，我们的APP是什么类型的APP： 工具 社交 电商 内容 为什么，我们需要明确APP的类型呢？因为不同的APP类型，其日活定义会存在差异。 2. 确认日活定义那么，不同类型的APP，其日活定义会有什么区别呢？ APP类型 日活定义 参考产品 工具 每日登陆？ 墨迹天气 社交 用户在平台上与他人产生至少一条互动（发动态、点赞、评论、转发、私聊）？ soul 电商 用户完成一笔订单？ 拼多多 内容 用户看多少分钟的内容？ 微信读书 3. 确认日活下降5%的定义？在我们开始确认数据的时候，我们需要先明白，产品目前的所处阶段： 探索 成长 成熟 衰退 3.1 确认数据本身数据本身，需要我们思考什么呢？ 数据的真实性？ 数据的来源&#x2F;统计口径？ 数据的绝对值 5%是如何计算出来的？ 基数是多少？ 3.2 数值同比同比是考虑月份的影响，比如判断去年1月和今年1月的数据。 Y 产品走下坡路 市场整体行情下滑 市场竞争格局变化 N 3.3 数值环比环比是周&#x2F;月环比。近一周&#x2F;月和上一周&#x2F;月的日均DAU数值差异。 Y 内部 产品：产品是否最近有大的更新 运营：运营是否有大的运营动作 品牌：最近是否有负面新闻 市场：在市面上的投放最近是否有变化 技术：是否出了什么Bug 外部 竞争对手是否有大的动作 N 3.4 数值横向比较横向比较，是指和市面上其他产品的比较。如无法获得相关数据，则不从这条分析。 4. 分析影响日活的因素4.1 工具类： 缓慢下滑 产品走下坡路 采访留存用户 采访流失用户 市场整体行情不行 如2018年互联网经济危机 市场竞争格局变化 如京东迎来了拼多多 断崖式下滑 内部 产品 运营 品牌 市场 技术 外部 竞争对手是否有大的工作 备注：社交、电商、内容的分析思路同工具类 反思 思考的过程，是快乐的~","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]},{"title":"有哪些增长策略，可以应用在feed流中？","slug":"有哪些增长策略，可以应用在feed流中","date":"2019-04-30T16:00:00.000Z","updated":"2023-03-24T10:41:37.529Z","comments":true,"path":"2019/04/30/有哪些增长策略，可以应用在feed流中/","link":"","permalink":"https://kerryli1007.github.io/2019/04/30/%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A2%9E%E9%95%BF%E7%AD%96%E7%95%A5%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BA%94%E7%94%A8%E5%9C%A8feed%E6%B5%81%E4%B8%AD/","excerpt":"","text":"本问题出自亚雄老师「互联网er读书会」每日一问。 ASK有哪些增长策略，可以应用在feed流中？ 思考什么是feed流？什么是增长策略？为什么将增长策略应用到feed流中？如何将增长策略应用到feed流中？ 1.什么是feed流？Feed是将用户主动订阅的若干消息源组合在一起形成内容聚合器，帮助用户持续地获取最新的订阅源内容。 Feed流解决两个核心问题： 应该展示给用户什么样的内容 展示给用户的内容应该怎么排序 目前上市面上常见的Feed流主要由两种： 📚Timeline产品：微信朋友圈 对Feed流核心问题的回答： 展示给用户其好友发布的所有内容 展示给用户的这些内容应该按时间发布的先后顺序排序 📚推荐系统产品：抖音 对Feed流核心问题的回答： 展示给用户其喜欢的内容 展示给用户的内容按其喜好程度，由强到弱排序 2.什么是增长策略？增长对商业来说，可理解为获取更多的用户&#x2F;客户，最终的结果是，获取更多的Revenue。 Revenue &#x3D; Users * 转化率 * ARPU 将Revenue进行拆分，可以等于 用户数 ✖️ 转化率 ✖️ ARPU。 完成增长，可以从这3个关键节点思考。 提高用户数 提高转化率 提高ARPU值 📚提高用户数量 用户增长分为两部分，部分1渠道投放，部分2依旧带新。在我们本讨论话题下，围绕部分2讨论。推荐给用户其感兴趣的内容，引导其分享。 📚提高转化率 推荐用户感兴趣的商品。 📚提高ARPU值 基于用户的过往兴趣，推荐客单价更高的商品。 3.为什么将增长策略应用到feed流中？不管是对于timeline还是对于推荐系统，都是为了提高Revenue。 4.如何将增长策略应用到feed流中？ Timeline：尚且没有清晰思路 推荐系统 协同过滤的推荐算法 基于内容过滤的推荐算法 混合型推荐算法 流行度推荐算法 思考&amp;总结 对feed流的理解，最开始，简单地理解成了“推荐系统”，但是Timeline也是feed流的一种 对增长策略的拆解、定义，最开始只将其定义为了更多的用户，而没有系统的从 “用户数 ✖️ 转化率 ✖️ ARPU” 来拆解 Feed流和增长之间的逻辑关系梳理，鲁棒性不够。分别来说 Feed流和提高用户数量之间的逻辑 Feed流和提高转化率之间的逻辑 Feed流和提高ARPU之间的逻辑 如果有明确的业务场景，可以回答得更好","categories":[{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[]}],"categories":[{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"推荐策略产品必备技能","slug":"推荐策略产品必备技能","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"},{"name":"推荐策略产品","slug":"推荐策略产品","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5%E4%BA%A7%E5%93%81/"},{"name":"推荐系统","slug":"推荐系统","permalink":"https://kerryli1007.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"},{"name":"效率工具","slug":"效率工具","permalink":"https://kerryli1007.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"},{"name":"思考","slug":"思考","permalink":"https://kerryli1007.github.io/categories/%E6%80%9D%E8%80%83/"},{"name":"广告系统/推荐策略","slug":"广告系统-推荐策略","permalink":"https://kerryli1007.github.io/categories/%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F-%E6%8E%A8%E8%8D%90%E7%AD%96%E7%95%A5/"},{"name":"阅读","slug":"阅读","permalink":"https://kerryli1007.github.io/categories/%E9%98%85%E8%AF%BB/"},{"name":"客户（用户）价值随想录","slug":"客户（用户）价值随想录","permalink":"https://kerryli1007.github.io/categories/%E5%AE%A2%E6%88%B7%EF%BC%88%E7%94%A8%E6%88%B7%EF%BC%89%E4%BB%B7%E5%80%BC%E9%9A%8F%E6%83%B3%E5%BD%95/"},{"name":"工具","slug":"工具","permalink":"https://kerryli1007.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"代码","slug":"代码","permalink":"https://kerryli1007.github.io/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"work","slug":"work","permalink":"https://kerryli1007.github.io/tags/work/"},{"name":"技术","slug":"技术","permalink":"https://kerryli1007.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"工作","slug":"工作","permalink":"https://kerryli1007.github.io/tags/%E5%B7%A5%E4%BD%9C/"}]}